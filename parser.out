Created by PLY (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prog
Rule 1     prog -> func
Rule 2     prog -> func prog
Rule 3     func -> FUNCTION ID LPARANT flist RPARANT RETURNS type COLON body END
Rule 4     func -> <empty>
Rule 5     body -> stmt
Rule 6     body -> stmt body
Rule 7     stmt -> expr SEMICOLON
Rule 8     stmt -> defvar SEMICOLON
Rule 9     stmt -> IF LPARANT expr RPARANT stmt
Rule 10    stmt -> IF LPARANT expr RPARANT stmt ELSE stmt
Rule 11    stmt -> WHILE LPARANT expr RPARANT DO stmt
Rule 12    stmt -> FOREACH LPARANT ID OF expr RPARANT stmt
Rule 13    stmt -> RETURN expr SEMICOLON
Rule 14    stmt -> body END
Rule 15    defvar -> VAL type ID
Rule 16    expr -> ID LPARANT clist RPARANT
Rule 17    expr -> expr LBRACKET expr RBRACKET
Rule 18    expr -> expr QUEST_MARK expr COLON expr
Rule 19    expr -> expr EQUAL expr
Rule 20    expr -> expr PLUS expr
Rule 21    expr -> expr MINUS expr
Rule 22    expr -> expr MULTIPLY expr
Rule 23    expr -> expr DIVIDE expr
Rule 24    expr -> expr PERCENT expr
Rule 25    expr -> expr SMALL expr
Rule 26    expr -> expr BIG expr
Rule 27    expr -> expr EQUAL_EQUAL expr
Rule 28    expr -> expr EXCL_EQUAL expr
Rule 29    expr -> expr SMALL_EQUAL expr
Rule 30    expr -> expr BIG_EQUAL expr
Rule 31    expr -> expr PIPE_PIPE expr
Rule 32    expr -> expr AMP_AMP expr
Rule 33    expr -> EXCL_MARK expr
Rule 34    expr -> MINUS expr
Rule 35    expr -> PLUS expr
Rule 36    expr -> LPARANT expr RPARANT
Rule 37    expr -> ID
Rule 38    expr -> NUMBER
Rule 39    flist -> <empty>
Rule 40    flist -> type ID
Rule 41    flist -> type ID COMMA flist
Rule 42    clist -> <empty>
Rule 43    clist -> expr
Rule 44    clist -> expr COMMA clist
Rule 45    type -> INT
Rule 46    type -> ARRAY
Rule 47    type -> NIL

Terminals, with rules where they appear

AMP_AMP              : 32
ARRAY                : 46
BIG                  : 26
BIG_EQUAL            : 30
COLON                : 3 18
COMMA                : 41 44
DIVIDE               : 23
DO                   : 11
ELSE                 : 10
END                  : 3 14
EQUAL                : 19
EQUAL_EQUAL          : 27
EXCL_EQUAL           : 28
EXCL_MARK            : 33
FOREACH              : 12
FUNCTION             : 3
ID                   : 3 12 15 16 37 40 41
IF                   : 9 10
INT                  : 45
LBRACKET             : 17
LPARANT              : 3 9 10 11 12 16 36
MINUS                : 21 34
MULTIPLY             : 22
NIL                  : 47
NUMBER               : 38
OF                   : 12
PERCENT              : 24
PIPE_PIPE            : 31
PLUS                 : 20 35
QUEST_MARK           : 18
RBRACKET             : 17
RETURN               : 13
RETURNS              : 3
RPARANT              : 3 9 10 11 12 16 36
SEMICOLON            : 7 8 13
SMALL                : 25
SMALL_EQUAL          : 29
VAL                  : 15
WHILE                : 11
error                : 

Nonterminals, with rules where they appear

body                 : 3 6 14
clist                : 16 44
defvar               : 8
expr                 : 7 9 10 11 12 13 17 17 18 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 34 35 36 43 44
flist                : 3 41
func                 : 1 2
prog                 : 2 0
stmt                 : 5 6 9 10 10 11 12
type                 : 3 15 40 41


state 0

    (0) S' -> . prog
    (1) prog -> . func
    (2) prog -> . func prog
    (3) func -> . FUNCTION ID LPARANT flist RPARANT RETURNS type COLON body END
    (4) func -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 3
    $end            reduce using rule 4 (func -> .)

  ! FUNCTION        [ reduce using rule 4 (func -> .) ]

    prog                           shift and go to state 1
    func                           shift and go to state 2

state 1

    (0) S' -> prog .



state 2

    (1) prog -> func .
    (2) prog -> func . prog
    (1) prog -> . func
    (2) prog -> . func prog
    (3) func -> . FUNCTION ID LPARANT flist RPARANT RETURNS type COLON body END
    (4) func -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 1 (prog -> func .)
    $end            reduce using rule 1 (prog -> func .)
    FUNCTION        shift and go to state 3

  ! FUNCTION        [ reduce using rule 4 (func -> .) ]
  ! $end            [ reduce using rule 4 (func -> .) ]

    func                           shift and go to state 2
    prog                           shift and go to state 4

state 3

    (3) func -> FUNCTION . ID LPARANT flist RPARANT RETURNS type COLON body END

    ID              shift and go to state 5


state 4

    (2) prog -> func prog .

    $end            reduce using rule 2 (prog -> func prog .)


state 5

    (3) func -> FUNCTION ID . LPARANT flist RPARANT RETURNS type COLON body END

    LPARANT         shift and go to state 6


state 6

    (3) func -> FUNCTION ID LPARANT . flist RPARANT RETURNS type COLON body END
    (39) flist -> .
    (40) flist -> . type ID
    (41) flist -> . type ID COMMA flist
    (45) type -> . INT
    (46) type -> . ARRAY
    (47) type -> . NIL

    RPARANT         reduce using rule 39 (flist -> .)
    INT             shift and go to state 9
    ARRAY           shift and go to state 10
    NIL             shift and go to state 11

    flist                          shift and go to state 7
    type                           shift and go to state 8

state 7

    (3) func -> FUNCTION ID LPARANT flist . RPARANT RETURNS type COLON body END

    RPARANT         shift and go to state 12


state 8

    (40) flist -> type . ID
    (41) flist -> type . ID COMMA flist

    ID              shift and go to state 13


state 9

    (45) type -> INT .

    ID              reduce using rule 45 (type -> INT .)
    COLON           reduce using rule 45 (type -> INT .)


state 10

    (46) type -> ARRAY .

    ID              reduce using rule 46 (type -> ARRAY .)
    COLON           reduce using rule 46 (type -> ARRAY .)


state 11

    (47) type -> NIL .

    ID              reduce using rule 47 (type -> NIL .)
    COLON           reduce using rule 47 (type -> NIL .)


state 12

    (3) func -> FUNCTION ID LPARANT flist RPARANT . RETURNS type COLON body END

    RETURNS         shift and go to state 14


state 13

    (40) flist -> type ID .
    (41) flist -> type ID . COMMA flist

    RPARANT         reduce using rule 40 (flist -> type ID .)
    COMMA           shift and go to state 15


state 14

    (3) func -> FUNCTION ID LPARANT flist RPARANT RETURNS . type COLON body END
    (45) type -> . INT
    (46) type -> . ARRAY
    (47) type -> . NIL

    INT             shift and go to state 9
    ARRAY           shift and go to state 10
    NIL             shift and go to state 11

    type                           shift and go to state 16

state 15

    (41) flist -> type ID COMMA . flist
    (39) flist -> .
    (40) flist -> . type ID
    (41) flist -> . type ID COMMA flist
    (45) type -> . INT
    (46) type -> . ARRAY
    (47) type -> . NIL

    RPARANT         reduce using rule 39 (flist -> .)
    INT             shift and go to state 9
    ARRAY           shift and go to state 10
    NIL             shift and go to state 11

    type                           shift and go to state 8
    flist                          shift and go to state 17

state 16

    (3) func -> FUNCTION ID LPARANT flist RPARANT RETURNS type . COLON body END

    COLON           shift and go to state 18


state 17

    (41) flist -> type ID COMMA flist .

    RPARANT         reduce using rule 41 (flist -> type ID COMMA flist .)


state 18

    (3) func -> FUNCTION ID LPARANT flist RPARANT RETURNS type COLON . body END
    (5) body -> . stmt
    (6) body -> . stmt body
    (7) stmt -> . expr SEMICOLON
    (8) stmt -> . defvar SEMICOLON
    (9) stmt -> . IF LPARANT expr RPARANT stmt
    (10) stmt -> . IF LPARANT expr RPARANT stmt ELSE stmt
    (11) stmt -> . WHILE LPARANT expr RPARANT DO stmt
    (12) stmt -> . FOREACH LPARANT ID OF expr RPARANT stmt
    (13) stmt -> . RETURN expr SEMICOLON
    (14) stmt -> . body END
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER
    (15) defvar -> . VAL type ID

    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOREACH         shift and go to state 27
    RETURN          shift and go to state 28
    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32
    VAL             shift and go to state 33

    body                           shift and go to state 21
    stmt                           shift and go to state 22
    expr                           shift and go to state 23
    defvar                         shift and go to state 24

state 19

    (16) expr -> ID . LPARANT clist RPARANT
    (37) expr -> ID .

    LPARANT         shift and go to state 34
    SEMICOLON       reduce using rule 37 (expr -> ID .)
    LBRACKET        reduce using rule 37 (expr -> ID .)
    QUEST_MARK      reduce using rule 37 (expr -> ID .)
    EQUAL           reduce using rule 37 (expr -> ID .)
    PLUS            reduce using rule 37 (expr -> ID .)
    MINUS           reduce using rule 37 (expr -> ID .)
    MULTIPLY        reduce using rule 37 (expr -> ID .)
    DIVIDE          reduce using rule 37 (expr -> ID .)
    PERCENT         reduce using rule 37 (expr -> ID .)
    SMALL           reduce using rule 37 (expr -> ID .)
    BIG             reduce using rule 37 (expr -> ID .)
    EQUAL_EQUAL     reduce using rule 37 (expr -> ID .)
    EXCL_EQUAL      reduce using rule 37 (expr -> ID .)
    SMALL_EQUAL     reduce using rule 37 (expr -> ID .)
    BIG_EQUAL       reduce using rule 37 (expr -> ID .)
    PIPE_PIPE       reduce using rule 37 (expr -> ID .)
    AMP_AMP         reduce using rule 37 (expr -> ID .)
    RPARANT         reduce using rule 37 (expr -> ID .)
    COMMA           reduce using rule 37 (expr -> ID .)
    RBRACKET        reduce using rule 37 (expr -> ID .)
    COLON           reduce using rule 37 (expr -> ID .)


state 20

    (36) expr -> LPARANT . expr RPARANT
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32

    expr                           shift and go to state 35

state 21

    (3) func -> FUNCTION ID LPARANT flist RPARANT RETURNS type COLON body . END
    (14) stmt -> body . END

    END             shift and go to state 36


state 22

    (5) body -> stmt .
    (6) body -> stmt . body
    (5) body -> . stmt
    (6) body -> . stmt body
    (7) stmt -> . expr SEMICOLON
    (8) stmt -> . defvar SEMICOLON
    (9) stmt -> . IF LPARANT expr RPARANT stmt
    (10) stmt -> . IF LPARANT expr RPARANT stmt ELSE stmt
    (11) stmt -> . WHILE LPARANT expr RPARANT DO stmt
    (12) stmt -> . FOREACH LPARANT ID OF expr RPARANT stmt
    (13) stmt -> . RETURN expr SEMICOLON
    (14) stmt -> . body END
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER
    (15) defvar -> . VAL type ID

    END             reduce using rule 5 (body -> stmt .)
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOREACH         shift and go to state 27
    RETURN          shift and go to state 28
    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32
    VAL             shift and go to state 33

    stmt                           shift and go to state 22
    body                           shift and go to state 37
    expr                           shift and go to state 23
    defvar                         shift and go to state 24

state 23

    (7) stmt -> expr . SEMICOLON
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       shift and go to state 38
    LBRACKET        shift and go to state 39
    QUEST_MARK      shift and go to state 40
    EQUAL           shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45
    PERCENT         shift and go to state 46
    SMALL           shift and go to state 47
    BIG             shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    EXCL_EQUAL      shift and go to state 50
    SMALL_EQUAL     shift and go to state 51
    BIG_EQUAL       shift and go to state 52
    PIPE_PIPE       shift and go to state 53
    AMP_AMP         shift and go to state 54


state 24

    (8) stmt -> defvar . SEMICOLON

    SEMICOLON       shift and go to state 55


state 25

    (9) stmt -> IF . LPARANT expr RPARANT stmt
    (10) stmt -> IF . LPARANT expr RPARANT stmt ELSE stmt

    LPARANT         shift and go to state 56


state 26

    (11) stmt -> WHILE . LPARANT expr RPARANT DO stmt

    LPARANT         shift and go to state 57


state 27

    (12) stmt -> FOREACH . LPARANT ID OF expr RPARANT stmt

    LPARANT         shift and go to state 58


state 28

    (13) stmt -> RETURN . expr SEMICOLON
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32

    expr                           shift and go to state 59

state 29

    (35) expr -> PLUS . expr
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32

    expr                           shift and go to state 60

state 30

    (34) expr -> MINUS . expr
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32

    expr                           shift and go to state 61

state 31

    (33) expr -> EXCL_MARK . expr
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32

    expr                           shift and go to state 62

state 32

    (38) expr -> NUMBER .

    SEMICOLON       reduce using rule 38 (expr -> NUMBER .)
    LBRACKET        reduce using rule 38 (expr -> NUMBER .)
    QUEST_MARK      reduce using rule 38 (expr -> NUMBER .)
    EQUAL           reduce using rule 38 (expr -> NUMBER .)
    PLUS            reduce using rule 38 (expr -> NUMBER .)
    MINUS           reduce using rule 38 (expr -> NUMBER .)
    MULTIPLY        reduce using rule 38 (expr -> NUMBER .)
    DIVIDE          reduce using rule 38 (expr -> NUMBER .)
    PERCENT         reduce using rule 38 (expr -> NUMBER .)
    SMALL           reduce using rule 38 (expr -> NUMBER .)
    BIG             reduce using rule 38 (expr -> NUMBER .)
    EQUAL_EQUAL     reduce using rule 38 (expr -> NUMBER .)
    EXCL_EQUAL      reduce using rule 38 (expr -> NUMBER .)
    SMALL_EQUAL     reduce using rule 38 (expr -> NUMBER .)
    BIG_EQUAL       reduce using rule 38 (expr -> NUMBER .)
    PIPE_PIPE       reduce using rule 38 (expr -> NUMBER .)
    AMP_AMP         reduce using rule 38 (expr -> NUMBER .)
    RPARANT         reduce using rule 38 (expr -> NUMBER .)
    COMMA           reduce using rule 38 (expr -> NUMBER .)
    RBRACKET        reduce using rule 38 (expr -> NUMBER .)
    COLON           reduce using rule 38 (expr -> NUMBER .)


state 33

    (15) defvar -> VAL . type ID
    (45) type -> . INT
    (46) type -> . ARRAY
    (47) type -> . NIL

    INT             shift and go to state 9
    ARRAY           shift and go to state 10
    NIL             shift and go to state 11

    type                           shift and go to state 63

state 34

    (16) expr -> ID LPARANT . clist RPARANT
    (42) clist -> .
    (43) clist -> . expr
    (44) clist -> . expr COMMA clist
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER

    RPARANT         reduce using rule 42 (clist -> .)
    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32

    clist                          shift and go to state 64
    expr                           shift and go to state 65

state 35

    (36) expr -> LPARANT expr . RPARANT
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    RPARANT         shift and go to state 66
    LBRACKET        shift and go to state 39
    QUEST_MARK      shift and go to state 40
    EQUAL           shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45
    PERCENT         shift and go to state 46
    SMALL           shift and go to state 47
    BIG             shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    EXCL_EQUAL      shift and go to state 50
    SMALL_EQUAL     shift and go to state 51
    BIG_EQUAL       shift and go to state 52
    PIPE_PIPE       shift and go to state 53
    AMP_AMP         shift and go to state 54


state 36

    (3) func -> FUNCTION ID LPARANT flist RPARANT RETURNS type COLON body END .
    (14) stmt -> body END .

    FUNCTION        reduce using rule 3 (func -> FUNCTION ID LPARANT flist RPARANT RETURNS type COLON body END .)
    $end            reduce using rule 3 (func -> FUNCTION ID LPARANT flist RPARANT RETURNS type COLON body END .)
    IF              reduce using rule 14 (stmt -> body END .)
    WHILE           reduce using rule 14 (stmt -> body END .)
    FOREACH         reduce using rule 14 (stmt -> body END .)
    RETURN          reduce using rule 14 (stmt -> body END .)
    ID              reduce using rule 14 (stmt -> body END .)
    EXCL_MARK       reduce using rule 14 (stmt -> body END .)
    MINUS           reduce using rule 14 (stmt -> body END .)
    PLUS            reduce using rule 14 (stmt -> body END .)
    LPARANT         reduce using rule 14 (stmt -> body END .)
    NUMBER          reduce using rule 14 (stmt -> body END .)
    VAL             reduce using rule 14 (stmt -> body END .)
    END             reduce using rule 14 (stmt -> body END .)


state 37

    (6) body -> stmt body .
    (14) stmt -> body . END

  ! shift/reduce conflict for END resolved as shift
    END             shift and go to state 67

  ! END             [ reduce using rule 6 (body -> stmt body .) ]


state 38

    (7) stmt -> expr SEMICOLON .

    IF              reduce using rule 7 (stmt -> expr SEMICOLON .)
    WHILE           reduce using rule 7 (stmt -> expr SEMICOLON .)
    FOREACH         reduce using rule 7 (stmt -> expr SEMICOLON .)
    RETURN          reduce using rule 7 (stmt -> expr SEMICOLON .)
    ID              reduce using rule 7 (stmt -> expr SEMICOLON .)
    EXCL_MARK       reduce using rule 7 (stmt -> expr SEMICOLON .)
    MINUS           reduce using rule 7 (stmt -> expr SEMICOLON .)
    PLUS            reduce using rule 7 (stmt -> expr SEMICOLON .)
    LPARANT         reduce using rule 7 (stmt -> expr SEMICOLON .)
    NUMBER          reduce using rule 7 (stmt -> expr SEMICOLON .)
    VAL             reduce using rule 7 (stmt -> expr SEMICOLON .)
    END             reduce using rule 7 (stmt -> expr SEMICOLON .)
    ELSE            reduce using rule 7 (stmt -> expr SEMICOLON .)


state 39

    (17) expr -> expr LBRACKET . expr RBRACKET
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32

    expr                           shift and go to state 68

state 40

    (18) expr -> expr QUEST_MARK . expr COLON expr
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32

    expr                           shift and go to state 69

state 41

    (19) expr -> expr EQUAL . expr
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32

    expr                           shift and go to state 70

state 42

    (20) expr -> expr PLUS . expr
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32

    expr                           shift and go to state 71

state 43

    (21) expr -> expr MINUS . expr
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32

    expr                           shift and go to state 72

state 44

    (22) expr -> expr MULTIPLY . expr
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32

    expr                           shift and go to state 73

state 45

    (23) expr -> expr DIVIDE . expr
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32

    expr                           shift and go to state 74

state 46

    (24) expr -> expr PERCENT . expr
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32

    expr                           shift and go to state 75

state 47

    (25) expr -> expr SMALL . expr
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32

    expr                           shift and go to state 76

state 48

    (26) expr -> expr BIG . expr
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32

    expr                           shift and go to state 77

state 49

    (27) expr -> expr EQUAL_EQUAL . expr
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32

    expr                           shift and go to state 78

state 50

    (28) expr -> expr EXCL_EQUAL . expr
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32

    expr                           shift and go to state 79

state 51

    (29) expr -> expr SMALL_EQUAL . expr
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32

    expr                           shift and go to state 80

state 52

    (30) expr -> expr BIG_EQUAL . expr
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32

    expr                           shift and go to state 81

state 53

    (31) expr -> expr PIPE_PIPE . expr
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32

    expr                           shift and go to state 82

state 54

    (32) expr -> expr AMP_AMP . expr
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32

    expr                           shift and go to state 83

state 55

    (8) stmt -> defvar SEMICOLON .

    IF              reduce using rule 8 (stmt -> defvar SEMICOLON .)
    WHILE           reduce using rule 8 (stmt -> defvar SEMICOLON .)
    FOREACH         reduce using rule 8 (stmt -> defvar SEMICOLON .)
    RETURN          reduce using rule 8 (stmt -> defvar SEMICOLON .)
    ID              reduce using rule 8 (stmt -> defvar SEMICOLON .)
    EXCL_MARK       reduce using rule 8 (stmt -> defvar SEMICOLON .)
    MINUS           reduce using rule 8 (stmt -> defvar SEMICOLON .)
    PLUS            reduce using rule 8 (stmt -> defvar SEMICOLON .)
    LPARANT         reduce using rule 8 (stmt -> defvar SEMICOLON .)
    NUMBER          reduce using rule 8 (stmt -> defvar SEMICOLON .)
    VAL             reduce using rule 8 (stmt -> defvar SEMICOLON .)
    END             reduce using rule 8 (stmt -> defvar SEMICOLON .)
    ELSE            reduce using rule 8 (stmt -> defvar SEMICOLON .)


state 56

    (9) stmt -> IF LPARANT . expr RPARANT stmt
    (10) stmt -> IF LPARANT . expr RPARANT stmt ELSE stmt
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32

    expr                           shift and go to state 84

state 57

    (11) stmt -> WHILE LPARANT . expr RPARANT DO stmt
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32

    expr                           shift and go to state 85

state 58

    (12) stmt -> FOREACH LPARANT . ID OF expr RPARANT stmt

    ID              shift and go to state 86


state 59

    (13) stmt -> RETURN expr . SEMICOLON
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       shift and go to state 87
    LBRACKET        shift and go to state 39
    QUEST_MARK      shift and go to state 40
    EQUAL           shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45
    PERCENT         shift and go to state 46
    SMALL           shift and go to state 47
    BIG             shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    EXCL_EQUAL      shift and go to state 50
    SMALL_EQUAL     shift and go to state 51
    BIG_EQUAL       shift and go to state 52
    PIPE_PIPE       shift and go to state 53
    AMP_AMP         shift and go to state 54


state 60

    (35) expr -> PLUS expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 35 (expr -> PLUS expr .)
    QUEST_MARK      reduce using rule 35 (expr -> PLUS expr .)
    EQUAL           reduce using rule 35 (expr -> PLUS expr .)
    PLUS            reduce using rule 35 (expr -> PLUS expr .)
    MINUS           reduce using rule 35 (expr -> PLUS expr .)
    PERCENT         reduce using rule 35 (expr -> PLUS expr .)
    SMALL           reduce using rule 35 (expr -> PLUS expr .)
    BIG             reduce using rule 35 (expr -> PLUS expr .)
    EQUAL_EQUAL     reduce using rule 35 (expr -> PLUS expr .)
    EXCL_EQUAL      reduce using rule 35 (expr -> PLUS expr .)
    SMALL_EQUAL     reduce using rule 35 (expr -> PLUS expr .)
    BIG_EQUAL       reduce using rule 35 (expr -> PLUS expr .)
    PIPE_PIPE       reduce using rule 35 (expr -> PLUS expr .)
    AMP_AMP         reduce using rule 35 (expr -> PLUS expr .)
    RPARANT         reduce using rule 35 (expr -> PLUS expr .)
    COMMA           reduce using rule 35 (expr -> PLUS expr .)
    RBRACKET        reduce using rule 35 (expr -> PLUS expr .)
    COLON           reduce using rule 35 (expr -> PLUS expr .)
    LBRACKET        shift and go to state 39
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45

  ! LBRACKET        [ reduce using rule 35 (expr -> PLUS expr .) ]
  ! MULTIPLY        [ reduce using rule 35 (expr -> PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 35 (expr -> PLUS expr .) ]
  ! QUEST_MARK      [ shift and go to state 40 ]
  ! EQUAL           [ shift and go to state 41 ]
  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! PERCENT         [ shift and go to state 46 ]
  ! SMALL           [ shift and go to state 47 ]
  ! BIG             [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! EXCL_EQUAL      [ shift and go to state 50 ]
  ! SMALL_EQUAL     [ shift and go to state 51 ]
  ! BIG_EQUAL       [ shift and go to state 52 ]
  ! PIPE_PIPE       [ shift and go to state 53 ]
  ! AMP_AMP         [ shift and go to state 54 ]


state 61

    (34) expr -> MINUS expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 34 (expr -> MINUS expr .)
    QUEST_MARK      reduce using rule 34 (expr -> MINUS expr .)
    EQUAL           reduce using rule 34 (expr -> MINUS expr .)
    PLUS            reduce using rule 34 (expr -> MINUS expr .)
    MINUS           reduce using rule 34 (expr -> MINUS expr .)
    PERCENT         reduce using rule 34 (expr -> MINUS expr .)
    SMALL           reduce using rule 34 (expr -> MINUS expr .)
    BIG             reduce using rule 34 (expr -> MINUS expr .)
    EQUAL_EQUAL     reduce using rule 34 (expr -> MINUS expr .)
    EXCL_EQUAL      reduce using rule 34 (expr -> MINUS expr .)
    SMALL_EQUAL     reduce using rule 34 (expr -> MINUS expr .)
    BIG_EQUAL       reduce using rule 34 (expr -> MINUS expr .)
    PIPE_PIPE       reduce using rule 34 (expr -> MINUS expr .)
    AMP_AMP         reduce using rule 34 (expr -> MINUS expr .)
    RPARANT         reduce using rule 34 (expr -> MINUS expr .)
    COMMA           reduce using rule 34 (expr -> MINUS expr .)
    RBRACKET        reduce using rule 34 (expr -> MINUS expr .)
    COLON           reduce using rule 34 (expr -> MINUS expr .)
    LBRACKET        shift and go to state 39
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45

  ! LBRACKET        [ reduce using rule 34 (expr -> MINUS expr .) ]
  ! MULTIPLY        [ reduce using rule 34 (expr -> MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 34 (expr -> MINUS expr .) ]
  ! QUEST_MARK      [ shift and go to state 40 ]
  ! EQUAL           [ shift and go to state 41 ]
  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! PERCENT         [ shift and go to state 46 ]
  ! SMALL           [ shift and go to state 47 ]
  ! BIG             [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! EXCL_EQUAL      [ shift and go to state 50 ]
  ! SMALL_EQUAL     [ shift and go to state 51 ]
  ! BIG_EQUAL       [ shift and go to state 52 ]
  ! PIPE_PIPE       [ shift and go to state 53 ]
  ! AMP_AMP         [ shift and go to state 54 ]


state 62

    (33) expr -> EXCL_MARK expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 33 (expr -> EXCL_MARK expr .)
    PERCENT         reduce using rule 33 (expr -> EXCL_MARK expr .)
    SMALL           reduce using rule 33 (expr -> EXCL_MARK expr .)
    BIG             reduce using rule 33 (expr -> EXCL_MARK expr .)
    EQUAL_EQUAL     reduce using rule 33 (expr -> EXCL_MARK expr .)
    EXCL_EQUAL      reduce using rule 33 (expr -> EXCL_MARK expr .)
    SMALL_EQUAL     reduce using rule 33 (expr -> EXCL_MARK expr .)
    BIG_EQUAL       reduce using rule 33 (expr -> EXCL_MARK expr .)
    PIPE_PIPE       reduce using rule 33 (expr -> EXCL_MARK expr .)
    AMP_AMP         reduce using rule 33 (expr -> EXCL_MARK expr .)
    RPARANT         reduce using rule 33 (expr -> EXCL_MARK expr .)
    COMMA           reduce using rule 33 (expr -> EXCL_MARK expr .)
    RBRACKET        reduce using rule 33 (expr -> EXCL_MARK expr .)
    COLON           reduce using rule 33 (expr -> EXCL_MARK expr .)
    LBRACKET        shift and go to state 39
    QUEST_MARK      shift and go to state 40
    EQUAL           shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45

  ! LBRACKET        [ reduce using rule 33 (expr -> EXCL_MARK expr .) ]
  ! QUEST_MARK      [ reduce using rule 33 (expr -> EXCL_MARK expr .) ]
  ! EQUAL           [ reduce using rule 33 (expr -> EXCL_MARK expr .) ]
  ! PLUS            [ reduce using rule 33 (expr -> EXCL_MARK expr .) ]
  ! MINUS           [ reduce using rule 33 (expr -> EXCL_MARK expr .) ]
  ! MULTIPLY        [ reduce using rule 33 (expr -> EXCL_MARK expr .) ]
  ! DIVIDE          [ reduce using rule 33 (expr -> EXCL_MARK expr .) ]
  ! PERCENT         [ shift and go to state 46 ]
  ! SMALL           [ shift and go to state 47 ]
  ! BIG             [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! EXCL_EQUAL      [ shift and go to state 50 ]
  ! SMALL_EQUAL     [ shift and go to state 51 ]
  ! BIG_EQUAL       [ shift and go to state 52 ]
  ! PIPE_PIPE       [ shift and go to state 53 ]
  ! AMP_AMP         [ shift and go to state 54 ]


state 63

    (15) defvar -> VAL type . ID

    ID              shift and go to state 88


state 64

    (16) expr -> ID LPARANT clist . RPARANT

    RPARANT         shift and go to state 89


state 65

    (43) clist -> expr .
    (44) clist -> expr . COMMA clist
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    RPARANT         reduce using rule 43 (clist -> expr .)
    COMMA           shift and go to state 90
    LBRACKET        shift and go to state 39
    QUEST_MARK      shift and go to state 40
    EQUAL           shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45
    PERCENT         shift and go to state 46
    SMALL           shift and go to state 47
    BIG             shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    EXCL_EQUAL      shift and go to state 50
    SMALL_EQUAL     shift and go to state 51
    BIG_EQUAL       shift and go to state 52
    PIPE_PIPE       shift and go to state 53
    AMP_AMP         shift and go to state 54


state 66

    (36) expr -> LPARANT expr RPARANT .

    SEMICOLON       reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    LBRACKET        reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    QUEST_MARK      reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    EQUAL           reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    PLUS            reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    MINUS           reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    MULTIPLY        reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    DIVIDE          reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    PERCENT         reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    SMALL           reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    BIG             reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    EQUAL_EQUAL     reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    EXCL_EQUAL      reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    SMALL_EQUAL     reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    BIG_EQUAL       reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    PIPE_PIPE       reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    AMP_AMP         reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    RPARANT         reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    COMMA           reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    RBRACKET        reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    COLON           reduce using rule 36 (expr -> LPARANT expr RPARANT .)


state 67

    (14) stmt -> body END .

    IF              reduce using rule 14 (stmt -> body END .)
    WHILE           reduce using rule 14 (stmt -> body END .)
    FOREACH         reduce using rule 14 (stmt -> body END .)
    RETURN          reduce using rule 14 (stmt -> body END .)
    ID              reduce using rule 14 (stmt -> body END .)
    EXCL_MARK       reduce using rule 14 (stmt -> body END .)
    MINUS           reduce using rule 14 (stmt -> body END .)
    PLUS            reduce using rule 14 (stmt -> body END .)
    LPARANT         reduce using rule 14 (stmt -> body END .)
    NUMBER          reduce using rule 14 (stmt -> body END .)
    VAL             reduce using rule 14 (stmt -> body END .)
    END             reduce using rule 14 (stmt -> body END .)
    ELSE            reduce using rule 14 (stmt -> body END .)


state 68

    (17) expr -> expr LBRACKET expr . RBRACKET
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    RBRACKET        shift and go to state 91
    LBRACKET        shift and go to state 39
    QUEST_MARK      shift and go to state 40
    EQUAL           shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45
    PERCENT         shift and go to state 46
    SMALL           shift and go to state 47
    BIG             shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    EXCL_EQUAL      shift and go to state 50
    SMALL_EQUAL     shift and go to state 51
    BIG_EQUAL       shift and go to state 52
    PIPE_PIPE       shift and go to state 53
    AMP_AMP         shift and go to state 54


state 69

    (18) expr -> expr QUEST_MARK expr . COLON expr
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    COLON           shift and go to state 92
    LBRACKET        shift and go to state 39
    QUEST_MARK      shift and go to state 40
    EQUAL           shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45
    PERCENT         shift and go to state 46
    SMALL           shift and go to state 47
    BIG             shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    EXCL_EQUAL      shift and go to state 50
    SMALL_EQUAL     shift and go to state 51
    BIG_EQUAL       shift and go to state 52
    PIPE_PIPE       shift and go to state 53
    AMP_AMP         shift and go to state 54


state 70

    (19) expr -> expr EQUAL expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 19 (expr -> expr EQUAL expr .)
    QUEST_MARK      reduce using rule 19 (expr -> expr EQUAL expr .)
    EQUAL           reduce using rule 19 (expr -> expr EQUAL expr .)
    PERCENT         reduce using rule 19 (expr -> expr EQUAL expr .)
    SMALL           reduce using rule 19 (expr -> expr EQUAL expr .)
    BIG             reduce using rule 19 (expr -> expr EQUAL expr .)
    EQUAL_EQUAL     reduce using rule 19 (expr -> expr EQUAL expr .)
    EXCL_EQUAL      reduce using rule 19 (expr -> expr EQUAL expr .)
    SMALL_EQUAL     reduce using rule 19 (expr -> expr EQUAL expr .)
    BIG_EQUAL       reduce using rule 19 (expr -> expr EQUAL expr .)
    PIPE_PIPE       reduce using rule 19 (expr -> expr EQUAL expr .)
    AMP_AMP         reduce using rule 19 (expr -> expr EQUAL expr .)
    RPARANT         reduce using rule 19 (expr -> expr EQUAL expr .)
    COMMA           reduce using rule 19 (expr -> expr EQUAL expr .)
    RBRACKET        reduce using rule 19 (expr -> expr EQUAL expr .)
    COLON           reduce using rule 19 (expr -> expr EQUAL expr .)
    LBRACKET        shift and go to state 39
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45

  ! LBRACKET        [ reduce using rule 19 (expr -> expr EQUAL expr .) ]
  ! PLUS            [ reduce using rule 19 (expr -> expr EQUAL expr .) ]
  ! MINUS           [ reduce using rule 19 (expr -> expr EQUAL expr .) ]
  ! MULTIPLY        [ reduce using rule 19 (expr -> expr EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 19 (expr -> expr EQUAL expr .) ]
  ! QUEST_MARK      [ shift and go to state 40 ]
  ! EQUAL           [ shift and go to state 41 ]
  ! PERCENT         [ shift and go to state 46 ]
  ! SMALL           [ shift and go to state 47 ]
  ! BIG             [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! EXCL_EQUAL      [ shift and go to state 50 ]
  ! SMALL_EQUAL     [ shift and go to state 51 ]
  ! BIG_EQUAL       [ shift and go to state 52 ]
  ! PIPE_PIPE       [ shift and go to state 53 ]
  ! AMP_AMP         [ shift and go to state 54 ]


state 71

    (20) expr -> expr PLUS expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 20 (expr -> expr PLUS expr .)
    QUEST_MARK      reduce using rule 20 (expr -> expr PLUS expr .)
    EQUAL           reduce using rule 20 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 20 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 20 (expr -> expr PLUS expr .)
    PERCENT         reduce using rule 20 (expr -> expr PLUS expr .)
    SMALL           reduce using rule 20 (expr -> expr PLUS expr .)
    BIG             reduce using rule 20 (expr -> expr PLUS expr .)
    EQUAL_EQUAL     reduce using rule 20 (expr -> expr PLUS expr .)
    EXCL_EQUAL      reduce using rule 20 (expr -> expr PLUS expr .)
    SMALL_EQUAL     reduce using rule 20 (expr -> expr PLUS expr .)
    BIG_EQUAL       reduce using rule 20 (expr -> expr PLUS expr .)
    PIPE_PIPE       reduce using rule 20 (expr -> expr PLUS expr .)
    AMP_AMP         reduce using rule 20 (expr -> expr PLUS expr .)
    RPARANT         reduce using rule 20 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 20 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 20 (expr -> expr PLUS expr .)
    COLON           reduce using rule 20 (expr -> expr PLUS expr .)
    LBRACKET        shift and go to state 39
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45

  ! LBRACKET        [ reduce using rule 20 (expr -> expr PLUS expr .) ]
  ! MULTIPLY        [ reduce using rule 20 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 20 (expr -> expr PLUS expr .) ]
  ! QUEST_MARK      [ shift and go to state 40 ]
  ! EQUAL           [ shift and go to state 41 ]
  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! PERCENT         [ shift and go to state 46 ]
  ! SMALL           [ shift and go to state 47 ]
  ! BIG             [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! EXCL_EQUAL      [ shift and go to state 50 ]
  ! SMALL_EQUAL     [ shift and go to state 51 ]
  ! BIG_EQUAL       [ shift and go to state 52 ]
  ! PIPE_PIPE       [ shift and go to state 53 ]
  ! AMP_AMP         [ shift and go to state 54 ]


state 72

    (21) expr -> expr MINUS expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 21 (expr -> expr MINUS expr .)
    QUEST_MARK      reduce using rule 21 (expr -> expr MINUS expr .)
    EQUAL           reduce using rule 21 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 21 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 21 (expr -> expr MINUS expr .)
    PERCENT         reduce using rule 21 (expr -> expr MINUS expr .)
    SMALL           reduce using rule 21 (expr -> expr MINUS expr .)
    BIG             reduce using rule 21 (expr -> expr MINUS expr .)
    EQUAL_EQUAL     reduce using rule 21 (expr -> expr MINUS expr .)
    EXCL_EQUAL      reduce using rule 21 (expr -> expr MINUS expr .)
    SMALL_EQUAL     reduce using rule 21 (expr -> expr MINUS expr .)
    BIG_EQUAL       reduce using rule 21 (expr -> expr MINUS expr .)
    PIPE_PIPE       reduce using rule 21 (expr -> expr MINUS expr .)
    AMP_AMP         reduce using rule 21 (expr -> expr MINUS expr .)
    RPARANT         reduce using rule 21 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 21 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 21 (expr -> expr MINUS expr .)
    COLON           reduce using rule 21 (expr -> expr MINUS expr .)
    LBRACKET        shift and go to state 39
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45

  ! LBRACKET        [ reduce using rule 21 (expr -> expr MINUS expr .) ]
  ! MULTIPLY        [ reduce using rule 21 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 21 (expr -> expr MINUS expr .) ]
  ! QUEST_MARK      [ shift and go to state 40 ]
  ! EQUAL           [ shift and go to state 41 ]
  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! PERCENT         [ shift and go to state 46 ]
  ! SMALL           [ shift and go to state 47 ]
  ! BIG             [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! EXCL_EQUAL      [ shift and go to state 50 ]
  ! SMALL_EQUAL     [ shift and go to state 51 ]
  ! BIG_EQUAL       [ shift and go to state 52 ]
  ! PIPE_PIPE       [ shift and go to state 53 ]
  ! AMP_AMP         [ shift and go to state 54 ]


state 73

    (22) expr -> expr MULTIPLY expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 22 (expr -> expr MULTIPLY expr .)
    QUEST_MARK      reduce using rule 22 (expr -> expr MULTIPLY expr .)
    EQUAL           reduce using rule 22 (expr -> expr MULTIPLY expr .)
    PLUS            reduce using rule 22 (expr -> expr MULTIPLY expr .)
    MINUS           reduce using rule 22 (expr -> expr MULTIPLY expr .)
    MULTIPLY        reduce using rule 22 (expr -> expr MULTIPLY expr .)
    DIVIDE          reduce using rule 22 (expr -> expr MULTIPLY expr .)
    PERCENT         reduce using rule 22 (expr -> expr MULTIPLY expr .)
    SMALL           reduce using rule 22 (expr -> expr MULTIPLY expr .)
    BIG             reduce using rule 22 (expr -> expr MULTIPLY expr .)
    EQUAL_EQUAL     reduce using rule 22 (expr -> expr MULTIPLY expr .)
    EXCL_EQUAL      reduce using rule 22 (expr -> expr MULTIPLY expr .)
    SMALL_EQUAL     reduce using rule 22 (expr -> expr MULTIPLY expr .)
    BIG_EQUAL       reduce using rule 22 (expr -> expr MULTIPLY expr .)
    PIPE_PIPE       reduce using rule 22 (expr -> expr MULTIPLY expr .)
    AMP_AMP         reduce using rule 22 (expr -> expr MULTIPLY expr .)
    RPARANT         reduce using rule 22 (expr -> expr MULTIPLY expr .)
    COMMA           reduce using rule 22 (expr -> expr MULTIPLY expr .)
    RBRACKET        reduce using rule 22 (expr -> expr MULTIPLY expr .)
    COLON           reduce using rule 22 (expr -> expr MULTIPLY expr .)
    LBRACKET        shift and go to state 39

  ! LBRACKET        [ reduce using rule 22 (expr -> expr MULTIPLY expr .) ]
  ! QUEST_MARK      [ shift and go to state 40 ]
  ! EQUAL           [ shift and go to state 41 ]
  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MULTIPLY        [ shift and go to state 44 ]
  ! DIVIDE          [ shift and go to state 45 ]
  ! PERCENT         [ shift and go to state 46 ]
  ! SMALL           [ shift and go to state 47 ]
  ! BIG             [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! EXCL_EQUAL      [ shift and go to state 50 ]
  ! SMALL_EQUAL     [ shift and go to state 51 ]
  ! BIG_EQUAL       [ shift and go to state 52 ]
  ! PIPE_PIPE       [ shift and go to state 53 ]
  ! AMP_AMP         [ shift and go to state 54 ]


state 74

    (23) expr -> expr DIVIDE expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 23 (expr -> expr DIVIDE expr .)
    QUEST_MARK      reduce using rule 23 (expr -> expr DIVIDE expr .)
    EQUAL           reduce using rule 23 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 23 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 23 (expr -> expr DIVIDE expr .)
    MULTIPLY        reduce using rule 23 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 23 (expr -> expr DIVIDE expr .)
    PERCENT         reduce using rule 23 (expr -> expr DIVIDE expr .)
    SMALL           reduce using rule 23 (expr -> expr DIVIDE expr .)
    BIG             reduce using rule 23 (expr -> expr DIVIDE expr .)
    EQUAL_EQUAL     reduce using rule 23 (expr -> expr DIVIDE expr .)
    EXCL_EQUAL      reduce using rule 23 (expr -> expr DIVIDE expr .)
    SMALL_EQUAL     reduce using rule 23 (expr -> expr DIVIDE expr .)
    BIG_EQUAL       reduce using rule 23 (expr -> expr DIVIDE expr .)
    PIPE_PIPE       reduce using rule 23 (expr -> expr DIVIDE expr .)
    AMP_AMP         reduce using rule 23 (expr -> expr DIVIDE expr .)
    RPARANT         reduce using rule 23 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 23 (expr -> expr DIVIDE expr .)
    RBRACKET        reduce using rule 23 (expr -> expr DIVIDE expr .)
    COLON           reduce using rule 23 (expr -> expr DIVIDE expr .)
    LBRACKET        shift and go to state 39

  ! LBRACKET        [ reduce using rule 23 (expr -> expr DIVIDE expr .) ]
  ! QUEST_MARK      [ shift and go to state 40 ]
  ! EQUAL           [ shift and go to state 41 ]
  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! MULTIPLY        [ shift and go to state 44 ]
  ! DIVIDE          [ shift and go to state 45 ]
  ! PERCENT         [ shift and go to state 46 ]
  ! SMALL           [ shift and go to state 47 ]
  ! BIG             [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! EXCL_EQUAL      [ shift and go to state 50 ]
  ! SMALL_EQUAL     [ shift and go to state 51 ]
  ! BIG_EQUAL       [ shift and go to state 52 ]
  ! PIPE_PIPE       [ shift and go to state 53 ]
  ! AMP_AMP         [ shift and go to state 54 ]


state 75

    (24) expr -> expr PERCENT expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for QUEST_MARK resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for SMALL resolved as shift
  ! shift/reduce conflict for BIG resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for EXCL_EQUAL resolved as shift
  ! shift/reduce conflict for SMALL_EQUAL resolved as shift
  ! shift/reduce conflict for BIG_EQUAL resolved as shift
  ! shift/reduce conflict for PIPE_PIPE resolved as shift
  ! shift/reduce conflict for AMP_AMP resolved as shift
    SEMICOLON       reduce using rule 24 (expr -> expr PERCENT expr .)
    RPARANT         reduce using rule 24 (expr -> expr PERCENT expr .)
    COMMA           reduce using rule 24 (expr -> expr PERCENT expr .)
    RBRACKET        reduce using rule 24 (expr -> expr PERCENT expr .)
    COLON           reduce using rule 24 (expr -> expr PERCENT expr .)
    LBRACKET        shift and go to state 39
    QUEST_MARK      shift and go to state 40
    EQUAL           shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45
    PERCENT         shift and go to state 46
    SMALL           shift and go to state 47
    BIG             shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    EXCL_EQUAL      shift and go to state 50
    SMALL_EQUAL     shift and go to state 51
    BIG_EQUAL       shift and go to state 52
    PIPE_PIPE       shift and go to state 53
    AMP_AMP         shift and go to state 54

  ! LBRACKET        [ reduce using rule 24 (expr -> expr PERCENT expr .) ]
  ! QUEST_MARK      [ reduce using rule 24 (expr -> expr PERCENT expr .) ]
  ! EQUAL           [ reduce using rule 24 (expr -> expr PERCENT expr .) ]
  ! PLUS            [ reduce using rule 24 (expr -> expr PERCENT expr .) ]
  ! MINUS           [ reduce using rule 24 (expr -> expr PERCENT expr .) ]
  ! MULTIPLY        [ reduce using rule 24 (expr -> expr PERCENT expr .) ]
  ! DIVIDE          [ reduce using rule 24 (expr -> expr PERCENT expr .) ]
  ! PERCENT         [ reduce using rule 24 (expr -> expr PERCENT expr .) ]
  ! SMALL           [ reduce using rule 24 (expr -> expr PERCENT expr .) ]
  ! BIG             [ reduce using rule 24 (expr -> expr PERCENT expr .) ]
  ! EQUAL_EQUAL     [ reduce using rule 24 (expr -> expr PERCENT expr .) ]
  ! EXCL_EQUAL      [ reduce using rule 24 (expr -> expr PERCENT expr .) ]
  ! SMALL_EQUAL     [ reduce using rule 24 (expr -> expr PERCENT expr .) ]
  ! BIG_EQUAL       [ reduce using rule 24 (expr -> expr PERCENT expr .) ]
  ! PIPE_PIPE       [ reduce using rule 24 (expr -> expr PERCENT expr .) ]
  ! AMP_AMP         [ reduce using rule 24 (expr -> expr PERCENT expr .) ]


state 76

    (25) expr -> expr SMALL expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 25 (expr -> expr SMALL expr .)
    PERCENT         reduce using rule 25 (expr -> expr SMALL expr .)
    SMALL           reduce using rule 25 (expr -> expr SMALL expr .)
    BIG             reduce using rule 25 (expr -> expr SMALL expr .)
    EQUAL_EQUAL     reduce using rule 25 (expr -> expr SMALL expr .)
    EXCL_EQUAL      reduce using rule 25 (expr -> expr SMALL expr .)
    SMALL_EQUAL     reduce using rule 25 (expr -> expr SMALL expr .)
    BIG_EQUAL       reduce using rule 25 (expr -> expr SMALL expr .)
    PIPE_PIPE       reduce using rule 25 (expr -> expr SMALL expr .)
    AMP_AMP         reduce using rule 25 (expr -> expr SMALL expr .)
    RPARANT         reduce using rule 25 (expr -> expr SMALL expr .)
    COMMA           reduce using rule 25 (expr -> expr SMALL expr .)
    RBRACKET        reduce using rule 25 (expr -> expr SMALL expr .)
    COLON           reduce using rule 25 (expr -> expr SMALL expr .)
    LBRACKET        shift and go to state 39
    QUEST_MARK      shift and go to state 40
    EQUAL           shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45

  ! LBRACKET        [ reduce using rule 25 (expr -> expr SMALL expr .) ]
  ! QUEST_MARK      [ reduce using rule 25 (expr -> expr SMALL expr .) ]
  ! EQUAL           [ reduce using rule 25 (expr -> expr SMALL expr .) ]
  ! PLUS            [ reduce using rule 25 (expr -> expr SMALL expr .) ]
  ! MINUS           [ reduce using rule 25 (expr -> expr SMALL expr .) ]
  ! MULTIPLY        [ reduce using rule 25 (expr -> expr SMALL expr .) ]
  ! DIVIDE          [ reduce using rule 25 (expr -> expr SMALL expr .) ]
  ! PERCENT         [ shift and go to state 46 ]
  ! SMALL           [ shift and go to state 47 ]
  ! BIG             [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! EXCL_EQUAL      [ shift and go to state 50 ]
  ! SMALL_EQUAL     [ shift and go to state 51 ]
  ! BIG_EQUAL       [ shift and go to state 52 ]
  ! PIPE_PIPE       [ shift and go to state 53 ]
  ! AMP_AMP         [ shift and go to state 54 ]


state 77

    (26) expr -> expr BIG expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 26 (expr -> expr BIG expr .)
    PERCENT         reduce using rule 26 (expr -> expr BIG expr .)
    SMALL           reduce using rule 26 (expr -> expr BIG expr .)
    BIG             reduce using rule 26 (expr -> expr BIG expr .)
    EQUAL_EQUAL     reduce using rule 26 (expr -> expr BIG expr .)
    EXCL_EQUAL      reduce using rule 26 (expr -> expr BIG expr .)
    SMALL_EQUAL     reduce using rule 26 (expr -> expr BIG expr .)
    BIG_EQUAL       reduce using rule 26 (expr -> expr BIG expr .)
    PIPE_PIPE       reduce using rule 26 (expr -> expr BIG expr .)
    AMP_AMP         reduce using rule 26 (expr -> expr BIG expr .)
    RPARANT         reduce using rule 26 (expr -> expr BIG expr .)
    COMMA           reduce using rule 26 (expr -> expr BIG expr .)
    RBRACKET        reduce using rule 26 (expr -> expr BIG expr .)
    COLON           reduce using rule 26 (expr -> expr BIG expr .)
    LBRACKET        shift and go to state 39
    QUEST_MARK      shift and go to state 40
    EQUAL           shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45

  ! LBRACKET        [ reduce using rule 26 (expr -> expr BIG expr .) ]
  ! QUEST_MARK      [ reduce using rule 26 (expr -> expr BIG expr .) ]
  ! EQUAL           [ reduce using rule 26 (expr -> expr BIG expr .) ]
  ! PLUS            [ reduce using rule 26 (expr -> expr BIG expr .) ]
  ! MINUS           [ reduce using rule 26 (expr -> expr BIG expr .) ]
  ! MULTIPLY        [ reduce using rule 26 (expr -> expr BIG expr .) ]
  ! DIVIDE          [ reduce using rule 26 (expr -> expr BIG expr .) ]
  ! PERCENT         [ shift and go to state 46 ]
  ! SMALL           [ shift and go to state 47 ]
  ! BIG             [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! EXCL_EQUAL      [ shift and go to state 50 ]
  ! SMALL_EQUAL     [ shift and go to state 51 ]
  ! BIG_EQUAL       [ shift and go to state 52 ]
  ! PIPE_PIPE       [ shift and go to state 53 ]
  ! AMP_AMP         [ shift and go to state 54 ]


state 78

    (27) expr -> expr EQUAL_EQUAL expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .)
    PERCENT         reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .)
    SMALL           reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .)
    BIG             reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .)
    EQUAL_EQUAL     reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .)
    EXCL_EQUAL      reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .)
    SMALL_EQUAL     reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .)
    BIG_EQUAL       reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .)
    PIPE_PIPE       reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .)
    AMP_AMP         reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .)
    RPARANT         reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .)
    COMMA           reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .)
    RBRACKET        reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .)
    COLON           reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .)
    LBRACKET        shift and go to state 39
    QUEST_MARK      shift and go to state 40
    EQUAL           shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45

  ! LBRACKET        [ reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .) ]
  ! QUEST_MARK      [ reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .) ]
  ! EQUAL           [ reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .) ]
  ! MULTIPLY        [ reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .) ]
  ! PERCENT         [ shift and go to state 46 ]
  ! SMALL           [ shift and go to state 47 ]
  ! BIG             [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! EXCL_EQUAL      [ shift and go to state 50 ]
  ! SMALL_EQUAL     [ shift and go to state 51 ]
  ! BIG_EQUAL       [ shift and go to state 52 ]
  ! PIPE_PIPE       [ shift and go to state 53 ]
  ! AMP_AMP         [ shift and go to state 54 ]


state 79

    (28) expr -> expr EXCL_EQUAL expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 28 (expr -> expr EXCL_EQUAL expr .)
    PERCENT         reduce using rule 28 (expr -> expr EXCL_EQUAL expr .)
    SMALL           reduce using rule 28 (expr -> expr EXCL_EQUAL expr .)
    BIG             reduce using rule 28 (expr -> expr EXCL_EQUAL expr .)
    EQUAL_EQUAL     reduce using rule 28 (expr -> expr EXCL_EQUAL expr .)
    EXCL_EQUAL      reduce using rule 28 (expr -> expr EXCL_EQUAL expr .)
    SMALL_EQUAL     reduce using rule 28 (expr -> expr EXCL_EQUAL expr .)
    BIG_EQUAL       reduce using rule 28 (expr -> expr EXCL_EQUAL expr .)
    PIPE_PIPE       reduce using rule 28 (expr -> expr EXCL_EQUAL expr .)
    AMP_AMP         reduce using rule 28 (expr -> expr EXCL_EQUAL expr .)
    RPARANT         reduce using rule 28 (expr -> expr EXCL_EQUAL expr .)
    COMMA           reduce using rule 28 (expr -> expr EXCL_EQUAL expr .)
    RBRACKET        reduce using rule 28 (expr -> expr EXCL_EQUAL expr .)
    COLON           reduce using rule 28 (expr -> expr EXCL_EQUAL expr .)
    LBRACKET        shift and go to state 39
    QUEST_MARK      shift and go to state 40
    EQUAL           shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45

  ! LBRACKET        [ reduce using rule 28 (expr -> expr EXCL_EQUAL expr .) ]
  ! QUEST_MARK      [ reduce using rule 28 (expr -> expr EXCL_EQUAL expr .) ]
  ! EQUAL           [ reduce using rule 28 (expr -> expr EXCL_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 28 (expr -> expr EXCL_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 28 (expr -> expr EXCL_EQUAL expr .) ]
  ! MULTIPLY        [ reduce using rule 28 (expr -> expr EXCL_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 28 (expr -> expr EXCL_EQUAL expr .) ]
  ! PERCENT         [ shift and go to state 46 ]
  ! SMALL           [ shift and go to state 47 ]
  ! BIG             [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! EXCL_EQUAL      [ shift and go to state 50 ]
  ! SMALL_EQUAL     [ shift and go to state 51 ]
  ! BIG_EQUAL       [ shift and go to state 52 ]
  ! PIPE_PIPE       [ shift and go to state 53 ]
  ! AMP_AMP         [ shift and go to state 54 ]


state 80

    (29) expr -> expr SMALL_EQUAL expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 29 (expr -> expr SMALL_EQUAL expr .)
    PERCENT         reduce using rule 29 (expr -> expr SMALL_EQUAL expr .)
    SMALL           reduce using rule 29 (expr -> expr SMALL_EQUAL expr .)
    BIG             reduce using rule 29 (expr -> expr SMALL_EQUAL expr .)
    EQUAL_EQUAL     reduce using rule 29 (expr -> expr SMALL_EQUAL expr .)
    EXCL_EQUAL      reduce using rule 29 (expr -> expr SMALL_EQUAL expr .)
    SMALL_EQUAL     reduce using rule 29 (expr -> expr SMALL_EQUAL expr .)
    BIG_EQUAL       reduce using rule 29 (expr -> expr SMALL_EQUAL expr .)
    PIPE_PIPE       reduce using rule 29 (expr -> expr SMALL_EQUAL expr .)
    AMP_AMP         reduce using rule 29 (expr -> expr SMALL_EQUAL expr .)
    RPARANT         reduce using rule 29 (expr -> expr SMALL_EQUAL expr .)
    COMMA           reduce using rule 29 (expr -> expr SMALL_EQUAL expr .)
    RBRACKET        reduce using rule 29 (expr -> expr SMALL_EQUAL expr .)
    COLON           reduce using rule 29 (expr -> expr SMALL_EQUAL expr .)
    LBRACKET        shift and go to state 39
    QUEST_MARK      shift and go to state 40
    EQUAL           shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45

  ! LBRACKET        [ reduce using rule 29 (expr -> expr SMALL_EQUAL expr .) ]
  ! QUEST_MARK      [ reduce using rule 29 (expr -> expr SMALL_EQUAL expr .) ]
  ! EQUAL           [ reduce using rule 29 (expr -> expr SMALL_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 29 (expr -> expr SMALL_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 29 (expr -> expr SMALL_EQUAL expr .) ]
  ! MULTIPLY        [ reduce using rule 29 (expr -> expr SMALL_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 29 (expr -> expr SMALL_EQUAL expr .) ]
  ! PERCENT         [ shift and go to state 46 ]
  ! SMALL           [ shift and go to state 47 ]
  ! BIG             [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! EXCL_EQUAL      [ shift and go to state 50 ]
  ! SMALL_EQUAL     [ shift and go to state 51 ]
  ! BIG_EQUAL       [ shift and go to state 52 ]
  ! PIPE_PIPE       [ shift and go to state 53 ]
  ! AMP_AMP         [ shift and go to state 54 ]


state 81

    (30) expr -> expr BIG_EQUAL expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 30 (expr -> expr BIG_EQUAL expr .)
    PERCENT         reduce using rule 30 (expr -> expr BIG_EQUAL expr .)
    SMALL           reduce using rule 30 (expr -> expr BIG_EQUAL expr .)
    BIG             reduce using rule 30 (expr -> expr BIG_EQUAL expr .)
    EQUAL_EQUAL     reduce using rule 30 (expr -> expr BIG_EQUAL expr .)
    EXCL_EQUAL      reduce using rule 30 (expr -> expr BIG_EQUAL expr .)
    SMALL_EQUAL     reduce using rule 30 (expr -> expr BIG_EQUAL expr .)
    BIG_EQUAL       reduce using rule 30 (expr -> expr BIG_EQUAL expr .)
    PIPE_PIPE       reduce using rule 30 (expr -> expr BIG_EQUAL expr .)
    AMP_AMP         reduce using rule 30 (expr -> expr BIG_EQUAL expr .)
    RPARANT         reduce using rule 30 (expr -> expr BIG_EQUAL expr .)
    COMMA           reduce using rule 30 (expr -> expr BIG_EQUAL expr .)
    RBRACKET        reduce using rule 30 (expr -> expr BIG_EQUAL expr .)
    COLON           reduce using rule 30 (expr -> expr BIG_EQUAL expr .)
    LBRACKET        shift and go to state 39
    QUEST_MARK      shift and go to state 40
    EQUAL           shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45

  ! LBRACKET        [ reduce using rule 30 (expr -> expr BIG_EQUAL expr .) ]
  ! QUEST_MARK      [ reduce using rule 30 (expr -> expr BIG_EQUAL expr .) ]
  ! EQUAL           [ reduce using rule 30 (expr -> expr BIG_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 30 (expr -> expr BIG_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 30 (expr -> expr BIG_EQUAL expr .) ]
  ! MULTIPLY        [ reduce using rule 30 (expr -> expr BIG_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 30 (expr -> expr BIG_EQUAL expr .) ]
  ! PERCENT         [ shift and go to state 46 ]
  ! SMALL           [ shift and go to state 47 ]
  ! BIG             [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! EXCL_EQUAL      [ shift and go to state 50 ]
  ! SMALL_EQUAL     [ shift and go to state 51 ]
  ! BIG_EQUAL       [ shift and go to state 52 ]
  ! PIPE_PIPE       [ shift and go to state 53 ]
  ! AMP_AMP         [ shift and go to state 54 ]


state 82

    (31) expr -> expr PIPE_PIPE expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 31 (expr -> expr PIPE_PIPE expr .)
    PERCENT         reduce using rule 31 (expr -> expr PIPE_PIPE expr .)
    SMALL           reduce using rule 31 (expr -> expr PIPE_PIPE expr .)
    BIG             reduce using rule 31 (expr -> expr PIPE_PIPE expr .)
    EQUAL_EQUAL     reduce using rule 31 (expr -> expr PIPE_PIPE expr .)
    EXCL_EQUAL      reduce using rule 31 (expr -> expr PIPE_PIPE expr .)
    SMALL_EQUAL     reduce using rule 31 (expr -> expr PIPE_PIPE expr .)
    BIG_EQUAL       reduce using rule 31 (expr -> expr PIPE_PIPE expr .)
    PIPE_PIPE       reduce using rule 31 (expr -> expr PIPE_PIPE expr .)
    AMP_AMP         reduce using rule 31 (expr -> expr PIPE_PIPE expr .)
    RPARANT         reduce using rule 31 (expr -> expr PIPE_PIPE expr .)
    COMMA           reduce using rule 31 (expr -> expr PIPE_PIPE expr .)
    RBRACKET        reduce using rule 31 (expr -> expr PIPE_PIPE expr .)
    COLON           reduce using rule 31 (expr -> expr PIPE_PIPE expr .)
    LBRACKET        shift and go to state 39
    QUEST_MARK      shift and go to state 40
    EQUAL           shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45

  ! LBRACKET        [ reduce using rule 31 (expr -> expr PIPE_PIPE expr .) ]
  ! QUEST_MARK      [ reduce using rule 31 (expr -> expr PIPE_PIPE expr .) ]
  ! EQUAL           [ reduce using rule 31 (expr -> expr PIPE_PIPE expr .) ]
  ! PLUS            [ reduce using rule 31 (expr -> expr PIPE_PIPE expr .) ]
  ! MINUS           [ reduce using rule 31 (expr -> expr PIPE_PIPE expr .) ]
  ! MULTIPLY        [ reduce using rule 31 (expr -> expr PIPE_PIPE expr .) ]
  ! DIVIDE          [ reduce using rule 31 (expr -> expr PIPE_PIPE expr .) ]
  ! PERCENT         [ shift and go to state 46 ]
  ! SMALL           [ shift and go to state 47 ]
  ! BIG             [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! EXCL_EQUAL      [ shift and go to state 50 ]
  ! SMALL_EQUAL     [ shift and go to state 51 ]
  ! BIG_EQUAL       [ shift and go to state 52 ]
  ! PIPE_PIPE       [ shift and go to state 53 ]
  ! AMP_AMP         [ shift and go to state 54 ]


state 83

    (32) expr -> expr AMP_AMP expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 32 (expr -> expr AMP_AMP expr .)
    PERCENT         reduce using rule 32 (expr -> expr AMP_AMP expr .)
    SMALL           reduce using rule 32 (expr -> expr AMP_AMP expr .)
    BIG             reduce using rule 32 (expr -> expr AMP_AMP expr .)
    EQUAL_EQUAL     reduce using rule 32 (expr -> expr AMP_AMP expr .)
    EXCL_EQUAL      reduce using rule 32 (expr -> expr AMP_AMP expr .)
    SMALL_EQUAL     reduce using rule 32 (expr -> expr AMP_AMP expr .)
    BIG_EQUAL       reduce using rule 32 (expr -> expr AMP_AMP expr .)
    PIPE_PIPE       reduce using rule 32 (expr -> expr AMP_AMP expr .)
    AMP_AMP         reduce using rule 32 (expr -> expr AMP_AMP expr .)
    RPARANT         reduce using rule 32 (expr -> expr AMP_AMP expr .)
    COMMA           reduce using rule 32 (expr -> expr AMP_AMP expr .)
    RBRACKET        reduce using rule 32 (expr -> expr AMP_AMP expr .)
    COLON           reduce using rule 32 (expr -> expr AMP_AMP expr .)
    LBRACKET        shift and go to state 39
    QUEST_MARK      shift and go to state 40
    EQUAL           shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45

  ! LBRACKET        [ reduce using rule 32 (expr -> expr AMP_AMP expr .) ]
  ! QUEST_MARK      [ reduce using rule 32 (expr -> expr AMP_AMP expr .) ]
  ! EQUAL           [ reduce using rule 32 (expr -> expr AMP_AMP expr .) ]
  ! PLUS            [ reduce using rule 32 (expr -> expr AMP_AMP expr .) ]
  ! MINUS           [ reduce using rule 32 (expr -> expr AMP_AMP expr .) ]
  ! MULTIPLY        [ reduce using rule 32 (expr -> expr AMP_AMP expr .) ]
  ! DIVIDE          [ reduce using rule 32 (expr -> expr AMP_AMP expr .) ]
  ! PERCENT         [ shift and go to state 46 ]
  ! SMALL           [ shift and go to state 47 ]
  ! BIG             [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! EXCL_EQUAL      [ shift and go to state 50 ]
  ! SMALL_EQUAL     [ shift and go to state 51 ]
  ! BIG_EQUAL       [ shift and go to state 52 ]
  ! PIPE_PIPE       [ shift and go to state 53 ]
  ! AMP_AMP         [ shift and go to state 54 ]


state 84

    (9) stmt -> IF LPARANT expr . RPARANT stmt
    (10) stmt -> IF LPARANT expr . RPARANT stmt ELSE stmt
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    RPARANT         shift and go to state 93
    LBRACKET        shift and go to state 39
    QUEST_MARK      shift and go to state 40
    EQUAL           shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45
    PERCENT         shift and go to state 46
    SMALL           shift and go to state 47
    BIG             shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    EXCL_EQUAL      shift and go to state 50
    SMALL_EQUAL     shift and go to state 51
    BIG_EQUAL       shift and go to state 52
    PIPE_PIPE       shift and go to state 53
    AMP_AMP         shift and go to state 54


state 85

    (11) stmt -> WHILE LPARANT expr . RPARANT DO stmt
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    RPARANT         shift and go to state 94
    LBRACKET        shift and go to state 39
    QUEST_MARK      shift and go to state 40
    EQUAL           shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45
    PERCENT         shift and go to state 46
    SMALL           shift and go to state 47
    BIG             shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    EXCL_EQUAL      shift and go to state 50
    SMALL_EQUAL     shift and go to state 51
    BIG_EQUAL       shift and go to state 52
    PIPE_PIPE       shift and go to state 53
    AMP_AMP         shift and go to state 54


state 86

    (12) stmt -> FOREACH LPARANT ID . OF expr RPARANT stmt

    OF              shift and go to state 95


state 87

    (13) stmt -> RETURN expr SEMICOLON .

    IF              reduce using rule 13 (stmt -> RETURN expr SEMICOLON .)
    WHILE           reduce using rule 13 (stmt -> RETURN expr SEMICOLON .)
    FOREACH         reduce using rule 13 (stmt -> RETURN expr SEMICOLON .)
    RETURN          reduce using rule 13 (stmt -> RETURN expr SEMICOLON .)
    ID              reduce using rule 13 (stmt -> RETURN expr SEMICOLON .)
    EXCL_MARK       reduce using rule 13 (stmt -> RETURN expr SEMICOLON .)
    MINUS           reduce using rule 13 (stmt -> RETURN expr SEMICOLON .)
    PLUS            reduce using rule 13 (stmt -> RETURN expr SEMICOLON .)
    LPARANT         reduce using rule 13 (stmt -> RETURN expr SEMICOLON .)
    NUMBER          reduce using rule 13 (stmt -> RETURN expr SEMICOLON .)
    VAL             reduce using rule 13 (stmt -> RETURN expr SEMICOLON .)
    END             reduce using rule 13 (stmt -> RETURN expr SEMICOLON .)
    ELSE            reduce using rule 13 (stmt -> RETURN expr SEMICOLON .)


state 88

    (15) defvar -> VAL type ID .

    SEMICOLON       reduce using rule 15 (defvar -> VAL type ID .)


state 89

    (16) expr -> ID LPARANT clist RPARANT .

    SEMICOLON       reduce using rule 16 (expr -> ID LPARANT clist RPARANT .)
    LBRACKET        reduce using rule 16 (expr -> ID LPARANT clist RPARANT .)
    QUEST_MARK      reduce using rule 16 (expr -> ID LPARANT clist RPARANT .)
    EQUAL           reduce using rule 16 (expr -> ID LPARANT clist RPARANT .)
    PLUS            reduce using rule 16 (expr -> ID LPARANT clist RPARANT .)
    MINUS           reduce using rule 16 (expr -> ID LPARANT clist RPARANT .)
    MULTIPLY        reduce using rule 16 (expr -> ID LPARANT clist RPARANT .)
    DIVIDE          reduce using rule 16 (expr -> ID LPARANT clist RPARANT .)
    PERCENT         reduce using rule 16 (expr -> ID LPARANT clist RPARANT .)
    SMALL           reduce using rule 16 (expr -> ID LPARANT clist RPARANT .)
    BIG             reduce using rule 16 (expr -> ID LPARANT clist RPARANT .)
    EQUAL_EQUAL     reduce using rule 16 (expr -> ID LPARANT clist RPARANT .)
    EXCL_EQUAL      reduce using rule 16 (expr -> ID LPARANT clist RPARANT .)
    SMALL_EQUAL     reduce using rule 16 (expr -> ID LPARANT clist RPARANT .)
    BIG_EQUAL       reduce using rule 16 (expr -> ID LPARANT clist RPARANT .)
    PIPE_PIPE       reduce using rule 16 (expr -> ID LPARANT clist RPARANT .)
    AMP_AMP         reduce using rule 16 (expr -> ID LPARANT clist RPARANT .)
    RPARANT         reduce using rule 16 (expr -> ID LPARANT clist RPARANT .)
    COMMA           reduce using rule 16 (expr -> ID LPARANT clist RPARANT .)
    RBRACKET        reduce using rule 16 (expr -> ID LPARANT clist RPARANT .)
    COLON           reduce using rule 16 (expr -> ID LPARANT clist RPARANT .)


state 90

    (44) clist -> expr COMMA . clist
    (42) clist -> .
    (43) clist -> . expr
    (44) clist -> . expr COMMA clist
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER

    RPARANT         reduce using rule 42 (clist -> .)
    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32

    expr                           shift and go to state 65
    clist                          shift and go to state 96

state 91

    (17) expr -> expr LBRACKET expr RBRACKET .

    SEMICOLON       reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    LBRACKET        reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    QUEST_MARK      reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    EQUAL           reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    MULTIPLY        reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    PERCENT         reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    SMALL           reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    BIG             reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    EQUAL_EQUAL     reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    EXCL_EQUAL      reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    SMALL_EQUAL     reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    BIG_EQUAL       reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    PIPE_PIPE       reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    AMP_AMP         reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    RPARANT         reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    COLON           reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)


state 92

    (18) expr -> expr QUEST_MARK expr COLON . expr
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32

    expr                           shift and go to state 97

state 93

    (9) stmt -> IF LPARANT expr RPARANT . stmt
    (10) stmt -> IF LPARANT expr RPARANT . stmt ELSE stmt
    (7) stmt -> . expr SEMICOLON
    (8) stmt -> . defvar SEMICOLON
    (9) stmt -> . IF LPARANT expr RPARANT stmt
    (10) stmt -> . IF LPARANT expr RPARANT stmt ELSE stmt
    (11) stmt -> . WHILE LPARANT expr RPARANT DO stmt
    (12) stmt -> . FOREACH LPARANT ID OF expr RPARANT stmt
    (13) stmt -> . RETURN expr SEMICOLON
    (14) stmt -> . body END
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER
    (15) defvar -> . VAL type ID
    (5) body -> . stmt
    (6) body -> . stmt body

    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOREACH         shift and go to state 27
    RETURN          shift and go to state 28
    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32
    VAL             shift and go to state 33

    expr                           shift and go to state 23
    stmt                           shift and go to state 98
    defvar                         shift and go to state 24
    body                           shift and go to state 99

state 94

    (11) stmt -> WHILE LPARANT expr RPARANT . DO stmt

    DO              shift and go to state 100


state 95

    (12) stmt -> FOREACH LPARANT ID OF . expr RPARANT stmt
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32

    expr                           shift and go to state 101

state 96

    (44) clist -> expr COMMA clist .

    RPARANT         reduce using rule 44 (clist -> expr COMMA clist .)


state 97

    (18) expr -> expr QUEST_MARK expr COLON expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    QUEST_MARK      reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    EQUAL           reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    PERCENT         reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    SMALL           reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    BIG             reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    EQUAL_EQUAL     reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    EXCL_EQUAL      reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    SMALL_EQUAL     reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    BIG_EQUAL       reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    PIPE_PIPE       reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    AMP_AMP         reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    RPARANT         reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    COMMA           reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    RBRACKET        reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    COLON           reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    LBRACKET        shift and go to state 39
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45

  ! LBRACKET        [ reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .) ]
  ! PLUS            [ reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .) ]
  ! MINUS           [ reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .) ]
  ! MULTIPLY        [ reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .) ]
  ! DIVIDE          [ reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .) ]
  ! QUEST_MARK      [ shift and go to state 40 ]
  ! EQUAL           [ shift and go to state 41 ]
  ! PERCENT         [ shift and go to state 46 ]
  ! SMALL           [ shift and go to state 47 ]
  ! BIG             [ shift and go to state 48 ]
  ! EQUAL_EQUAL     [ shift and go to state 49 ]
  ! EXCL_EQUAL      [ shift and go to state 50 ]
  ! SMALL_EQUAL     [ shift and go to state 51 ]
  ! BIG_EQUAL       [ shift and go to state 52 ]
  ! PIPE_PIPE       [ shift and go to state 53 ]
  ! AMP_AMP         [ shift and go to state 54 ]


state 98

    (9) stmt -> IF LPARANT expr RPARANT stmt .
    (10) stmt -> IF LPARANT expr RPARANT stmt . ELSE stmt
    (5) body -> stmt .
    (6) body -> stmt . body
    (5) body -> . stmt
    (6) body -> . stmt body
    (7) stmt -> . expr SEMICOLON
    (8) stmt -> . defvar SEMICOLON
    (9) stmt -> . IF LPARANT expr RPARANT stmt
    (10) stmt -> . IF LPARANT expr RPARANT stmt ELSE stmt
    (11) stmt -> . WHILE LPARANT expr RPARANT DO stmt
    (12) stmt -> . FOREACH LPARANT ID OF expr RPARANT stmt
    (13) stmt -> . RETURN expr SEMICOLON
    (14) stmt -> . body END
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER
    (15) defvar -> . VAL type ID

  ! reduce/reduce conflict for END resolved using rule 5 (body -> stmt .)
    IF              reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt .)
    WHILE           reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt .)
    FOREACH         reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt .)
    RETURN          reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt .)
    ID              reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt .)
    EXCL_MARK       reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt .)
    MINUS           reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt .)
    PLUS            reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt .)
    LPARANT         reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt .)
    NUMBER          reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt .)
    VAL             reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt .)
    ELSE            reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt .)
    END             reduce using rule 5 (body -> stmt .)

  ! END             [ reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt .) ]
  ! ELSE            [ shift and go to state 102 ]
  ! IF              [ shift and go to state 25 ]
  ! WHILE           [ shift and go to state 26 ]
  ! FOREACH         [ shift and go to state 27 ]
  ! RETURN          [ shift and go to state 28 ]
  ! ID              [ shift and go to state 19 ]
  ! EXCL_MARK       [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 30 ]
  ! PLUS            [ shift and go to state 29 ]
  ! LPARANT         [ shift and go to state 20 ]
  ! NUMBER          [ shift and go to state 32 ]
  ! VAL             [ shift and go to state 33 ]

    expr                           shift and go to state 23
    stmt                           shift and go to state 22
    body                           shift and go to state 37
    defvar                         shift and go to state 24

state 99

    (14) stmt -> body . END

    END             shift and go to state 67


state 100

    (11) stmt -> WHILE LPARANT expr RPARANT DO . stmt
    (7) stmt -> . expr SEMICOLON
    (8) stmt -> . defvar SEMICOLON
    (9) stmt -> . IF LPARANT expr RPARANT stmt
    (10) stmt -> . IF LPARANT expr RPARANT stmt ELSE stmt
    (11) stmt -> . WHILE LPARANT expr RPARANT DO stmt
    (12) stmt -> . FOREACH LPARANT ID OF expr RPARANT stmt
    (13) stmt -> . RETURN expr SEMICOLON
    (14) stmt -> . body END
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER
    (15) defvar -> . VAL type ID
    (5) body -> . stmt
    (6) body -> . stmt body

    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOREACH         shift and go to state 27
    RETURN          shift and go to state 28
    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32
    VAL             shift and go to state 33

    expr                           shift and go to state 23
    stmt                           shift and go to state 103
    defvar                         shift and go to state 24
    body                           shift and go to state 99

state 101

    (12) stmt -> FOREACH LPARANT ID OF expr . RPARANT stmt
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    RPARANT         shift and go to state 104
    LBRACKET        shift and go to state 39
    QUEST_MARK      shift and go to state 40
    EQUAL           shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    MULTIPLY        shift and go to state 44
    DIVIDE          shift and go to state 45
    PERCENT         shift and go to state 46
    SMALL           shift and go to state 47
    BIG             shift and go to state 48
    EQUAL_EQUAL     shift and go to state 49
    EXCL_EQUAL      shift and go to state 50
    SMALL_EQUAL     shift and go to state 51
    BIG_EQUAL       shift and go to state 52
    PIPE_PIPE       shift and go to state 53
    AMP_AMP         shift and go to state 54


state 102

    (10) stmt -> IF LPARANT expr RPARANT stmt ELSE . stmt
    (7) stmt -> . expr SEMICOLON
    (8) stmt -> . defvar SEMICOLON
    (9) stmt -> . IF LPARANT expr RPARANT stmt
    (10) stmt -> . IF LPARANT expr RPARANT stmt ELSE stmt
    (11) stmt -> . WHILE LPARANT expr RPARANT DO stmt
    (12) stmt -> . FOREACH LPARANT ID OF expr RPARANT stmt
    (13) stmt -> . RETURN expr SEMICOLON
    (14) stmt -> . body END
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER
    (15) defvar -> . VAL type ID
    (5) body -> . stmt
    (6) body -> . stmt body

    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOREACH         shift and go to state 27
    RETURN          shift and go to state 28
    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32
    VAL             shift and go to state 33

    expr                           shift and go to state 23
    stmt                           shift and go to state 105
    defvar                         shift and go to state 24
    body                           shift and go to state 99

state 103

    (11) stmt -> WHILE LPARANT expr RPARANT DO stmt .
    (5) body -> stmt .
    (6) body -> stmt . body
    (5) body -> . stmt
    (6) body -> . stmt body
    (7) stmt -> . expr SEMICOLON
    (8) stmt -> . defvar SEMICOLON
    (9) stmt -> . IF LPARANT expr RPARANT stmt
    (10) stmt -> . IF LPARANT expr RPARANT stmt ELSE stmt
    (11) stmt -> . WHILE LPARANT expr RPARANT DO stmt
    (12) stmt -> . FOREACH LPARANT ID OF expr RPARANT stmt
    (13) stmt -> . RETURN expr SEMICOLON
    (14) stmt -> . body END
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER
    (15) defvar -> . VAL type ID

  ! reduce/reduce conflict for END resolved using rule 5 (body -> stmt .)
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for EXCL_MARK resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for LPARANT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
    ELSE            reduce using rule 11 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)
    END             reduce using rule 5 (body -> stmt .)
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOREACH         shift and go to state 27
    RETURN          shift and go to state 28
    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32
    VAL             shift and go to state 33

  ! IF              [ reduce using rule 11 (stmt -> WHILE LPARANT expr RPARANT DO stmt .) ]
  ! WHILE           [ reduce using rule 11 (stmt -> WHILE LPARANT expr RPARANT DO stmt .) ]
  ! FOREACH         [ reduce using rule 11 (stmt -> WHILE LPARANT expr RPARANT DO stmt .) ]
  ! RETURN          [ reduce using rule 11 (stmt -> WHILE LPARANT expr RPARANT DO stmt .) ]
  ! ID              [ reduce using rule 11 (stmt -> WHILE LPARANT expr RPARANT DO stmt .) ]
  ! EXCL_MARK       [ reduce using rule 11 (stmt -> WHILE LPARANT expr RPARANT DO stmt .) ]
  ! MINUS           [ reduce using rule 11 (stmt -> WHILE LPARANT expr RPARANT DO stmt .) ]
  ! PLUS            [ reduce using rule 11 (stmt -> WHILE LPARANT expr RPARANT DO stmt .) ]
  ! LPARANT         [ reduce using rule 11 (stmt -> WHILE LPARANT expr RPARANT DO stmt .) ]
  ! NUMBER          [ reduce using rule 11 (stmt -> WHILE LPARANT expr RPARANT DO stmt .) ]
  ! VAL             [ reduce using rule 11 (stmt -> WHILE LPARANT expr RPARANT DO stmt .) ]
  ! END             [ reduce using rule 11 (stmt -> WHILE LPARANT expr RPARANT DO stmt .) ]

    expr                           shift and go to state 23
    stmt                           shift and go to state 22
    body                           shift and go to state 37
    defvar                         shift and go to state 24

state 104

    (12) stmt -> FOREACH LPARANT ID OF expr RPARANT . stmt
    (7) stmt -> . expr SEMICOLON
    (8) stmt -> . defvar SEMICOLON
    (9) stmt -> . IF LPARANT expr RPARANT stmt
    (10) stmt -> . IF LPARANT expr RPARANT stmt ELSE stmt
    (11) stmt -> . WHILE LPARANT expr RPARANT DO stmt
    (12) stmt -> . FOREACH LPARANT ID OF expr RPARANT stmt
    (13) stmt -> . RETURN expr SEMICOLON
    (14) stmt -> . body END
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER
    (15) defvar -> . VAL type ID
    (5) body -> . stmt
    (6) body -> . stmt body

    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOREACH         shift and go to state 27
    RETURN          shift and go to state 28
    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32
    VAL             shift and go to state 33

    expr                           shift and go to state 23
    stmt                           shift and go to state 106
    defvar                         shift and go to state 24
    body                           shift and go to state 99

state 105

    (10) stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .
    (5) body -> stmt .
    (6) body -> stmt . body
    (5) body -> . stmt
    (6) body -> . stmt body
    (7) stmt -> . expr SEMICOLON
    (8) stmt -> . defvar SEMICOLON
    (9) stmt -> . IF LPARANT expr RPARANT stmt
    (10) stmt -> . IF LPARANT expr RPARANT stmt ELSE stmt
    (11) stmt -> . WHILE LPARANT expr RPARANT DO stmt
    (12) stmt -> . FOREACH LPARANT ID OF expr RPARANT stmt
    (13) stmt -> . RETURN expr SEMICOLON
    (14) stmt -> . body END
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER
    (15) defvar -> . VAL type ID

  ! reduce/reduce conflict for END resolved using rule 5 (body -> stmt .)
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for EXCL_MARK resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for LPARANT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
    ELSE            reduce using rule 10 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)
    END             reduce using rule 5 (body -> stmt .)
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOREACH         shift and go to state 27
    RETURN          shift and go to state 28
    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 31
    MINUS           shift and go to state 30
    PLUS            shift and go to state 29
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 32
    VAL             shift and go to state 33

  ! IF              [ reduce using rule 10 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .) ]
  ! WHILE           [ reduce using rule 10 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .) ]
  ! FOREACH         [ reduce using rule 10 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .) ]
  ! RETURN          [ reduce using rule 10 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .) ]
  ! ID              [ reduce using rule 10 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .) ]
  ! EXCL_MARK       [ reduce using rule 10 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .) ]
  ! MINUS           [ reduce using rule 10 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .) ]
  ! PLUS            [ reduce using rule 10 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .) ]
  ! LPARANT         [ reduce using rule 10 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .) ]
  ! NUMBER          [ reduce using rule 10 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .) ]
  ! VAL             [ reduce using rule 10 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .) ]
  ! END             [ reduce using rule 10 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .) ]

    expr                           shift and go to state 23
    stmt                           shift and go to state 22
    body                           shift and go to state 37
    defvar                         shift and go to state 24

state 106

    (12) stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .
    (5) body -> stmt .
    (6) body -> stmt . body
    (5) body -> . stmt
    (6) body -> . stmt body
    (7) stmt -> . expr SEMICOLON
    (8) stmt -> . defvar SEMICOLON
    (9) stmt -> . IF LPARANT expr RPARANT stmt
    (10) stmt -> . IF LPARANT expr RPARANT stmt ELSE stmt
    (11) stmt -> . WHILE LPARANT expr RPARANT DO stmt
    (12) stmt -> . FOREACH LPARANT ID OF expr RPARANT stmt
    (13) stmt -> . RETURN expr SEMICOLON
    (14) stmt -> . body END
    (16) expr -> . ID LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . ID
    (38) expr -> . NUMBER
    (15) defvar -> . VAL type ID

  ! reduce/reduce conflict for END resolved using rule 5 (body -> stmt .)
    IF              reduce using rule 12 (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .)
    WHILE           reduce using rule 12 (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .)
    FOREACH         reduce using rule 12 (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .)
    RETURN          reduce using rule 12 (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .)
    ID              reduce using rule 12 (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .)
    EXCL_MARK       reduce using rule 12 (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .)
    MINUS           reduce using rule 12 (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .)
    PLUS            reduce using rule 12 (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .)
    LPARANT         reduce using rule 12 (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .)
    NUMBER          reduce using rule 12 (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .)
    VAL             reduce using rule 12 (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .)
    ELSE            reduce using rule 12 (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .)
    END             reduce using rule 5 (body -> stmt .)

  ! END             [ reduce using rule 12 (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .) ]
  ! IF              [ shift and go to state 25 ]
  ! WHILE           [ shift and go to state 26 ]
  ! FOREACH         [ shift and go to state 27 ]
  ! RETURN          [ shift and go to state 28 ]
  ! ID              [ shift and go to state 19 ]
  ! EXCL_MARK       [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 30 ]
  ! PLUS            [ shift and go to state 29 ]
  ! LPARANT         [ shift and go to state 20 ]
  ! NUMBER          [ shift and go to state 32 ]
  ! VAL             [ shift and go to state 33 ]

    expr                           shift and go to state 23
    stmt                           shift and go to state 22
    body                           shift and go to state 37
    defvar                         shift and go to state 24
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for END in state 37 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 75 resolved as shift
WARNING: shift/reduce conflict for QUEST_MARK in state 75 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 75 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 75 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 75 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 75 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 75 resolved as shift
WARNING: shift/reduce conflict for SMALL in state 75 resolved as shift
WARNING: shift/reduce conflict for BIG in state 75 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for EXCL_EQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for SMALL_EQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for BIG_EQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for PIPE_PIPE in state 75 resolved as shift
WARNING: shift/reduce conflict for AMP_AMP in state 75 resolved as shift
WARNING: shift/reduce conflict for IF in state 103 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 103 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 103 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 103 resolved as shift
WARNING: shift/reduce conflict for ID in state 103 resolved as shift
WARNING: shift/reduce conflict for EXCL_MARK in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 103 resolved as shift
WARNING: shift/reduce conflict for LPARANT in state 103 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 103 resolved as shift
WARNING: shift/reduce conflict for VAL in state 103 resolved as shift
WARNING: shift/reduce conflict for IF in state 105 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 105 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 105 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 105 resolved as shift
WARNING: shift/reduce conflict for ID in state 105 resolved as shift
WARNING: shift/reduce conflict for EXCL_MARK in state 105 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 105 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 105 resolved as shift
WARNING: shift/reduce conflict for LPARANT in state 105 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 105 resolved as shift
WARNING: shift/reduce conflict for VAL in state 105 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (prog -> func)
WARNING: rejected rule (func -> <empty>) in state 2
WARNING: reduce/reduce conflict in state 98 resolved using rule (body -> stmt)
WARNING: rejected rule (stmt -> IF LPARANT expr RPARANT stmt) in state 98
WARNING: reduce/reduce conflict in state 103 resolved using rule (body -> stmt)
WARNING: rejected rule (stmt -> WHILE LPARANT expr RPARANT DO stmt) in state 103
WARNING: reduce/reduce conflict in state 105 resolved using rule (body -> stmt)
WARNING: rejected rule (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt) in state 105
WARNING: reduce/reduce conflict in state 106 resolved using rule (body -> stmt)
WARNING: rejected rule (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt) in state 106
