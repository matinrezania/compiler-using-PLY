Created by PLY (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prog
Rule 1     prog -> func
Rule 2     prog -> func prog
Rule 3     func -> FUNCTION iden LPARANT flist RPARANT RETURNS type COLON body END
Rule 4     func -> empty
Rule 5     body -> stmt
Rule 6     body -> stmt body
Rule 7     stmt -> expr SEMICOLON
Rule 8     stmt -> defvar SEMICOLON
Rule 9     stmt -> IF LPARANT expr RPARANT stmt
Rule 10    stmt -> IF LPARANT expr RPARANT stmt ELSE stmt
Rule 11    stmt -> WHILE LPARANT expr RPARANT DO stmt
Rule 12    stmt -> FOREACH LPARANT iden OF expr RPARANT stmt
Rule 13    stmt -> RETURN expr SEMICOLON
Rule 14    stmt -> COLON body END
Rule 15    defvar -> VAL type iden
Rule 16    expr -> iden LPARANT clist RPARANT
Rule 17    expr -> expr LBRACKET expr RBRACKET
Rule 18    expr -> expr QUEST_MARK expr COLON expr
Rule 19    expr -> expr EQUAL expr
Rule 20    expr -> expr PLUS expr
Rule 21    expr -> expr MINUS expr
Rule 22    expr -> expr MULTIPLY expr
Rule 23    expr -> expr DIVIDE expr
Rule 24    expr -> expr PERCENT expr
Rule 25    expr -> expr SMALL expr
Rule 26    expr -> expr BIG expr
Rule 27    expr -> expr EQUAL_EQUAL expr
Rule 28    expr -> expr EXCL_EQUAL expr
Rule 29    expr -> expr SMALL_EQUAL expr
Rule 30    expr -> expr BIG_EQUAL expr
Rule 31    expr -> expr PIPE_PIPE expr
Rule 32    expr -> expr AMP_AMP expr
Rule 33    expr -> EXCL_MARK expr
Rule 34    expr -> MINUS expr
Rule 35    expr -> PLUS expr
Rule 36    expr -> LPARANT expr RPARANT
Rule 37    expr -> iden
Rule 38    expr -> num
Rule 39    flist -> empty
Rule 40    flist -> type iden
Rule 41    flist -> type iden COMMA flist
Rule 42    clist -> empty
Rule 43    clist -> expr
Rule 44    clist -> expr COMMA clist
Rule 45    type -> INT
Rule 46    type -> ARRAY
Rule 47    type -> NIL
Rule 48    num -> NUMBER
Rule 49    iden -> ID
Rule 50    empty -> <empty>

Terminals, with rules where they appear

AMP_AMP              : 32
ARRAY                : 46
BIG                  : 26
BIG_EQUAL            : 30
COLON                : 3 14 18
COMMA                : 41 44
DIVIDE               : 23
DO                   : 11
ELSE                 : 10
END                  : 3 14
EQUAL                : 19
EQUAL_EQUAL          : 27
EXCL_EQUAL           : 28
EXCL_MARK            : 33
FOREACH              : 12
FUNCTION             : 3
ID                   : 49
IF                   : 9 10
INT                  : 45
LBRACKET             : 17
LPARANT              : 3 9 10 11 12 16 36
MINUS                : 21 34
MULTIPLY             : 22
NIL                  : 47
NUMBER               : 48
OF                   : 12
PERCENT              : 24
PIPE_PIPE            : 31
PLUS                 : 20 35
QUEST_MARK           : 18
RBRACKET             : 17
RETURN               : 13
RETURNS              : 3
RPARANT              : 3 9 10 11 12 16 36
SEMICOLON            : 7 8 13
SMALL                : 25
SMALL_EQUAL          : 29
VAL                  : 15
WHILE                : 11
error                : 

Nonterminals, with rules where they appear

body                 : 3 6 14
clist                : 16 44
defvar               : 8
empty                : 4 39 42
expr                 : 7 9 10 11 12 13 17 17 18 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 34 35 36 43 44
flist                : 3 41
func                 : 1 2
iden                 : 3 12 15 16 37 40 41
num                  : 38
prog                 : 2 0
stmt                 : 5 6 9 10 10 11 12
type                 : 3 15 40 41


state 0

    (0) S' -> . prog
    (1) prog -> . func
    (2) prog -> . func prog
    (3) func -> . FUNCTION iden LPARANT flist RPARANT RETURNS type COLON body END
    (4) func -> . empty
    (50) empty -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 3
    $end            reduce using rule 50 (empty -> .)

  ! FUNCTION        [ reduce using rule 50 (empty -> .) ]

    prog                           shift and go to state 1
    func                           shift and go to state 2
    empty                          shift and go to state 4

state 1

    (0) S' -> prog .



state 2

    (1) prog -> func .
    (2) prog -> func . prog
    (1) prog -> . func
    (2) prog -> . func prog
    (3) func -> . FUNCTION iden LPARANT flist RPARANT RETURNS type COLON body END
    (4) func -> . empty
    (50) empty -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 1 (prog -> func .)
    $end            reduce using rule 1 (prog -> func .)
    FUNCTION        shift and go to state 3

  ! FUNCTION        [ reduce using rule 50 (empty -> .) ]
  ! $end            [ reduce using rule 50 (empty -> .) ]

    func                           shift and go to state 2
    prog                           shift and go to state 5
    empty                          shift and go to state 4

state 3

    (3) func -> FUNCTION . iden LPARANT flist RPARANT RETURNS type COLON body END
    (49) iden -> . ID

    ID              shift and go to state 7

    iden                           shift and go to state 6

state 4

    (4) func -> empty .

    FUNCTION        reduce using rule 4 (func -> empty .)
    $end            reduce using rule 4 (func -> empty .)


state 5

    (2) prog -> func prog .

    $end            reduce using rule 2 (prog -> func prog .)


state 6

    (3) func -> FUNCTION iden . LPARANT flist RPARANT RETURNS type COLON body END

    LPARANT         shift and go to state 8


state 7

    (49) iden -> ID .

    LPARANT         reduce using rule 49 (iden -> ID .)
    COMMA           reduce using rule 49 (iden -> ID .)
    RPARANT         reduce using rule 49 (iden -> ID .)
    SEMICOLON       reduce using rule 49 (iden -> ID .)
    LBRACKET        reduce using rule 49 (iden -> ID .)
    QUEST_MARK      reduce using rule 49 (iden -> ID .)
    EQUAL           reduce using rule 49 (iden -> ID .)
    PLUS            reduce using rule 49 (iden -> ID .)
    MINUS           reduce using rule 49 (iden -> ID .)
    MULTIPLY        reduce using rule 49 (iden -> ID .)
    DIVIDE          reduce using rule 49 (iden -> ID .)
    PERCENT         reduce using rule 49 (iden -> ID .)
    SMALL           reduce using rule 49 (iden -> ID .)
    BIG             reduce using rule 49 (iden -> ID .)
    EQUAL_EQUAL     reduce using rule 49 (iden -> ID .)
    EXCL_EQUAL      reduce using rule 49 (iden -> ID .)
    SMALL_EQUAL     reduce using rule 49 (iden -> ID .)
    BIG_EQUAL       reduce using rule 49 (iden -> ID .)
    PIPE_PIPE       reduce using rule 49 (iden -> ID .)
    AMP_AMP         reduce using rule 49 (iden -> ID .)
    RBRACKET        reduce using rule 49 (iden -> ID .)
    COLON           reduce using rule 49 (iden -> ID .)
    OF              reduce using rule 49 (iden -> ID .)


state 8

    (3) func -> FUNCTION iden LPARANT . flist RPARANT RETURNS type COLON body END
    (39) flist -> . empty
    (40) flist -> . type iden
    (41) flist -> . type iden COMMA flist
    (50) empty -> .
    (45) type -> . INT
    (46) type -> . ARRAY
    (47) type -> . NIL

    RPARANT         reduce using rule 50 (empty -> .)
    INT             shift and go to state 12
    ARRAY           shift and go to state 13
    NIL             shift and go to state 14

    flist                          shift and go to state 9
    type                           shift and go to state 10
    empty                          shift and go to state 11

state 9

    (3) func -> FUNCTION iden LPARANT flist . RPARANT RETURNS type COLON body END

    RPARANT         shift and go to state 15


state 10

    (40) flist -> type . iden
    (41) flist -> type . iden COMMA flist
    (49) iden -> . ID

    ID              shift and go to state 7

    iden                           shift and go to state 16

state 11

    (39) flist -> empty .

    RPARANT         reduce using rule 39 (flist -> empty .)


state 12

    (45) type -> INT .

    ID              reduce using rule 45 (type -> INT .)
    COLON           reduce using rule 45 (type -> INT .)


state 13

    (46) type -> ARRAY .

    ID              reduce using rule 46 (type -> ARRAY .)
    COLON           reduce using rule 46 (type -> ARRAY .)


state 14

    (47) type -> NIL .

    ID              reduce using rule 47 (type -> NIL .)
    COLON           reduce using rule 47 (type -> NIL .)


state 15

    (3) func -> FUNCTION iden LPARANT flist RPARANT . RETURNS type COLON body END

    RETURNS         shift and go to state 17


state 16

    (40) flist -> type iden .
    (41) flist -> type iden . COMMA flist

    RPARANT         reduce using rule 40 (flist -> type iden .)
    COMMA           shift and go to state 18


state 17

    (3) func -> FUNCTION iden LPARANT flist RPARANT RETURNS . type COLON body END
    (45) type -> . INT
    (46) type -> . ARRAY
    (47) type -> . NIL

    INT             shift and go to state 12
    ARRAY           shift and go to state 13
    NIL             shift and go to state 14

    type                           shift and go to state 19

state 18

    (41) flist -> type iden COMMA . flist
    (39) flist -> . empty
    (40) flist -> . type iden
    (41) flist -> . type iden COMMA flist
    (50) empty -> .
    (45) type -> . INT
    (46) type -> . ARRAY
    (47) type -> . NIL

    RPARANT         reduce using rule 50 (empty -> .)
    INT             shift and go to state 12
    ARRAY           shift and go to state 13
    NIL             shift and go to state 14

    type                           shift and go to state 10
    flist                          shift and go to state 20
    empty                          shift and go to state 11

state 19

    (3) func -> FUNCTION iden LPARANT flist RPARANT RETURNS type . COLON body END

    COLON           shift and go to state 21


state 20

    (41) flist -> type iden COMMA flist .

    RPARANT         reduce using rule 41 (flist -> type iden COMMA flist .)


state 21

    (3) func -> FUNCTION iden LPARANT flist RPARANT RETURNS type COLON . body END
    (5) body -> . stmt
    (6) body -> . stmt body
    (7) stmt -> . expr SEMICOLON
    (8) stmt -> . defvar SEMICOLON
    (9) stmt -> . IF LPARANT expr RPARANT stmt
    (10) stmt -> . IF LPARANT expr RPARANT stmt ELSE stmt
    (11) stmt -> . WHILE LPARANT expr RPARANT DO stmt
    (12) stmt -> . FOREACH LPARANT iden OF expr RPARANT stmt
    (13) stmt -> . RETURN expr SEMICOLON
    (14) stmt -> . COLON body END
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (15) defvar -> . VAL type iden
    (49) iden -> . ID
    (48) num -> . NUMBER

    IF              shift and go to state 29
    WHILE           shift and go to state 30
    FOREACH         shift and go to state 31
    RETURN          shift and go to state 32
    COLON           shift and go to state 24
    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    VAL             shift and go to state 37
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    iden                           shift and go to state 22
    body                           shift and go to state 25
    stmt                           shift and go to state 26
    expr                           shift and go to state 27
    defvar                         shift and go to state 28
    num                            shift and go to state 36

state 22

    (16) expr -> iden . LPARANT clist RPARANT
    (37) expr -> iden .

    LPARANT         shift and go to state 39
    SEMICOLON       reduce using rule 37 (expr -> iden .)
    LBRACKET        reduce using rule 37 (expr -> iden .)
    QUEST_MARK      reduce using rule 37 (expr -> iden .)
    EQUAL           reduce using rule 37 (expr -> iden .)
    PLUS            reduce using rule 37 (expr -> iden .)
    MINUS           reduce using rule 37 (expr -> iden .)
    MULTIPLY        reduce using rule 37 (expr -> iden .)
    DIVIDE          reduce using rule 37 (expr -> iden .)
    PERCENT         reduce using rule 37 (expr -> iden .)
    SMALL           reduce using rule 37 (expr -> iden .)
    BIG             reduce using rule 37 (expr -> iden .)
    EQUAL_EQUAL     reduce using rule 37 (expr -> iden .)
    EXCL_EQUAL      reduce using rule 37 (expr -> iden .)
    SMALL_EQUAL     reduce using rule 37 (expr -> iden .)
    BIG_EQUAL       reduce using rule 37 (expr -> iden .)
    PIPE_PIPE       reduce using rule 37 (expr -> iden .)
    AMP_AMP         reduce using rule 37 (expr -> iden .)
    RPARANT         reduce using rule 37 (expr -> iden .)
    COMMA           reduce using rule 37 (expr -> iden .)
    RBRACKET        reduce using rule 37 (expr -> iden .)
    COLON           reduce using rule 37 (expr -> iden .)


state 23

    (36) expr -> LPARANT . expr RPARANT
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (49) iden -> . ID
    (48) num -> . NUMBER

    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 40
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 24

    (14) stmt -> COLON . body END
    (5) body -> . stmt
    (6) body -> . stmt body
    (7) stmt -> . expr SEMICOLON
    (8) stmt -> . defvar SEMICOLON
    (9) stmt -> . IF LPARANT expr RPARANT stmt
    (10) stmt -> . IF LPARANT expr RPARANT stmt ELSE stmt
    (11) stmt -> . WHILE LPARANT expr RPARANT DO stmt
    (12) stmt -> . FOREACH LPARANT iden OF expr RPARANT stmt
    (13) stmt -> . RETURN expr SEMICOLON
    (14) stmt -> . COLON body END
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (15) defvar -> . VAL type iden
    (49) iden -> . ID
    (48) num -> . NUMBER

    IF              shift and go to state 29
    WHILE           shift and go to state 30
    FOREACH         shift and go to state 31
    RETURN          shift and go to state 32
    COLON           shift and go to state 24
    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    VAL             shift and go to state 37
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    body                           shift and go to state 41
    stmt                           shift and go to state 26
    expr                           shift and go to state 27
    defvar                         shift and go to state 28
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 25

    (3) func -> FUNCTION iden LPARANT flist RPARANT RETURNS type COLON body . END

    END             shift and go to state 42


state 26

    (5) body -> stmt .
    (6) body -> stmt . body
    (5) body -> . stmt
    (6) body -> . stmt body
    (7) stmt -> . expr SEMICOLON
    (8) stmt -> . defvar SEMICOLON
    (9) stmt -> . IF LPARANT expr RPARANT stmt
    (10) stmt -> . IF LPARANT expr RPARANT stmt ELSE stmt
    (11) stmt -> . WHILE LPARANT expr RPARANT DO stmt
    (12) stmt -> . FOREACH LPARANT iden OF expr RPARANT stmt
    (13) stmt -> . RETURN expr SEMICOLON
    (14) stmt -> . COLON body END
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (15) defvar -> . VAL type iden
    (49) iden -> . ID
    (48) num -> . NUMBER

    END             reduce using rule 5 (body -> stmt .)
    IF              shift and go to state 29
    WHILE           shift and go to state 30
    FOREACH         shift and go to state 31
    RETURN          shift and go to state 32
    COLON           shift and go to state 24
    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    VAL             shift and go to state 37
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    stmt                           shift and go to state 26
    body                           shift and go to state 43
    expr                           shift and go to state 27
    defvar                         shift and go to state 28
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 27

    (7) stmt -> expr . SEMICOLON
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       shift and go to state 44
    LBRACKET        shift and go to state 45
    QUEST_MARK      shift and go to state 46
    EQUAL           shift and go to state 47
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    PERCENT         shift and go to state 52
    SMALL           shift and go to state 53
    BIG             shift and go to state 54
    EQUAL_EQUAL     shift and go to state 55
    EXCL_EQUAL      shift and go to state 56
    SMALL_EQUAL     shift and go to state 57
    BIG_EQUAL       shift and go to state 58
    PIPE_PIPE       shift and go to state 59
    AMP_AMP         shift and go to state 60


state 28

    (8) stmt -> defvar . SEMICOLON

    SEMICOLON       shift and go to state 61


state 29

    (9) stmt -> IF . LPARANT expr RPARANT stmt
    (10) stmt -> IF . LPARANT expr RPARANT stmt ELSE stmt

    LPARANT         shift and go to state 62


state 30

    (11) stmt -> WHILE . LPARANT expr RPARANT DO stmt

    LPARANT         shift and go to state 63


state 31

    (12) stmt -> FOREACH . LPARANT iden OF expr RPARANT stmt

    LPARANT         shift and go to state 64


state 32

    (13) stmt -> RETURN . expr SEMICOLON
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (49) iden -> . ID
    (48) num -> . NUMBER

    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 65
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 33

    (35) expr -> PLUS . expr
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (49) iden -> . ID
    (48) num -> . NUMBER

    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 66
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 34

    (34) expr -> MINUS . expr
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (49) iden -> . ID
    (48) num -> . NUMBER

    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 67
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 35

    (33) expr -> EXCL_MARK . expr
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (49) iden -> . ID
    (48) num -> . NUMBER

    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 68
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 36

    (38) expr -> num .

    SEMICOLON       reduce using rule 38 (expr -> num .)
    LBRACKET        reduce using rule 38 (expr -> num .)
    QUEST_MARK      reduce using rule 38 (expr -> num .)
    EQUAL           reduce using rule 38 (expr -> num .)
    PLUS            reduce using rule 38 (expr -> num .)
    MINUS           reduce using rule 38 (expr -> num .)
    MULTIPLY        reduce using rule 38 (expr -> num .)
    DIVIDE          reduce using rule 38 (expr -> num .)
    PERCENT         reduce using rule 38 (expr -> num .)
    SMALL           reduce using rule 38 (expr -> num .)
    BIG             reduce using rule 38 (expr -> num .)
    EQUAL_EQUAL     reduce using rule 38 (expr -> num .)
    EXCL_EQUAL      reduce using rule 38 (expr -> num .)
    SMALL_EQUAL     reduce using rule 38 (expr -> num .)
    BIG_EQUAL       reduce using rule 38 (expr -> num .)
    PIPE_PIPE       reduce using rule 38 (expr -> num .)
    AMP_AMP         reduce using rule 38 (expr -> num .)
    RPARANT         reduce using rule 38 (expr -> num .)
    COMMA           reduce using rule 38 (expr -> num .)
    RBRACKET        reduce using rule 38 (expr -> num .)
    COLON           reduce using rule 38 (expr -> num .)


state 37

    (15) defvar -> VAL . type iden
    (45) type -> . INT
    (46) type -> . ARRAY
    (47) type -> . NIL

    INT             shift and go to state 12
    ARRAY           shift and go to state 13
    NIL             shift and go to state 14

    type                           shift and go to state 69

state 38

    (48) num -> NUMBER .

    SEMICOLON       reduce using rule 48 (num -> NUMBER .)
    LBRACKET        reduce using rule 48 (num -> NUMBER .)
    QUEST_MARK      reduce using rule 48 (num -> NUMBER .)
    EQUAL           reduce using rule 48 (num -> NUMBER .)
    PLUS            reduce using rule 48 (num -> NUMBER .)
    MINUS           reduce using rule 48 (num -> NUMBER .)
    MULTIPLY        reduce using rule 48 (num -> NUMBER .)
    DIVIDE          reduce using rule 48 (num -> NUMBER .)
    PERCENT         reduce using rule 48 (num -> NUMBER .)
    SMALL           reduce using rule 48 (num -> NUMBER .)
    BIG             reduce using rule 48 (num -> NUMBER .)
    EQUAL_EQUAL     reduce using rule 48 (num -> NUMBER .)
    EXCL_EQUAL      reduce using rule 48 (num -> NUMBER .)
    SMALL_EQUAL     reduce using rule 48 (num -> NUMBER .)
    BIG_EQUAL       reduce using rule 48 (num -> NUMBER .)
    PIPE_PIPE       reduce using rule 48 (num -> NUMBER .)
    AMP_AMP         reduce using rule 48 (num -> NUMBER .)
    RPARANT         reduce using rule 48 (num -> NUMBER .)
    COMMA           reduce using rule 48 (num -> NUMBER .)
    RBRACKET        reduce using rule 48 (num -> NUMBER .)
    COLON           reduce using rule 48 (num -> NUMBER .)


state 39

    (16) expr -> iden LPARANT . clist RPARANT
    (42) clist -> . empty
    (43) clist -> . expr
    (44) clist -> . expr COMMA clist
    (50) empty -> .
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (49) iden -> . ID
    (48) num -> . NUMBER

    RPARANT         reduce using rule 50 (empty -> .)
    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    iden                           shift and go to state 22
    clist                          shift and go to state 70
    empty                          shift and go to state 71
    expr                           shift and go to state 72
    num                            shift and go to state 36

state 40

    (36) expr -> LPARANT expr . RPARANT
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    RPARANT         shift and go to state 73
    LBRACKET        shift and go to state 45
    QUEST_MARK      shift and go to state 46
    EQUAL           shift and go to state 47
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    PERCENT         shift and go to state 52
    SMALL           shift and go to state 53
    BIG             shift and go to state 54
    EQUAL_EQUAL     shift and go to state 55
    EXCL_EQUAL      shift and go to state 56
    SMALL_EQUAL     shift and go to state 57
    BIG_EQUAL       shift and go to state 58
    PIPE_PIPE       shift and go to state 59
    AMP_AMP         shift and go to state 60


state 41

    (14) stmt -> COLON body . END

    END             shift and go to state 74


state 42

    (3) func -> FUNCTION iden LPARANT flist RPARANT RETURNS type COLON body END .

    FUNCTION        reduce using rule 3 (func -> FUNCTION iden LPARANT flist RPARANT RETURNS type COLON body END .)
    $end            reduce using rule 3 (func -> FUNCTION iden LPARANT flist RPARANT RETURNS type COLON body END .)


state 43

    (6) body -> stmt body .

    END             reduce using rule 6 (body -> stmt body .)


state 44

    (7) stmt -> expr SEMICOLON .

    IF              reduce using rule 7 (stmt -> expr SEMICOLON .)
    WHILE           reduce using rule 7 (stmt -> expr SEMICOLON .)
    FOREACH         reduce using rule 7 (stmt -> expr SEMICOLON .)
    RETURN          reduce using rule 7 (stmt -> expr SEMICOLON .)
    COLON           reduce using rule 7 (stmt -> expr SEMICOLON .)
    EXCL_MARK       reduce using rule 7 (stmt -> expr SEMICOLON .)
    MINUS           reduce using rule 7 (stmt -> expr SEMICOLON .)
    PLUS            reduce using rule 7 (stmt -> expr SEMICOLON .)
    LPARANT         reduce using rule 7 (stmt -> expr SEMICOLON .)
    VAL             reduce using rule 7 (stmt -> expr SEMICOLON .)
    ID              reduce using rule 7 (stmt -> expr SEMICOLON .)
    NUMBER          reduce using rule 7 (stmt -> expr SEMICOLON .)
    END             reduce using rule 7 (stmt -> expr SEMICOLON .)
    ELSE            reduce using rule 7 (stmt -> expr SEMICOLON .)


state 45

    (17) expr -> expr LBRACKET . expr RBRACKET
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (49) iden -> . ID
    (48) num -> . NUMBER

    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 75
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 46

    (18) expr -> expr QUEST_MARK . expr COLON expr
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (49) iden -> . ID
    (48) num -> . NUMBER

    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 76
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 47

    (19) expr -> expr EQUAL . expr
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (49) iden -> . ID
    (48) num -> . NUMBER

    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 77
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 48

    (20) expr -> expr PLUS . expr
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (49) iden -> . ID
    (48) num -> . NUMBER

    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 78
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 49

    (21) expr -> expr MINUS . expr
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (49) iden -> . ID
    (48) num -> . NUMBER

    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 79
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 50

    (22) expr -> expr MULTIPLY . expr
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (49) iden -> . ID
    (48) num -> . NUMBER

    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 80
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 51

    (23) expr -> expr DIVIDE . expr
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (49) iden -> . ID
    (48) num -> . NUMBER

    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 81
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 52

    (24) expr -> expr PERCENT . expr
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (49) iden -> . ID
    (48) num -> . NUMBER

    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 82
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 53

    (25) expr -> expr SMALL . expr
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (49) iden -> . ID
    (48) num -> . NUMBER

    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 83
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 54

    (26) expr -> expr BIG . expr
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (49) iden -> . ID
    (48) num -> . NUMBER

    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 84
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 55

    (27) expr -> expr EQUAL_EQUAL . expr
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (49) iden -> . ID
    (48) num -> . NUMBER

    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 85
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 56

    (28) expr -> expr EXCL_EQUAL . expr
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (49) iden -> . ID
    (48) num -> . NUMBER

    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 86
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 57

    (29) expr -> expr SMALL_EQUAL . expr
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (49) iden -> . ID
    (48) num -> . NUMBER

    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 87
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 58

    (30) expr -> expr BIG_EQUAL . expr
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (49) iden -> . ID
    (48) num -> . NUMBER

    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 88
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 59

    (31) expr -> expr PIPE_PIPE . expr
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (49) iden -> . ID
    (48) num -> . NUMBER

    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 89
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 60

    (32) expr -> expr AMP_AMP . expr
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (49) iden -> . ID
    (48) num -> . NUMBER

    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 90
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 61

    (8) stmt -> defvar SEMICOLON .

    IF              reduce using rule 8 (stmt -> defvar SEMICOLON .)
    WHILE           reduce using rule 8 (stmt -> defvar SEMICOLON .)
    FOREACH         reduce using rule 8 (stmt -> defvar SEMICOLON .)
    RETURN          reduce using rule 8 (stmt -> defvar SEMICOLON .)
    COLON           reduce using rule 8 (stmt -> defvar SEMICOLON .)
    EXCL_MARK       reduce using rule 8 (stmt -> defvar SEMICOLON .)
    MINUS           reduce using rule 8 (stmt -> defvar SEMICOLON .)
    PLUS            reduce using rule 8 (stmt -> defvar SEMICOLON .)
    LPARANT         reduce using rule 8 (stmt -> defvar SEMICOLON .)
    VAL             reduce using rule 8 (stmt -> defvar SEMICOLON .)
    ID              reduce using rule 8 (stmt -> defvar SEMICOLON .)
    NUMBER          reduce using rule 8 (stmt -> defvar SEMICOLON .)
    END             reduce using rule 8 (stmt -> defvar SEMICOLON .)
    ELSE            reduce using rule 8 (stmt -> defvar SEMICOLON .)


state 62

    (9) stmt -> IF LPARANT . expr RPARANT stmt
    (10) stmt -> IF LPARANT . expr RPARANT stmt ELSE stmt
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (49) iden -> . ID
    (48) num -> . NUMBER

    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 91
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 63

    (11) stmt -> WHILE LPARANT . expr RPARANT DO stmt
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (49) iden -> . ID
    (48) num -> . NUMBER

    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 92
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 64

    (12) stmt -> FOREACH LPARANT . iden OF expr RPARANT stmt
    (49) iden -> . ID

    ID              shift and go to state 7

    iden                           shift and go to state 93

state 65

    (13) stmt -> RETURN expr . SEMICOLON
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       shift and go to state 94
    LBRACKET        shift and go to state 45
    QUEST_MARK      shift and go to state 46
    EQUAL           shift and go to state 47
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    PERCENT         shift and go to state 52
    SMALL           shift and go to state 53
    BIG             shift and go to state 54
    EQUAL_EQUAL     shift and go to state 55
    EXCL_EQUAL      shift and go to state 56
    SMALL_EQUAL     shift and go to state 57
    BIG_EQUAL       shift and go to state 58
    PIPE_PIPE       shift and go to state 59
    AMP_AMP         shift and go to state 60


state 66

    (35) expr -> PLUS expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 35 (expr -> PLUS expr .)
    QUEST_MARK      reduce using rule 35 (expr -> PLUS expr .)
    EQUAL           reduce using rule 35 (expr -> PLUS expr .)
    PLUS            reduce using rule 35 (expr -> PLUS expr .)
    MINUS           reduce using rule 35 (expr -> PLUS expr .)
    SMALL           reduce using rule 35 (expr -> PLUS expr .)
    BIG             reduce using rule 35 (expr -> PLUS expr .)
    EQUAL_EQUAL     reduce using rule 35 (expr -> PLUS expr .)
    EXCL_EQUAL      reduce using rule 35 (expr -> PLUS expr .)
    SMALL_EQUAL     reduce using rule 35 (expr -> PLUS expr .)
    BIG_EQUAL       reduce using rule 35 (expr -> PLUS expr .)
    PIPE_PIPE       reduce using rule 35 (expr -> PLUS expr .)
    AMP_AMP         reduce using rule 35 (expr -> PLUS expr .)
    RPARANT         reduce using rule 35 (expr -> PLUS expr .)
    COMMA           reduce using rule 35 (expr -> PLUS expr .)
    RBRACKET        reduce using rule 35 (expr -> PLUS expr .)
    COLON           reduce using rule 35 (expr -> PLUS expr .)
    LBRACKET        shift and go to state 45
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    PERCENT         shift and go to state 52

  ! LBRACKET        [ reduce using rule 35 (expr -> PLUS expr .) ]
  ! MULTIPLY        [ reduce using rule 35 (expr -> PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 35 (expr -> PLUS expr .) ]
  ! PERCENT         [ reduce using rule 35 (expr -> PLUS expr .) ]
  ! QUEST_MARK      [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 47 ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! SMALL           [ shift and go to state 53 ]
  ! BIG             [ shift and go to state 54 ]
  ! EQUAL_EQUAL     [ shift and go to state 55 ]
  ! EXCL_EQUAL      [ shift and go to state 56 ]
  ! SMALL_EQUAL     [ shift and go to state 57 ]
  ! BIG_EQUAL       [ shift and go to state 58 ]
  ! PIPE_PIPE       [ shift and go to state 59 ]
  ! AMP_AMP         [ shift and go to state 60 ]


state 67

    (34) expr -> MINUS expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 34 (expr -> MINUS expr .)
    QUEST_MARK      reduce using rule 34 (expr -> MINUS expr .)
    EQUAL           reduce using rule 34 (expr -> MINUS expr .)
    PLUS            reduce using rule 34 (expr -> MINUS expr .)
    MINUS           reduce using rule 34 (expr -> MINUS expr .)
    SMALL           reduce using rule 34 (expr -> MINUS expr .)
    BIG             reduce using rule 34 (expr -> MINUS expr .)
    EQUAL_EQUAL     reduce using rule 34 (expr -> MINUS expr .)
    EXCL_EQUAL      reduce using rule 34 (expr -> MINUS expr .)
    SMALL_EQUAL     reduce using rule 34 (expr -> MINUS expr .)
    BIG_EQUAL       reduce using rule 34 (expr -> MINUS expr .)
    PIPE_PIPE       reduce using rule 34 (expr -> MINUS expr .)
    AMP_AMP         reduce using rule 34 (expr -> MINUS expr .)
    RPARANT         reduce using rule 34 (expr -> MINUS expr .)
    COMMA           reduce using rule 34 (expr -> MINUS expr .)
    RBRACKET        reduce using rule 34 (expr -> MINUS expr .)
    COLON           reduce using rule 34 (expr -> MINUS expr .)
    LBRACKET        shift and go to state 45
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    PERCENT         shift and go to state 52

  ! LBRACKET        [ reduce using rule 34 (expr -> MINUS expr .) ]
  ! MULTIPLY        [ reduce using rule 34 (expr -> MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 34 (expr -> MINUS expr .) ]
  ! PERCENT         [ reduce using rule 34 (expr -> MINUS expr .) ]
  ! QUEST_MARK      [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 47 ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! SMALL           [ shift and go to state 53 ]
  ! BIG             [ shift and go to state 54 ]
  ! EQUAL_EQUAL     [ shift and go to state 55 ]
  ! EXCL_EQUAL      [ shift and go to state 56 ]
  ! SMALL_EQUAL     [ shift and go to state 57 ]
  ! BIG_EQUAL       [ shift and go to state 58 ]
  ! PIPE_PIPE       [ shift and go to state 59 ]
  ! AMP_AMP         [ shift and go to state 60 ]


state 68

    (33) expr -> EXCL_MARK expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 33 (expr -> EXCL_MARK expr .)
    SMALL           reduce using rule 33 (expr -> EXCL_MARK expr .)
    BIG             reduce using rule 33 (expr -> EXCL_MARK expr .)
    EQUAL_EQUAL     reduce using rule 33 (expr -> EXCL_MARK expr .)
    EXCL_EQUAL      reduce using rule 33 (expr -> EXCL_MARK expr .)
    SMALL_EQUAL     reduce using rule 33 (expr -> EXCL_MARK expr .)
    BIG_EQUAL       reduce using rule 33 (expr -> EXCL_MARK expr .)
    PIPE_PIPE       reduce using rule 33 (expr -> EXCL_MARK expr .)
    AMP_AMP         reduce using rule 33 (expr -> EXCL_MARK expr .)
    RPARANT         reduce using rule 33 (expr -> EXCL_MARK expr .)
    COMMA           reduce using rule 33 (expr -> EXCL_MARK expr .)
    RBRACKET        reduce using rule 33 (expr -> EXCL_MARK expr .)
    COLON           reduce using rule 33 (expr -> EXCL_MARK expr .)
    LBRACKET        shift and go to state 45
    QUEST_MARK      shift and go to state 46
    EQUAL           shift and go to state 47
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    PERCENT         shift and go to state 52

  ! LBRACKET        [ reduce using rule 33 (expr -> EXCL_MARK expr .) ]
  ! QUEST_MARK      [ reduce using rule 33 (expr -> EXCL_MARK expr .) ]
  ! EQUAL           [ reduce using rule 33 (expr -> EXCL_MARK expr .) ]
  ! PLUS            [ reduce using rule 33 (expr -> EXCL_MARK expr .) ]
  ! MINUS           [ reduce using rule 33 (expr -> EXCL_MARK expr .) ]
  ! MULTIPLY        [ reduce using rule 33 (expr -> EXCL_MARK expr .) ]
  ! DIVIDE          [ reduce using rule 33 (expr -> EXCL_MARK expr .) ]
  ! PERCENT         [ reduce using rule 33 (expr -> EXCL_MARK expr .) ]
  ! SMALL           [ shift and go to state 53 ]
  ! BIG             [ shift and go to state 54 ]
  ! EQUAL_EQUAL     [ shift and go to state 55 ]
  ! EXCL_EQUAL      [ shift and go to state 56 ]
  ! SMALL_EQUAL     [ shift and go to state 57 ]
  ! BIG_EQUAL       [ shift and go to state 58 ]
  ! PIPE_PIPE       [ shift and go to state 59 ]
  ! AMP_AMP         [ shift and go to state 60 ]


state 69

    (15) defvar -> VAL type . iden
    (49) iden -> . ID

    ID              shift and go to state 7

    iden                           shift and go to state 95

state 70

    (16) expr -> iden LPARANT clist . RPARANT

    RPARANT         shift and go to state 96


state 71

    (42) clist -> empty .

    RPARANT         reduce using rule 42 (clist -> empty .)


state 72

    (43) clist -> expr .
    (44) clist -> expr . COMMA clist
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    RPARANT         reduce using rule 43 (clist -> expr .)
    COMMA           shift and go to state 97
    LBRACKET        shift and go to state 45
    QUEST_MARK      shift and go to state 46
    EQUAL           shift and go to state 47
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    PERCENT         shift and go to state 52
    SMALL           shift and go to state 53
    BIG             shift and go to state 54
    EQUAL_EQUAL     shift and go to state 55
    EXCL_EQUAL      shift and go to state 56
    SMALL_EQUAL     shift and go to state 57
    BIG_EQUAL       shift and go to state 58
    PIPE_PIPE       shift and go to state 59
    AMP_AMP         shift and go to state 60


state 73

    (36) expr -> LPARANT expr RPARANT .

    SEMICOLON       reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    LBRACKET        reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    QUEST_MARK      reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    EQUAL           reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    PLUS            reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    MINUS           reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    MULTIPLY        reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    DIVIDE          reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    PERCENT         reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    SMALL           reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    BIG             reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    EQUAL_EQUAL     reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    EXCL_EQUAL      reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    SMALL_EQUAL     reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    BIG_EQUAL       reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    PIPE_PIPE       reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    AMP_AMP         reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    RPARANT         reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    COMMA           reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    RBRACKET        reduce using rule 36 (expr -> LPARANT expr RPARANT .)
    COLON           reduce using rule 36 (expr -> LPARANT expr RPARANT .)


state 74

    (14) stmt -> COLON body END .

    IF              reduce using rule 14 (stmt -> COLON body END .)
    WHILE           reduce using rule 14 (stmt -> COLON body END .)
    FOREACH         reduce using rule 14 (stmt -> COLON body END .)
    RETURN          reduce using rule 14 (stmt -> COLON body END .)
    COLON           reduce using rule 14 (stmt -> COLON body END .)
    EXCL_MARK       reduce using rule 14 (stmt -> COLON body END .)
    MINUS           reduce using rule 14 (stmt -> COLON body END .)
    PLUS            reduce using rule 14 (stmt -> COLON body END .)
    LPARANT         reduce using rule 14 (stmt -> COLON body END .)
    VAL             reduce using rule 14 (stmt -> COLON body END .)
    ID              reduce using rule 14 (stmt -> COLON body END .)
    NUMBER          reduce using rule 14 (stmt -> COLON body END .)
    END             reduce using rule 14 (stmt -> COLON body END .)
    ELSE            reduce using rule 14 (stmt -> COLON body END .)


state 75

    (17) expr -> expr LBRACKET expr . RBRACKET
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    RBRACKET        shift and go to state 98
    LBRACKET        shift and go to state 45
    QUEST_MARK      shift and go to state 46
    EQUAL           shift and go to state 47
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    PERCENT         shift and go to state 52
    SMALL           shift and go to state 53
    BIG             shift and go to state 54
    EQUAL_EQUAL     shift and go to state 55
    EXCL_EQUAL      shift and go to state 56
    SMALL_EQUAL     shift and go to state 57
    BIG_EQUAL       shift and go to state 58
    PIPE_PIPE       shift and go to state 59
    AMP_AMP         shift and go to state 60


state 76

    (18) expr -> expr QUEST_MARK expr . COLON expr
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    COLON           shift and go to state 99
    LBRACKET        shift and go to state 45
    QUEST_MARK      shift and go to state 46
    EQUAL           shift and go to state 47
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    PERCENT         shift and go to state 52
    SMALL           shift and go to state 53
    BIG             shift and go to state 54
    EQUAL_EQUAL     shift and go to state 55
    EXCL_EQUAL      shift and go to state 56
    SMALL_EQUAL     shift and go to state 57
    BIG_EQUAL       shift and go to state 58
    PIPE_PIPE       shift and go to state 59
    AMP_AMP         shift and go to state 60


state 77

    (19) expr -> expr EQUAL expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 19 (expr -> expr EQUAL expr .)
    QUEST_MARK      reduce using rule 19 (expr -> expr EQUAL expr .)
    EQUAL           reduce using rule 19 (expr -> expr EQUAL expr .)
    SMALL           reduce using rule 19 (expr -> expr EQUAL expr .)
    BIG             reduce using rule 19 (expr -> expr EQUAL expr .)
    EQUAL_EQUAL     reduce using rule 19 (expr -> expr EQUAL expr .)
    EXCL_EQUAL      reduce using rule 19 (expr -> expr EQUAL expr .)
    SMALL_EQUAL     reduce using rule 19 (expr -> expr EQUAL expr .)
    BIG_EQUAL       reduce using rule 19 (expr -> expr EQUAL expr .)
    PIPE_PIPE       reduce using rule 19 (expr -> expr EQUAL expr .)
    AMP_AMP         reduce using rule 19 (expr -> expr EQUAL expr .)
    RPARANT         reduce using rule 19 (expr -> expr EQUAL expr .)
    COMMA           reduce using rule 19 (expr -> expr EQUAL expr .)
    RBRACKET        reduce using rule 19 (expr -> expr EQUAL expr .)
    COLON           reduce using rule 19 (expr -> expr EQUAL expr .)
    LBRACKET        shift and go to state 45
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    PERCENT         shift and go to state 52

  ! LBRACKET        [ reduce using rule 19 (expr -> expr EQUAL expr .) ]
  ! PLUS            [ reduce using rule 19 (expr -> expr EQUAL expr .) ]
  ! MINUS           [ reduce using rule 19 (expr -> expr EQUAL expr .) ]
  ! MULTIPLY        [ reduce using rule 19 (expr -> expr EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 19 (expr -> expr EQUAL expr .) ]
  ! PERCENT         [ reduce using rule 19 (expr -> expr EQUAL expr .) ]
  ! QUEST_MARK      [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 47 ]
  ! SMALL           [ shift and go to state 53 ]
  ! BIG             [ shift and go to state 54 ]
  ! EQUAL_EQUAL     [ shift and go to state 55 ]
  ! EXCL_EQUAL      [ shift and go to state 56 ]
  ! SMALL_EQUAL     [ shift and go to state 57 ]
  ! BIG_EQUAL       [ shift and go to state 58 ]
  ! PIPE_PIPE       [ shift and go to state 59 ]
  ! AMP_AMP         [ shift and go to state 60 ]


state 78

    (20) expr -> expr PLUS expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 20 (expr -> expr PLUS expr .)
    QUEST_MARK      reduce using rule 20 (expr -> expr PLUS expr .)
    EQUAL           reduce using rule 20 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 20 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 20 (expr -> expr PLUS expr .)
    SMALL           reduce using rule 20 (expr -> expr PLUS expr .)
    BIG             reduce using rule 20 (expr -> expr PLUS expr .)
    EQUAL_EQUAL     reduce using rule 20 (expr -> expr PLUS expr .)
    EXCL_EQUAL      reduce using rule 20 (expr -> expr PLUS expr .)
    SMALL_EQUAL     reduce using rule 20 (expr -> expr PLUS expr .)
    BIG_EQUAL       reduce using rule 20 (expr -> expr PLUS expr .)
    PIPE_PIPE       reduce using rule 20 (expr -> expr PLUS expr .)
    AMP_AMP         reduce using rule 20 (expr -> expr PLUS expr .)
    RPARANT         reduce using rule 20 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 20 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 20 (expr -> expr PLUS expr .)
    COLON           reduce using rule 20 (expr -> expr PLUS expr .)
    LBRACKET        shift and go to state 45
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    PERCENT         shift and go to state 52

  ! LBRACKET        [ reduce using rule 20 (expr -> expr PLUS expr .) ]
  ! MULTIPLY        [ reduce using rule 20 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 20 (expr -> expr PLUS expr .) ]
  ! PERCENT         [ reduce using rule 20 (expr -> expr PLUS expr .) ]
  ! QUEST_MARK      [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 47 ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! SMALL           [ shift and go to state 53 ]
  ! BIG             [ shift and go to state 54 ]
  ! EQUAL_EQUAL     [ shift and go to state 55 ]
  ! EXCL_EQUAL      [ shift and go to state 56 ]
  ! SMALL_EQUAL     [ shift and go to state 57 ]
  ! BIG_EQUAL       [ shift and go to state 58 ]
  ! PIPE_PIPE       [ shift and go to state 59 ]
  ! AMP_AMP         [ shift and go to state 60 ]


state 79

    (21) expr -> expr MINUS expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 21 (expr -> expr MINUS expr .)
    QUEST_MARK      reduce using rule 21 (expr -> expr MINUS expr .)
    EQUAL           reduce using rule 21 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 21 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 21 (expr -> expr MINUS expr .)
    SMALL           reduce using rule 21 (expr -> expr MINUS expr .)
    BIG             reduce using rule 21 (expr -> expr MINUS expr .)
    EQUAL_EQUAL     reduce using rule 21 (expr -> expr MINUS expr .)
    EXCL_EQUAL      reduce using rule 21 (expr -> expr MINUS expr .)
    SMALL_EQUAL     reduce using rule 21 (expr -> expr MINUS expr .)
    BIG_EQUAL       reduce using rule 21 (expr -> expr MINUS expr .)
    PIPE_PIPE       reduce using rule 21 (expr -> expr MINUS expr .)
    AMP_AMP         reduce using rule 21 (expr -> expr MINUS expr .)
    RPARANT         reduce using rule 21 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 21 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 21 (expr -> expr MINUS expr .)
    COLON           reduce using rule 21 (expr -> expr MINUS expr .)
    LBRACKET        shift and go to state 45
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    PERCENT         shift and go to state 52

  ! LBRACKET        [ reduce using rule 21 (expr -> expr MINUS expr .) ]
  ! MULTIPLY        [ reduce using rule 21 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 21 (expr -> expr MINUS expr .) ]
  ! PERCENT         [ reduce using rule 21 (expr -> expr MINUS expr .) ]
  ! QUEST_MARK      [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 47 ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! SMALL           [ shift and go to state 53 ]
  ! BIG             [ shift and go to state 54 ]
  ! EQUAL_EQUAL     [ shift and go to state 55 ]
  ! EXCL_EQUAL      [ shift and go to state 56 ]
  ! SMALL_EQUAL     [ shift and go to state 57 ]
  ! BIG_EQUAL       [ shift and go to state 58 ]
  ! PIPE_PIPE       [ shift and go to state 59 ]
  ! AMP_AMP         [ shift and go to state 60 ]


state 80

    (22) expr -> expr MULTIPLY expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 22 (expr -> expr MULTIPLY expr .)
    QUEST_MARK      reduce using rule 22 (expr -> expr MULTIPLY expr .)
    EQUAL           reduce using rule 22 (expr -> expr MULTIPLY expr .)
    PLUS            reduce using rule 22 (expr -> expr MULTIPLY expr .)
    MINUS           reduce using rule 22 (expr -> expr MULTIPLY expr .)
    MULTIPLY        reduce using rule 22 (expr -> expr MULTIPLY expr .)
    DIVIDE          reduce using rule 22 (expr -> expr MULTIPLY expr .)
    PERCENT         reduce using rule 22 (expr -> expr MULTIPLY expr .)
    SMALL           reduce using rule 22 (expr -> expr MULTIPLY expr .)
    BIG             reduce using rule 22 (expr -> expr MULTIPLY expr .)
    EQUAL_EQUAL     reduce using rule 22 (expr -> expr MULTIPLY expr .)
    EXCL_EQUAL      reduce using rule 22 (expr -> expr MULTIPLY expr .)
    SMALL_EQUAL     reduce using rule 22 (expr -> expr MULTIPLY expr .)
    BIG_EQUAL       reduce using rule 22 (expr -> expr MULTIPLY expr .)
    PIPE_PIPE       reduce using rule 22 (expr -> expr MULTIPLY expr .)
    AMP_AMP         reduce using rule 22 (expr -> expr MULTIPLY expr .)
    RPARANT         reduce using rule 22 (expr -> expr MULTIPLY expr .)
    COMMA           reduce using rule 22 (expr -> expr MULTIPLY expr .)
    RBRACKET        reduce using rule 22 (expr -> expr MULTIPLY expr .)
    COLON           reduce using rule 22 (expr -> expr MULTIPLY expr .)
    LBRACKET        shift and go to state 45

  ! LBRACKET        [ reduce using rule 22 (expr -> expr MULTIPLY expr .) ]
  ! QUEST_MARK      [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 47 ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! MULTIPLY        [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! PERCENT         [ shift and go to state 52 ]
  ! SMALL           [ shift and go to state 53 ]
  ! BIG             [ shift and go to state 54 ]
  ! EQUAL_EQUAL     [ shift and go to state 55 ]
  ! EXCL_EQUAL      [ shift and go to state 56 ]
  ! SMALL_EQUAL     [ shift and go to state 57 ]
  ! BIG_EQUAL       [ shift and go to state 58 ]
  ! PIPE_PIPE       [ shift and go to state 59 ]
  ! AMP_AMP         [ shift and go to state 60 ]


state 81

    (23) expr -> expr DIVIDE expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 23 (expr -> expr DIVIDE expr .)
    QUEST_MARK      reduce using rule 23 (expr -> expr DIVIDE expr .)
    EQUAL           reduce using rule 23 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 23 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 23 (expr -> expr DIVIDE expr .)
    MULTIPLY        reduce using rule 23 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 23 (expr -> expr DIVIDE expr .)
    PERCENT         reduce using rule 23 (expr -> expr DIVIDE expr .)
    SMALL           reduce using rule 23 (expr -> expr DIVIDE expr .)
    BIG             reduce using rule 23 (expr -> expr DIVIDE expr .)
    EQUAL_EQUAL     reduce using rule 23 (expr -> expr DIVIDE expr .)
    EXCL_EQUAL      reduce using rule 23 (expr -> expr DIVIDE expr .)
    SMALL_EQUAL     reduce using rule 23 (expr -> expr DIVIDE expr .)
    BIG_EQUAL       reduce using rule 23 (expr -> expr DIVIDE expr .)
    PIPE_PIPE       reduce using rule 23 (expr -> expr DIVIDE expr .)
    AMP_AMP         reduce using rule 23 (expr -> expr DIVIDE expr .)
    RPARANT         reduce using rule 23 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 23 (expr -> expr DIVIDE expr .)
    RBRACKET        reduce using rule 23 (expr -> expr DIVIDE expr .)
    COLON           reduce using rule 23 (expr -> expr DIVIDE expr .)
    LBRACKET        shift and go to state 45

  ! LBRACKET        [ reduce using rule 23 (expr -> expr DIVIDE expr .) ]
  ! QUEST_MARK      [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 47 ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! MULTIPLY        [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! PERCENT         [ shift and go to state 52 ]
  ! SMALL           [ shift and go to state 53 ]
  ! BIG             [ shift and go to state 54 ]
  ! EQUAL_EQUAL     [ shift and go to state 55 ]
  ! EXCL_EQUAL      [ shift and go to state 56 ]
  ! SMALL_EQUAL     [ shift and go to state 57 ]
  ! BIG_EQUAL       [ shift and go to state 58 ]
  ! PIPE_PIPE       [ shift and go to state 59 ]
  ! AMP_AMP         [ shift and go to state 60 ]


state 82

    (24) expr -> expr PERCENT expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 24 (expr -> expr PERCENT expr .)
    QUEST_MARK      reduce using rule 24 (expr -> expr PERCENT expr .)
    EQUAL           reduce using rule 24 (expr -> expr PERCENT expr .)
    PLUS            reduce using rule 24 (expr -> expr PERCENT expr .)
    MINUS           reduce using rule 24 (expr -> expr PERCENT expr .)
    MULTIPLY        reduce using rule 24 (expr -> expr PERCENT expr .)
    DIVIDE          reduce using rule 24 (expr -> expr PERCENT expr .)
    PERCENT         reduce using rule 24 (expr -> expr PERCENT expr .)
    SMALL           reduce using rule 24 (expr -> expr PERCENT expr .)
    BIG             reduce using rule 24 (expr -> expr PERCENT expr .)
    EQUAL_EQUAL     reduce using rule 24 (expr -> expr PERCENT expr .)
    EXCL_EQUAL      reduce using rule 24 (expr -> expr PERCENT expr .)
    SMALL_EQUAL     reduce using rule 24 (expr -> expr PERCENT expr .)
    BIG_EQUAL       reduce using rule 24 (expr -> expr PERCENT expr .)
    PIPE_PIPE       reduce using rule 24 (expr -> expr PERCENT expr .)
    AMP_AMP         reduce using rule 24 (expr -> expr PERCENT expr .)
    RPARANT         reduce using rule 24 (expr -> expr PERCENT expr .)
    COMMA           reduce using rule 24 (expr -> expr PERCENT expr .)
    RBRACKET        reduce using rule 24 (expr -> expr PERCENT expr .)
    COLON           reduce using rule 24 (expr -> expr PERCENT expr .)
    LBRACKET        shift and go to state 45

  ! LBRACKET        [ reduce using rule 24 (expr -> expr PERCENT expr .) ]
  ! QUEST_MARK      [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 47 ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! MULTIPLY        [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! PERCENT         [ shift and go to state 52 ]
  ! SMALL           [ shift and go to state 53 ]
  ! BIG             [ shift and go to state 54 ]
  ! EQUAL_EQUAL     [ shift and go to state 55 ]
  ! EXCL_EQUAL      [ shift and go to state 56 ]
  ! SMALL_EQUAL     [ shift and go to state 57 ]
  ! BIG_EQUAL       [ shift and go to state 58 ]
  ! PIPE_PIPE       [ shift and go to state 59 ]
  ! AMP_AMP         [ shift and go to state 60 ]


state 83

    (25) expr -> expr SMALL expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 25 (expr -> expr SMALL expr .)
    SMALL           reduce using rule 25 (expr -> expr SMALL expr .)
    BIG             reduce using rule 25 (expr -> expr SMALL expr .)
    EQUAL_EQUAL     reduce using rule 25 (expr -> expr SMALL expr .)
    EXCL_EQUAL      reduce using rule 25 (expr -> expr SMALL expr .)
    SMALL_EQUAL     reduce using rule 25 (expr -> expr SMALL expr .)
    BIG_EQUAL       reduce using rule 25 (expr -> expr SMALL expr .)
    PIPE_PIPE       reduce using rule 25 (expr -> expr SMALL expr .)
    AMP_AMP         reduce using rule 25 (expr -> expr SMALL expr .)
    RPARANT         reduce using rule 25 (expr -> expr SMALL expr .)
    COMMA           reduce using rule 25 (expr -> expr SMALL expr .)
    RBRACKET        reduce using rule 25 (expr -> expr SMALL expr .)
    COLON           reduce using rule 25 (expr -> expr SMALL expr .)
    LBRACKET        shift and go to state 45
    QUEST_MARK      shift and go to state 46
    EQUAL           shift and go to state 47
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    PERCENT         shift and go to state 52

  ! LBRACKET        [ reduce using rule 25 (expr -> expr SMALL expr .) ]
  ! QUEST_MARK      [ reduce using rule 25 (expr -> expr SMALL expr .) ]
  ! EQUAL           [ reduce using rule 25 (expr -> expr SMALL expr .) ]
  ! PLUS            [ reduce using rule 25 (expr -> expr SMALL expr .) ]
  ! MINUS           [ reduce using rule 25 (expr -> expr SMALL expr .) ]
  ! MULTIPLY        [ reduce using rule 25 (expr -> expr SMALL expr .) ]
  ! DIVIDE          [ reduce using rule 25 (expr -> expr SMALL expr .) ]
  ! PERCENT         [ reduce using rule 25 (expr -> expr SMALL expr .) ]
  ! SMALL           [ shift and go to state 53 ]
  ! BIG             [ shift and go to state 54 ]
  ! EQUAL_EQUAL     [ shift and go to state 55 ]
  ! EXCL_EQUAL      [ shift and go to state 56 ]
  ! SMALL_EQUAL     [ shift and go to state 57 ]
  ! BIG_EQUAL       [ shift and go to state 58 ]
  ! PIPE_PIPE       [ shift and go to state 59 ]
  ! AMP_AMP         [ shift and go to state 60 ]


state 84

    (26) expr -> expr BIG expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 26 (expr -> expr BIG expr .)
    SMALL           reduce using rule 26 (expr -> expr BIG expr .)
    BIG             reduce using rule 26 (expr -> expr BIG expr .)
    EQUAL_EQUAL     reduce using rule 26 (expr -> expr BIG expr .)
    EXCL_EQUAL      reduce using rule 26 (expr -> expr BIG expr .)
    SMALL_EQUAL     reduce using rule 26 (expr -> expr BIG expr .)
    BIG_EQUAL       reduce using rule 26 (expr -> expr BIG expr .)
    PIPE_PIPE       reduce using rule 26 (expr -> expr BIG expr .)
    AMP_AMP         reduce using rule 26 (expr -> expr BIG expr .)
    RPARANT         reduce using rule 26 (expr -> expr BIG expr .)
    COMMA           reduce using rule 26 (expr -> expr BIG expr .)
    RBRACKET        reduce using rule 26 (expr -> expr BIG expr .)
    COLON           reduce using rule 26 (expr -> expr BIG expr .)
    LBRACKET        shift and go to state 45
    QUEST_MARK      shift and go to state 46
    EQUAL           shift and go to state 47
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    PERCENT         shift and go to state 52

  ! LBRACKET        [ reduce using rule 26 (expr -> expr BIG expr .) ]
  ! QUEST_MARK      [ reduce using rule 26 (expr -> expr BIG expr .) ]
  ! EQUAL           [ reduce using rule 26 (expr -> expr BIG expr .) ]
  ! PLUS            [ reduce using rule 26 (expr -> expr BIG expr .) ]
  ! MINUS           [ reduce using rule 26 (expr -> expr BIG expr .) ]
  ! MULTIPLY        [ reduce using rule 26 (expr -> expr BIG expr .) ]
  ! DIVIDE          [ reduce using rule 26 (expr -> expr BIG expr .) ]
  ! PERCENT         [ reduce using rule 26 (expr -> expr BIG expr .) ]
  ! SMALL           [ shift and go to state 53 ]
  ! BIG             [ shift and go to state 54 ]
  ! EQUAL_EQUAL     [ shift and go to state 55 ]
  ! EXCL_EQUAL      [ shift and go to state 56 ]
  ! SMALL_EQUAL     [ shift and go to state 57 ]
  ! BIG_EQUAL       [ shift and go to state 58 ]
  ! PIPE_PIPE       [ shift and go to state 59 ]
  ! AMP_AMP         [ shift and go to state 60 ]


state 85

    (27) expr -> expr EQUAL_EQUAL expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .)
    SMALL           reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .)
    BIG             reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .)
    EQUAL_EQUAL     reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .)
    EXCL_EQUAL      reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .)
    SMALL_EQUAL     reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .)
    BIG_EQUAL       reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .)
    PIPE_PIPE       reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .)
    AMP_AMP         reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .)
    RPARANT         reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .)
    COMMA           reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .)
    RBRACKET        reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .)
    COLON           reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .)
    LBRACKET        shift and go to state 45
    QUEST_MARK      shift and go to state 46
    EQUAL           shift and go to state 47
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    PERCENT         shift and go to state 52

  ! LBRACKET        [ reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .) ]
  ! QUEST_MARK      [ reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .) ]
  ! EQUAL           [ reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .) ]
  ! MULTIPLY        [ reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .) ]
  ! PERCENT         [ reduce using rule 27 (expr -> expr EQUAL_EQUAL expr .) ]
  ! SMALL           [ shift and go to state 53 ]
  ! BIG             [ shift and go to state 54 ]
  ! EQUAL_EQUAL     [ shift and go to state 55 ]
  ! EXCL_EQUAL      [ shift and go to state 56 ]
  ! SMALL_EQUAL     [ shift and go to state 57 ]
  ! BIG_EQUAL       [ shift and go to state 58 ]
  ! PIPE_PIPE       [ shift and go to state 59 ]
  ! AMP_AMP         [ shift and go to state 60 ]


state 86

    (28) expr -> expr EXCL_EQUAL expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 28 (expr -> expr EXCL_EQUAL expr .)
    SMALL           reduce using rule 28 (expr -> expr EXCL_EQUAL expr .)
    BIG             reduce using rule 28 (expr -> expr EXCL_EQUAL expr .)
    EQUAL_EQUAL     reduce using rule 28 (expr -> expr EXCL_EQUAL expr .)
    EXCL_EQUAL      reduce using rule 28 (expr -> expr EXCL_EQUAL expr .)
    SMALL_EQUAL     reduce using rule 28 (expr -> expr EXCL_EQUAL expr .)
    BIG_EQUAL       reduce using rule 28 (expr -> expr EXCL_EQUAL expr .)
    PIPE_PIPE       reduce using rule 28 (expr -> expr EXCL_EQUAL expr .)
    AMP_AMP         reduce using rule 28 (expr -> expr EXCL_EQUAL expr .)
    RPARANT         reduce using rule 28 (expr -> expr EXCL_EQUAL expr .)
    COMMA           reduce using rule 28 (expr -> expr EXCL_EQUAL expr .)
    RBRACKET        reduce using rule 28 (expr -> expr EXCL_EQUAL expr .)
    COLON           reduce using rule 28 (expr -> expr EXCL_EQUAL expr .)
    LBRACKET        shift and go to state 45
    QUEST_MARK      shift and go to state 46
    EQUAL           shift and go to state 47
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    PERCENT         shift and go to state 52

  ! LBRACKET        [ reduce using rule 28 (expr -> expr EXCL_EQUAL expr .) ]
  ! QUEST_MARK      [ reduce using rule 28 (expr -> expr EXCL_EQUAL expr .) ]
  ! EQUAL           [ reduce using rule 28 (expr -> expr EXCL_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 28 (expr -> expr EXCL_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 28 (expr -> expr EXCL_EQUAL expr .) ]
  ! MULTIPLY        [ reduce using rule 28 (expr -> expr EXCL_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 28 (expr -> expr EXCL_EQUAL expr .) ]
  ! PERCENT         [ reduce using rule 28 (expr -> expr EXCL_EQUAL expr .) ]
  ! SMALL           [ shift and go to state 53 ]
  ! BIG             [ shift and go to state 54 ]
  ! EQUAL_EQUAL     [ shift and go to state 55 ]
  ! EXCL_EQUAL      [ shift and go to state 56 ]
  ! SMALL_EQUAL     [ shift and go to state 57 ]
  ! BIG_EQUAL       [ shift and go to state 58 ]
  ! PIPE_PIPE       [ shift and go to state 59 ]
  ! AMP_AMP         [ shift and go to state 60 ]


state 87

    (29) expr -> expr SMALL_EQUAL expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 29 (expr -> expr SMALL_EQUAL expr .)
    SMALL           reduce using rule 29 (expr -> expr SMALL_EQUAL expr .)
    BIG             reduce using rule 29 (expr -> expr SMALL_EQUAL expr .)
    EQUAL_EQUAL     reduce using rule 29 (expr -> expr SMALL_EQUAL expr .)
    EXCL_EQUAL      reduce using rule 29 (expr -> expr SMALL_EQUAL expr .)
    SMALL_EQUAL     reduce using rule 29 (expr -> expr SMALL_EQUAL expr .)
    BIG_EQUAL       reduce using rule 29 (expr -> expr SMALL_EQUAL expr .)
    PIPE_PIPE       reduce using rule 29 (expr -> expr SMALL_EQUAL expr .)
    AMP_AMP         reduce using rule 29 (expr -> expr SMALL_EQUAL expr .)
    RPARANT         reduce using rule 29 (expr -> expr SMALL_EQUAL expr .)
    COMMA           reduce using rule 29 (expr -> expr SMALL_EQUAL expr .)
    RBRACKET        reduce using rule 29 (expr -> expr SMALL_EQUAL expr .)
    COLON           reduce using rule 29 (expr -> expr SMALL_EQUAL expr .)
    LBRACKET        shift and go to state 45
    QUEST_MARK      shift and go to state 46
    EQUAL           shift and go to state 47
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    PERCENT         shift and go to state 52

  ! LBRACKET        [ reduce using rule 29 (expr -> expr SMALL_EQUAL expr .) ]
  ! QUEST_MARK      [ reduce using rule 29 (expr -> expr SMALL_EQUAL expr .) ]
  ! EQUAL           [ reduce using rule 29 (expr -> expr SMALL_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 29 (expr -> expr SMALL_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 29 (expr -> expr SMALL_EQUAL expr .) ]
  ! MULTIPLY        [ reduce using rule 29 (expr -> expr SMALL_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 29 (expr -> expr SMALL_EQUAL expr .) ]
  ! PERCENT         [ reduce using rule 29 (expr -> expr SMALL_EQUAL expr .) ]
  ! SMALL           [ shift and go to state 53 ]
  ! BIG             [ shift and go to state 54 ]
  ! EQUAL_EQUAL     [ shift and go to state 55 ]
  ! EXCL_EQUAL      [ shift and go to state 56 ]
  ! SMALL_EQUAL     [ shift and go to state 57 ]
  ! BIG_EQUAL       [ shift and go to state 58 ]
  ! PIPE_PIPE       [ shift and go to state 59 ]
  ! AMP_AMP         [ shift and go to state 60 ]


state 88

    (30) expr -> expr BIG_EQUAL expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 30 (expr -> expr BIG_EQUAL expr .)
    SMALL           reduce using rule 30 (expr -> expr BIG_EQUAL expr .)
    BIG             reduce using rule 30 (expr -> expr BIG_EQUAL expr .)
    EQUAL_EQUAL     reduce using rule 30 (expr -> expr BIG_EQUAL expr .)
    EXCL_EQUAL      reduce using rule 30 (expr -> expr BIG_EQUAL expr .)
    SMALL_EQUAL     reduce using rule 30 (expr -> expr BIG_EQUAL expr .)
    BIG_EQUAL       reduce using rule 30 (expr -> expr BIG_EQUAL expr .)
    PIPE_PIPE       reduce using rule 30 (expr -> expr BIG_EQUAL expr .)
    AMP_AMP         reduce using rule 30 (expr -> expr BIG_EQUAL expr .)
    RPARANT         reduce using rule 30 (expr -> expr BIG_EQUAL expr .)
    COMMA           reduce using rule 30 (expr -> expr BIG_EQUAL expr .)
    RBRACKET        reduce using rule 30 (expr -> expr BIG_EQUAL expr .)
    COLON           reduce using rule 30 (expr -> expr BIG_EQUAL expr .)
    LBRACKET        shift and go to state 45
    QUEST_MARK      shift and go to state 46
    EQUAL           shift and go to state 47
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    PERCENT         shift and go to state 52

  ! LBRACKET        [ reduce using rule 30 (expr -> expr BIG_EQUAL expr .) ]
  ! QUEST_MARK      [ reduce using rule 30 (expr -> expr BIG_EQUAL expr .) ]
  ! EQUAL           [ reduce using rule 30 (expr -> expr BIG_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 30 (expr -> expr BIG_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 30 (expr -> expr BIG_EQUAL expr .) ]
  ! MULTIPLY        [ reduce using rule 30 (expr -> expr BIG_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 30 (expr -> expr BIG_EQUAL expr .) ]
  ! PERCENT         [ reduce using rule 30 (expr -> expr BIG_EQUAL expr .) ]
  ! SMALL           [ shift and go to state 53 ]
  ! BIG             [ shift and go to state 54 ]
  ! EQUAL_EQUAL     [ shift and go to state 55 ]
  ! EXCL_EQUAL      [ shift and go to state 56 ]
  ! SMALL_EQUAL     [ shift and go to state 57 ]
  ! BIG_EQUAL       [ shift and go to state 58 ]
  ! PIPE_PIPE       [ shift and go to state 59 ]
  ! AMP_AMP         [ shift and go to state 60 ]


state 89

    (31) expr -> expr PIPE_PIPE expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 31 (expr -> expr PIPE_PIPE expr .)
    SMALL           reduce using rule 31 (expr -> expr PIPE_PIPE expr .)
    BIG             reduce using rule 31 (expr -> expr PIPE_PIPE expr .)
    EQUAL_EQUAL     reduce using rule 31 (expr -> expr PIPE_PIPE expr .)
    EXCL_EQUAL      reduce using rule 31 (expr -> expr PIPE_PIPE expr .)
    SMALL_EQUAL     reduce using rule 31 (expr -> expr PIPE_PIPE expr .)
    BIG_EQUAL       reduce using rule 31 (expr -> expr PIPE_PIPE expr .)
    PIPE_PIPE       reduce using rule 31 (expr -> expr PIPE_PIPE expr .)
    AMP_AMP         reduce using rule 31 (expr -> expr PIPE_PIPE expr .)
    RPARANT         reduce using rule 31 (expr -> expr PIPE_PIPE expr .)
    COMMA           reduce using rule 31 (expr -> expr PIPE_PIPE expr .)
    RBRACKET        reduce using rule 31 (expr -> expr PIPE_PIPE expr .)
    COLON           reduce using rule 31 (expr -> expr PIPE_PIPE expr .)
    LBRACKET        shift and go to state 45
    QUEST_MARK      shift and go to state 46
    EQUAL           shift and go to state 47
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    PERCENT         shift and go to state 52

  ! LBRACKET        [ reduce using rule 31 (expr -> expr PIPE_PIPE expr .) ]
  ! QUEST_MARK      [ reduce using rule 31 (expr -> expr PIPE_PIPE expr .) ]
  ! EQUAL           [ reduce using rule 31 (expr -> expr PIPE_PIPE expr .) ]
  ! PLUS            [ reduce using rule 31 (expr -> expr PIPE_PIPE expr .) ]
  ! MINUS           [ reduce using rule 31 (expr -> expr PIPE_PIPE expr .) ]
  ! MULTIPLY        [ reduce using rule 31 (expr -> expr PIPE_PIPE expr .) ]
  ! DIVIDE          [ reduce using rule 31 (expr -> expr PIPE_PIPE expr .) ]
  ! PERCENT         [ reduce using rule 31 (expr -> expr PIPE_PIPE expr .) ]
  ! SMALL           [ shift and go to state 53 ]
  ! BIG             [ shift and go to state 54 ]
  ! EQUAL_EQUAL     [ shift and go to state 55 ]
  ! EXCL_EQUAL      [ shift and go to state 56 ]
  ! SMALL_EQUAL     [ shift and go to state 57 ]
  ! BIG_EQUAL       [ shift and go to state 58 ]
  ! PIPE_PIPE       [ shift and go to state 59 ]
  ! AMP_AMP         [ shift and go to state 60 ]


state 90

    (32) expr -> expr AMP_AMP expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 32 (expr -> expr AMP_AMP expr .)
    SMALL           reduce using rule 32 (expr -> expr AMP_AMP expr .)
    BIG             reduce using rule 32 (expr -> expr AMP_AMP expr .)
    EQUAL_EQUAL     reduce using rule 32 (expr -> expr AMP_AMP expr .)
    EXCL_EQUAL      reduce using rule 32 (expr -> expr AMP_AMP expr .)
    SMALL_EQUAL     reduce using rule 32 (expr -> expr AMP_AMP expr .)
    BIG_EQUAL       reduce using rule 32 (expr -> expr AMP_AMP expr .)
    PIPE_PIPE       reduce using rule 32 (expr -> expr AMP_AMP expr .)
    AMP_AMP         reduce using rule 32 (expr -> expr AMP_AMP expr .)
    RPARANT         reduce using rule 32 (expr -> expr AMP_AMP expr .)
    COMMA           reduce using rule 32 (expr -> expr AMP_AMP expr .)
    RBRACKET        reduce using rule 32 (expr -> expr AMP_AMP expr .)
    COLON           reduce using rule 32 (expr -> expr AMP_AMP expr .)
    LBRACKET        shift and go to state 45
    QUEST_MARK      shift and go to state 46
    EQUAL           shift and go to state 47
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    PERCENT         shift and go to state 52

  ! LBRACKET        [ reduce using rule 32 (expr -> expr AMP_AMP expr .) ]
  ! QUEST_MARK      [ reduce using rule 32 (expr -> expr AMP_AMP expr .) ]
  ! EQUAL           [ reduce using rule 32 (expr -> expr AMP_AMP expr .) ]
  ! PLUS            [ reduce using rule 32 (expr -> expr AMP_AMP expr .) ]
  ! MINUS           [ reduce using rule 32 (expr -> expr AMP_AMP expr .) ]
  ! MULTIPLY        [ reduce using rule 32 (expr -> expr AMP_AMP expr .) ]
  ! DIVIDE          [ reduce using rule 32 (expr -> expr AMP_AMP expr .) ]
  ! PERCENT         [ reduce using rule 32 (expr -> expr AMP_AMP expr .) ]
  ! SMALL           [ shift and go to state 53 ]
  ! BIG             [ shift and go to state 54 ]
  ! EQUAL_EQUAL     [ shift and go to state 55 ]
  ! EXCL_EQUAL      [ shift and go to state 56 ]
  ! SMALL_EQUAL     [ shift and go to state 57 ]
  ! BIG_EQUAL       [ shift and go to state 58 ]
  ! PIPE_PIPE       [ shift and go to state 59 ]
  ! AMP_AMP         [ shift and go to state 60 ]


state 91

    (9) stmt -> IF LPARANT expr . RPARANT stmt
    (10) stmt -> IF LPARANT expr . RPARANT stmt ELSE stmt
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    RPARANT         shift and go to state 100
    LBRACKET        shift and go to state 45
    QUEST_MARK      shift and go to state 46
    EQUAL           shift and go to state 47
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    PERCENT         shift and go to state 52
    SMALL           shift and go to state 53
    BIG             shift and go to state 54
    EQUAL_EQUAL     shift and go to state 55
    EXCL_EQUAL      shift and go to state 56
    SMALL_EQUAL     shift and go to state 57
    BIG_EQUAL       shift and go to state 58
    PIPE_PIPE       shift and go to state 59
    AMP_AMP         shift and go to state 60


state 92

    (11) stmt -> WHILE LPARANT expr . RPARANT DO stmt
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    RPARANT         shift and go to state 101
    LBRACKET        shift and go to state 45
    QUEST_MARK      shift and go to state 46
    EQUAL           shift and go to state 47
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    PERCENT         shift and go to state 52
    SMALL           shift and go to state 53
    BIG             shift and go to state 54
    EQUAL_EQUAL     shift and go to state 55
    EXCL_EQUAL      shift and go to state 56
    SMALL_EQUAL     shift and go to state 57
    BIG_EQUAL       shift and go to state 58
    PIPE_PIPE       shift and go to state 59
    AMP_AMP         shift and go to state 60


state 93

    (12) stmt -> FOREACH LPARANT iden . OF expr RPARANT stmt

    OF              shift and go to state 102


state 94

    (13) stmt -> RETURN expr SEMICOLON .

    IF              reduce using rule 13 (stmt -> RETURN expr SEMICOLON .)
    WHILE           reduce using rule 13 (stmt -> RETURN expr SEMICOLON .)
    FOREACH         reduce using rule 13 (stmt -> RETURN expr SEMICOLON .)
    RETURN          reduce using rule 13 (stmt -> RETURN expr SEMICOLON .)
    COLON           reduce using rule 13 (stmt -> RETURN expr SEMICOLON .)
    EXCL_MARK       reduce using rule 13 (stmt -> RETURN expr SEMICOLON .)
    MINUS           reduce using rule 13 (stmt -> RETURN expr SEMICOLON .)
    PLUS            reduce using rule 13 (stmt -> RETURN expr SEMICOLON .)
    LPARANT         reduce using rule 13 (stmt -> RETURN expr SEMICOLON .)
    VAL             reduce using rule 13 (stmt -> RETURN expr SEMICOLON .)
    ID              reduce using rule 13 (stmt -> RETURN expr SEMICOLON .)
    NUMBER          reduce using rule 13 (stmt -> RETURN expr SEMICOLON .)
    END             reduce using rule 13 (stmt -> RETURN expr SEMICOLON .)
    ELSE            reduce using rule 13 (stmt -> RETURN expr SEMICOLON .)


state 95

    (15) defvar -> VAL type iden .

    SEMICOLON       reduce using rule 15 (defvar -> VAL type iden .)


state 96

    (16) expr -> iden LPARANT clist RPARANT .

    SEMICOLON       reduce using rule 16 (expr -> iden LPARANT clist RPARANT .)
    LBRACKET        reduce using rule 16 (expr -> iden LPARANT clist RPARANT .)
    QUEST_MARK      reduce using rule 16 (expr -> iden LPARANT clist RPARANT .)
    EQUAL           reduce using rule 16 (expr -> iden LPARANT clist RPARANT .)
    PLUS            reduce using rule 16 (expr -> iden LPARANT clist RPARANT .)
    MINUS           reduce using rule 16 (expr -> iden LPARANT clist RPARANT .)
    MULTIPLY        reduce using rule 16 (expr -> iden LPARANT clist RPARANT .)
    DIVIDE          reduce using rule 16 (expr -> iden LPARANT clist RPARANT .)
    PERCENT         reduce using rule 16 (expr -> iden LPARANT clist RPARANT .)
    SMALL           reduce using rule 16 (expr -> iden LPARANT clist RPARANT .)
    BIG             reduce using rule 16 (expr -> iden LPARANT clist RPARANT .)
    EQUAL_EQUAL     reduce using rule 16 (expr -> iden LPARANT clist RPARANT .)
    EXCL_EQUAL      reduce using rule 16 (expr -> iden LPARANT clist RPARANT .)
    SMALL_EQUAL     reduce using rule 16 (expr -> iden LPARANT clist RPARANT .)
    BIG_EQUAL       reduce using rule 16 (expr -> iden LPARANT clist RPARANT .)
    PIPE_PIPE       reduce using rule 16 (expr -> iden LPARANT clist RPARANT .)
    AMP_AMP         reduce using rule 16 (expr -> iden LPARANT clist RPARANT .)
    RPARANT         reduce using rule 16 (expr -> iden LPARANT clist RPARANT .)
    COMMA           reduce using rule 16 (expr -> iden LPARANT clist RPARANT .)
    RBRACKET        reduce using rule 16 (expr -> iden LPARANT clist RPARANT .)
    COLON           reduce using rule 16 (expr -> iden LPARANT clist RPARANT .)


state 97

    (44) clist -> expr COMMA . clist
    (42) clist -> . empty
    (43) clist -> . expr
    (44) clist -> . expr COMMA clist
    (50) empty -> .
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (49) iden -> . ID
    (48) num -> . NUMBER

    RPARANT         reduce using rule 50 (empty -> .)
    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 72
    clist                          shift and go to state 103
    empty                          shift and go to state 71
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 98

    (17) expr -> expr LBRACKET expr RBRACKET .

    SEMICOLON       reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    LBRACKET        reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    QUEST_MARK      reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    EQUAL           reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    MULTIPLY        reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    PERCENT         reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    SMALL           reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    BIG             reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    EQUAL_EQUAL     reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    EXCL_EQUAL      reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    SMALL_EQUAL     reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    BIG_EQUAL       reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    PIPE_PIPE       reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    AMP_AMP         reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    RPARANT         reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)
    COLON           reduce using rule 17 (expr -> expr LBRACKET expr RBRACKET .)


state 99

    (18) expr -> expr QUEST_MARK expr COLON . expr
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (49) iden -> . ID
    (48) num -> . NUMBER

    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 104
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 100

    (9) stmt -> IF LPARANT expr RPARANT . stmt
    (10) stmt -> IF LPARANT expr RPARANT . stmt ELSE stmt
    (7) stmt -> . expr SEMICOLON
    (8) stmt -> . defvar SEMICOLON
    (9) stmt -> . IF LPARANT expr RPARANT stmt
    (10) stmt -> . IF LPARANT expr RPARANT stmt ELSE stmt
    (11) stmt -> . WHILE LPARANT expr RPARANT DO stmt
    (12) stmt -> . FOREACH LPARANT iden OF expr RPARANT stmt
    (13) stmt -> . RETURN expr SEMICOLON
    (14) stmt -> . COLON body END
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (15) defvar -> . VAL type iden
    (49) iden -> . ID
    (48) num -> . NUMBER

    IF              shift and go to state 29
    WHILE           shift and go to state 30
    FOREACH         shift and go to state 31
    RETURN          shift and go to state 32
    COLON           shift and go to state 24
    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    VAL             shift and go to state 37
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 27
    stmt                           shift and go to state 105
    defvar                         shift and go to state 28
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 101

    (11) stmt -> WHILE LPARANT expr RPARANT . DO stmt

    DO              shift and go to state 106


state 102

    (12) stmt -> FOREACH LPARANT iden OF . expr RPARANT stmt
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (49) iden -> . ID
    (48) num -> . NUMBER

    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    iden                           shift and go to state 22
    expr                           shift and go to state 107
    num                            shift and go to state 36

state 103

    (44) clist -> expr COMMA clist .

    RPARANT         reduce using rule 44 (clist -> expr COMMA clist .)


state 104

    (18) expr -> expr QUEST_MARK expr COLON expr .
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    QUEST_MARK      reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    EQUAL           reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    SMALL           reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    BIG             reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    EQUAL_EQUAL     reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    EXCL_EQUAL      reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    SMALL_EQUAL     reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    BIG_EQUAL       reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    PIPE_PIPE       reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    AMP_AMP         reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    RPARANT         reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    COMMA           reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    RBRACKET        reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    COLON           reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .)
    LBRACKET        shift and go to state 45
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    PERCENT         shift and go to state 52

  ! LBRACKET        [ reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .) ]
  ! PLUS            [ reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .) ]
  ! MINUS           [ reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .) ]
  ! MULTIPLY        [ reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .) ]
  ! DIVIDE          [ reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .) ]
  ! PERCENT         [ reduce using rule 18 (expr -> expr QUEST_MARK expr COLON expr .) ]
  ! QUEST_MARK      [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 47 ]
  ! SMALL           [ shift and go to state 53 ]
  ! BIG             [ shift and go to state 54 ]
  ! EQUAL_EQUAL     [ shift and go to state 55 ]
  ! EXCL_EQUAL      [ shift and go to state 56 ]
  ! SMALL_EQUAL     [ shift and go to state 57 ]
  ! BIG_EQUAL       [ shift and go to state 58 ]
  ! PIPE_PIPE       [ shift and go to state 59 ]
  ! AMP_AMP         [ shift and go to state 60 ]


state 105

    (9) stmt -> IF LPARANT expr RPARANT stmt .
    (10) stmt -> IF LPARANT expr RPARANT stmt . ELSE stmt

    IF              reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt .)
    WHILE           reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt .)
    FOREACH         reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt .)
    RETURN          reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt .)
    COLON           reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt .)
    EXCL_MARK       reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt .)
    MINUS           reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt .)
    PLUS            reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt .)
    LPARANT         reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt .)
    VAL             reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt .)
    ID              reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt .)
    NUMBER          reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt .)
    END             reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt .)
    ELSE            reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt .)

  ! ELSE            [ shift and go to state 108 ]


state 106

    (11) stmt -> WHILE LPARANT expr RPARANT DO . stmt
    (7) stmt -> . expr SEMICOLON
    (8) stmt -> . defvar SEMICOLON
    (9) stmt -> . IF LPARANT expr RPARANT stmt
    (10) stmt -> . IF LPARANT expr RPARANT stmt ELSE stmt
    (11) stmt -> . WHILE LPARANT expr RPARANT DO stmt
    (12) stmt -> . FOREACH LPARANT iden OF expr RPARANT stmt
    (13) stmt -> . RETURN expr SEMICOLON
    (14) stmt -> . COLON body END
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (15) defvar -> . VAL type iden
    (49) iden -> . ID
    (48) num -> . NUMBER

    IF              shift and go to state 29
    WHILE           shift and go to state 30
    FOREACH         shift and go to state 31
    RETURN          shift and go to state 32
    COLON           shift and go to state 24
    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    VAL             shift and go to state 37
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 27
    stmt                           shift and go to state 109
    defvar                         shift and go to state 28
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 107

    (12) stmt -> FOREACH LPARANT iden OF expr . RPARANT stmt
    (17) expr -> expr . LBRACKET expr RBRACKET
    (18) expr -> expr . QUEST_MARK expr COLON expr
    (19) expr -> expr . EQUAL expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . MULTIPLY expr
    (23) expr -> expr . DIVIDE expr
    (24) expr -> expr . PERCENT expr
    (25) expr -> expr . SMALL expr
    (26) expr -> expr . BIG expr
    (27) expr -> expr . EQUAL_EQUAL expr
    (28) expr -> expr . EXCL_EQUAL expr
    (29) expr -> expr . SMALL_EQUAL expr
    (30) expr -> expr . BIG_EQUAL expr
    (31) expr -> expr . PIPE_PIPE expr
    (32) expr -> expr . AMP_AMP expr

    RPARANT         shift and go to state 110
    LBRACKET        shift and go to state 45
    QUEST_MARK      shift and go to state 46
    EQUAL           shift and go to state 47
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    PERCENT         shift and go to state 52
    SMALL           shift and go to state 53
    BIG             shift and go to state 54
    EQUAL_EQUAL     shift and go to state 55
    EXCL_EQUAL      shift and go to state 56
    SMALL_EQUAL     shift and go to state 57
    BIG_EQUAL       shift and go to state 58
    PIPE_PIPE       shift and go to state 59
    AMP_AMP         shift and go to state 60


state 108

    (10) stmt -> IF LPARANT expr RPARANT stmt ELSE . stmt
    (7) stmt -> . expr SEMICOLON
    (8) stmt -> . defvar SEMICOLON
    (9) stmt -> . IF LPARANT expr RPARANT stmt
    (10) stmt -> . IF LPARANT expr RPARANT stmt ELSE stmt
    (11) stmt -> . WHILE LPARANT expr RPARANT DO stmt
    (12) stmt -> . FOREACH LPARANT iden OF expr RPARANT stmt
    (13) stmt -> . RETURN expr SEMICOLON
    (14) stmt -> . COLON body END
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (15) defvar -> . VAL type iden
    (49) iden -> . ID
    (48) num -> . NUMBER

    IF              shift and go to state 29
    WHILE           shift and go to state 30
    FOREACH         shift and go to state 31
    RETURN          shift and go to state 32
    COLON           shift and go to state 24
    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    VAL             shift and go to state 37
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    expr                           shift and go to state 27
    stmt                           shift and go to state 111
    defvar                         shift and go to state 28
    iden                           shift and go to state 22
    num                            shift and go to state 36

state 109

    (11) stmt -> WHILE LPARANT expr RPARANT DO stmt .

    IF              reduce using rule 11 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)
    WHILE           reduce using rule 11 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)
    FOREACH         reduce using rule 11 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)
    RETURN          reduce using rule 11 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)
    COLON           reduce using rule 11 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)
    EXCL_MARK       reduce using rule 11 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)
    MINUS           reduce using rule 11 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)
    PLUS            reduce using rule 11 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)
    LPARANT         reduce using rule 11 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)
    VAL             reduce using rule 11 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)
    ID              reduce using rule 11 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)
    NUMBER          reduce using rule 11 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)
    END             reduce using rule 11 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)
    ELSE            reduce using rule 11 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)


state 110

    (12) stmt -> FOREACH LPARANT iden OF expr RPARANT . stmt
    (7) stmt -> . expr SEMICOLON
    (8) stmt -> . defvar SEMICOLON
    (9) stmt -> . IF LPARANT expr RPARANT stmt
    (10) stmt -> . IF LPARANT expr RPARANT stmt ELSE stmt
    (11) stmt -> . WHILE LPARANT expr RPARANT DO stmt
    (12) stmt -> . FOREACH LPARANT iden OF expr RPARANT stmt
    (13) stmt -> . RETURN expr SEMICOLON
    (14) stmt -> . COLON body END
    (16) expr -> . iden LPARANT clist RPARANT
    (17) expr -> . expr LBRACKET expr RBRACKET
    (18) expr -> . expr QUEST_MARK expr COLON expr
    (19) expr -> . expr EQUAL expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr MULTIPLY expr
    (23) expr -> . expr DIVIDE expr
    (24) expr -> . expr PERCENT expr
    (25) expr -> . expr SMALL expr
    (26) expr -> . expr BIG expr
    (27) expr -> . expr EQUAL_EQUAL expr
    (28) expr -> . expr EXCL_EQUAL expr
    (29) expr -> . expr SMALL_EQUAL expr
    (30) expr -> . expr BIG_EQUAL expr
    (31) expr -> . expr PIPE_PIPE expr
    (32) expr -> . expr AMP_AMP expr
    (33) expr -> . EXCL_MARK expr
    (34) expr -> . MINUS expr
    (35) expr -> . PLUS expr
    (36) expr -> . LPARANT expr RPARANT
    (37) expr -> . iden
    (38) expr -> . num
    (15) defvar -> . VAL type iden
    (49) iden -> . ID
    (48) num -> . NUMBER

    IF              shift and go to state 29
    WHILE           shift and go to state 30
    FOREACH         shift and go to state 31
    RETURN          shift and go to state 32
    COLON           shift and go to state 24
    EXCL_MARK       shift and go to state 35
    MINUS           shift and go to state 34
    PLUS            shift and go to state 33
    LPARANT         shift and go to state 23
    VAL             shift and go to state 37
    ID              shift and go to state 7
    NUMBER          shift and go to state 38

    iden                           shift and go to state 22
    expr                           shift and go to state 27
    stmt                           shift and go to state 112
    defvar                         shift and go to state 28
    num                            shift and go to state 36

state 111

    (10) stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .

    IF              reduce using rule 10 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)
    WHILE           reduce using rule 10 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)
    FOREACH         reduce using rule 10 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)
    RETURN          reduce using rule 10 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)
    COLON           reduce using rule 10 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)
    EXCL_MARK       reduce using rule 10 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)
    MINUS           reduce using rule 10 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)
    PLUS            reduce using rule 10 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)
    LPARANT         reduce using rule 10 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)
    VAL             reduce using rule 10 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)
    ID              reduce using rule 10 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)
    NUMBER          reduce using rule 10 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)
    END             reduce using rule 10 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)
    ELSE            reduce using rule 10 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)


state 112

    (12) stmt -> FOREACH LPARANT iden OF expr RPARANT stmt .

    IF              reduce using rule 12 (stmt -> FOREACH LPARANT iden OF expr RPARANT stmt .)
    WHILE           reduce using rule 12 (stmt -> FOREACH LPARANT iden OF expr RPARANT stmt .)
    FOREACH         reduce using rule 12 (stmt -> FOREACH LPARANT iden OF expr RPARANT stmt .)
    RETURN          reduce using rule 12 (stmt -> FOREACH LPARANT iden OF expr RPARANT stmt .)
    COLON           reduce using rule 12 (stmt -> FOREACH LPARANT iden OF expr RPARANT stmt .)
    EXCL_MARK       reduce using rule 12 (stmt -> FOREACH LPARANT iden OF expr RPARANT stmt .)
    MINUS           reduce using rule 12 (stmt -> FOREACH LPARANT iden OF expr RPARANT stmt .)
    PLUS            reduce using rule 12 (stmt -> FOREACH LPARANT iden OF expr RPARANT stmt .)
    LPARANT         reduce using rule 12 (stmt -> FOREACH LPARANT iden OF expr RPARANT stmt .)
    VAL             reduce using rule 12 (stmt -> FOREACH LPARANT iden OF expr RPARANT stmt .)
    ID              reduce using rule 12 (stmt -> FOREACH LPARANT iden OF expr RPARANT stmt .)
    NUMBER          reduce using rule 12 (stmt -> FOREACH LPARANT iden OF expr RPARANT stmt .)
    END             reduce using rule 12 (stmt -> FOREACH LPARANT iden OF expr RPARANT stmt .)
    ELSE            reduce using rule 12 (stmt -> FOREACH LPARANT iden OF expr RPARANT stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (prog -> func)
WARNING: rejected rule (empty -> <empty>) in state 2
