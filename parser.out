Created by PLY (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prog
Rule 1     prog -> func
Rule 2     prog -> func prog
Rule 3     func -> FUNCTION ID LPARANT flist RPARANT RETURNS type COLON body END
Rule 4     body -> stmt
Rule 5     body -> stmt body
Rule 6     stmt -> expr SEMICOLON
Rule 7     stmt -> defvar SEMICOLON
Rule 8     stmt -> IF LPARANT expr RPARANT stmt
Rule 9     stmt -> IF LPARANT expr RPARANT stmt ELSE stmt
Rule 10    stmt -> WHILE LPARANT expr RPARANT DO stmt
Rule 11    stmt -> FOREACH LPARANT ID OF expr RPARANT stmt
Rule 12    stmt -> RETURN expr SEMICOLON
Rule 13    stmt -> COLON body END
Rule 14    defvar -> VAL type ID
Rule 15    expr -> ID LPARANT clist RPARANT
Rule 16    expr -> expr LBRACKET expr RBRACKET
Rule 17    expr -> expr QUEST_MARK expr COLON expr
Rule 18    expr -> expr EQUAL expr
Rule 19    expr -> expr PLUS expr
Rule 20    expr -> expr MINUS expr
Rule 21    expr -> expr MULTIPLY expr
Rule 22    expr -> expr DIVIDE expr
Rule 23    expr -> expr PERCENT expr
Rule 24    expr -> expr SMALL expr
Rule 25    expr -> expr BIG expr
Rule 26    expr -> expr EQUAL_EQUAL expr
Rule 27    expr -> expr EXCL_EQUAL expr
Rule 28    expr -> expr SMALL_EQUAL expr
Rule 29    expr -> expr BIG_EQUAL expr
Rule 30    expr -> expr PIPE_PIPE expr
Rule 31    expr -> expr AMP_AMP expr
Rule 32    expr -> EXCL_MARK expr
Rule 33    expr -> MINUS expr
Rule 34    expr -> PLUS expr
Rule 35    expr -> LPARANT expr RPARANT
Rule 36    expr -> ID
Rule 37    expr -> NUMBER
Rule 38    flist -> <empty>
Rule 39    flist -> type ID
Rule 40    flist -> type ID COMMA flist
Rule 41    clist -> <empty>
Rule 42    clist -> expr
Rule 43    clist -> expr COMMA clist
Rule 44    type -> INT
Rule 45    type -> ARRAY
Rule 46    type -> NIL

Terminals, with rules where they appear

AMP_AMP              : 31
ARRAY                : 45
BIG                  : 25
BIG_EQUAL            : 29
COLON                : 3 13 17
COMMA                : 40 43
DIVIDE               : 22
DO                   : 10
ELSE                 : 9
END                  : 3 13
EQUAL                : 18
EQUAL_EQUAL          : 26
EXCL_EQUAL           : 27
EXCL_MARK            : 32
FOREACH              : 11
FUNCTION             : 3
ID                   : 3 11 14 15 36 39 40
IF                   : 8 9
INT                  : 44
LBRACKET             : 16
LPARANT              : 3 8 9 10 11 15 35
MINUS                : 20 33
MULTIPLY             : 21
NIL                  : 46
NUMBER               : 37
OF                   : 11
PERCENT              : 23
PIPE_PIPE            : 30
PLUS                 : 19 34
QUEST_MARK           : 17
RBRACKET             : 16
RETURN               : 12
RETURNS              : 3
RPARANT              : 3 8 9 10 11 15 35
SEMICOLON            : 6 7 12
SMALL                : 24
SMALL_EQUAL          : 28
VAL                  : 14
WHILE                : 10
error                : 

Nonterminals, with rules where they appear

body                 : 3 5 13
clist                : 15 43
defvar               : 7
expr                 : 6 8 9 10 11 12 16 16 17 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 33 34 35 42 43
flist                : 3 40
func                 : 1 2
prog                 : 2 0
stmt                 : 4 5 8 9 9 10 11
type                 : 3 14 39 40


state 0

    (0) S' -> . prog
    (1) prog -> . func
    (2) prog -> . func prog
    (3) func -> . FUNCTION ID LPARANT flist RPARANT RETURNS type COLON body END

    FUNCTION        shift and go to state 3

    prog                           shift and go to state 1
    func                           shift and go to state 2

state 1

    (0) S' -> prog .



state 2

    (1) prog -> func .
    (2) prog -> func . prog
    (1) prog -> . func
    (2) prog -> . func prog
    (3) func -> . FUNCTION ID LPARANT flist RPARANT RETURNS type COLON body END

    $end            reduce using rule 1 (prog -> func .)
    FUNCTION        shift and go to state 3

    func                           shift and go to state 2
    prog                           shift and go to state 4

state 3

    (3) func -> FUNCTION . ID LPARANT flist RPARANT RETURNS type COLON body END

    ID              shift and go to state 5


state 4

    (2) prog -> func prog .

    $end            reduce using rule 2 (prog -> func prog .)


state 5

    (3) func -> FUNCTION ID . LPARANT flist RPARANT RETURNS type COLON body END

    LPARANT         shift and go to state 6


state 6

    (3) func -> FUNCTION ID LPARANT . flist RPARANT RETURNS type COLON body END
    (38) flist -> .
    (39) flist -> . type ID
    (40) flist -> . type ID COMMA flist
    (44) type -> . INT
    (45) type -> . ARRAY
    (46) type -> . NIL

    RPARANT         reduce using rule 38 (flist -> .)
    INT             shift and go to state 9
    ARRAY           shift and go to state 10
    NIL             shift and go to state 11

    flist                          shift and go to state 7
    type                           shift and go to state 8

state 7

    (3) func -> FUNCTION ID LPARANT flist . RPARANT RETURNS type COLON body END

    RPARANT         shift and go to state 12


state 8

    (39) flist -> type . ID
    (40) flist -> type . ID COMMA flist

    ID              shift and go to state 13


state 9

    (44) type -> INT .

    ID              reduce using rule 44 (type -> INT .)
    COLON           reduce using rule 44 (type -> INT .)


state 10

    (45) type -> ARRAY .

    ID              reduce using rule 45 (type -> ARRAY .)
    COLON           reduce using rule 45 (type -> ARRAY .)


state 11

    (46) type -> NIL .

    ID              reduce using rule 46 (type -> NIL .)
    COLON           reduce using rule 46 (type -> NIL .)


state 12

    (3) func -> FUNCTION ID LPARANT flist RPARANT . RETURNS type COLON body END

    RETURNS         shift and go to state 14


state 13

    (39) flist -> type ID .
    (40) flist -> type ID . COMMA flist

    RPARANT         reduce using rule 39 (flist -> type ID .)
    COMMA           shift and go to state 15


state 14

    (3) func -> FUNCTION ID LPARANT flist RPARANT RETURNS . type COLON body END
    (44) type -> . INT
    (45) type -> . ARRAY
    (46) type -> . NIL

    INT             shift and go to state 9
    ARRAY           shift and go to state 10
    NIL             shift and go to state 11

    type                           shift and go to state 16

state 15

    (40) flist -> type ID COMMA . flist
    (38) flist -> .
    (39) flist -> . type ID
    (40) flist -> . type ID COMMA flist
    (44) type -> . INT
    (45) type -> . ARRAY
    (46) type -> . NIL

    RPARANT         reduce using rule 38 (flist -> .)
    INT             shift and go to state 9
    ARRAY           shift and go to state 10
    NIL             shift and go to state 11

    type                           shift and go to state 8
    flist                          shift and go to state 17

state 16

    (3) func -> FUNCTION ID LPARANT flist RPARANT RETURNS type . COLON body END

    COLON           shift and go to state 18


state 17

    (40) flist -> type ID COMMA flist .

    RPARANT         reduce using rule 40 (flist -> type ID COMMA flist .)


state 18

    (3) func -> FUNCTION ID LPARANT flist RPARANT RETURNS type COLON . body END
    (4) body -> . stmt
    (5) body -> . stmt body
    (6) stmt -> . expr SEMICOLON
    (7) stmt -> . defvar SEMICOLON
    (8) stmt -> . IF LPARANT expr RPARANT stmt
    (9) stmt -> . IF LPARANT expr RPARANT stmt ELSE stmt
    (10) stmt -> . WHILE LPARANT expr RPARANT DO stmt
    (11) stmt -> . FOREACH LPARANT ID OF expr RPARANT stmt
    (12) stmt -> . RETURN expr SEMICOLON
    (13) stmt -> . COLON body END
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER
    (14) defvar -> . VAL type ID

    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOREACH         shift and go to state 28
    RETURN          shift and go to state 29
    COLON           shift and go to state 21
    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33
    VAL             shift and go to state 34

    body                           shift and go to state 22
    stmt                           shift and go to state 23
    expr                           shift and go to state 24
    defvar                         shift and go to state 25

state 19

    (15) expr -> ID . LPARANT clist RPARANT
    (36) expr -> ID .

    LPARANT         shift and go to state 35
    SEMICOLON       reduce using rule 36 (expr -> ID .)
    LBRACKET        reduce using rule 36 (expr -> ID .)
    QUEST_MARK      reduce using rule 36 (expr -> ID .)
    EQUAL           reduce using rule 36 (expr -> ID .)
    PLUS            reduce using rule 36 (expr -> ID .)
    MINUS           reduce using rule 36 (expr -> ID .)
    MULTIPLY        reduce using rule 36 (expr -> ID .)
    DIVIDE          reduce using rule 36 (expr -> ID .)
    PERCENT         reduce using rule 36 (expr -> ID .)
    SMALL           reduce using rule 36 (expr -> ID .)
    BIG             reduce using rule 36 (expr -> ID .)
    EQUAL_EQUAL     reduce using rule 36 (expr -> ID .)
    EXCL_EQUAL      reduce using rule 36 (expr -> ID .)
    SMALL_EQUAL     reduce using rule 36 (expr -> ID .)
    BIG_EQUAL       reduce using rule 36 (expr -> ID .)
    PIPE_PIPE       reduce using rule 36 (expr -> ID .)
    AMP_AMP         reduce using rule 36 (expr -> ID .)
    RPARANT         reduce using rule 36 (expr -> ID .)
    COMMA           reduce using rule 36 (expr -> ID .)
    RBRACKET        reduce using rule 36 (expr -> ID .)
    COLON           reduce using rule 36 (expr -> ID .)


state 20

    (35) expr -> LPARANT . expr RPARANT
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33

    expr                           shift and go to state 36

state 21

    (13) stmt -> COLON . body END
    (4) body -> . stmt
    (5) body -> . stmt body
    (6) stmt -> . expr SEMICOLON
    (7) stmt -> . defvar SEMICOLON
    (8) stmt -> . IF LPARANT expr RPARANT stmt
    (9) stmt -> . IF LPARANT expr RPARANT stmt ELSE stmt
    (10) stmt -> . WHILE LPARANT expr RPARANT DO stmt
    (11) stmt -> . FOREACH LPARANT ID OF expr RPARANT stmt
    (12) stmt -> . RETURN expr SEMICOLON
    (13) stmt -> . COLON body END
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER
    (14) defvar -> . VAL type ID

    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOREACH         shift and go to state 28
    RETURN          shift and go to state 29
    COLON           shift and go to state 21
    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33
    VAL             shift and go to state 34

    body                           shift and go to state 37
    stmt                           shift and go to state 23
    expr                           shift and go to state 24
    defvar                         shift and go to state 25

state 22

    (3) func -> FUNCTION ID LPARANT flist RPARANT RETURNS type COLON body . END

    END             shift and go to state 38


state 23

    (4) body -> stmt .
    (5) body -> stmt . body
    (4) body -> . stmt
    (5) body -> . stmt body
    (6) stmt -> . expr SEMICOLON
    (7) stmt -> . defvar SEMICOLON
    (8) stmt -> . IF LPARANT expr RPARANT stmt
    (9) stmt -> . IF LPARANT expr RPARANT stmt ELSE stmt
    (10) stmt -> . WHILE LPARANT expr RPARANT DO stmt
    (11) stmt -> . FOREACH LPARANT ID OF expr RPARANT stmt
    (12) stmt -> . RETURN expr SEMICOLON
    (13) stmt -> . COLON body END
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER
    (14) defvar -> . VAL type ID

    END             reduce using rule 4 (body -> stmt .)
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOREACH         shift and go to state 28
    RETURN          shift and go to state 29
    COLON           shift and go to state 21
    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33
    VAL             shift and go to state 34

    stmt                           shift and go to state 23
    body                           shift and go to state 39
    expr                           shift and go to state 24
    defvar                         shift and go to state 25

state 24

    (6) stmt -> expr . SEMICOLON
    (16) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUEST_MARK expr COLON expr
    (18) expr -> expr . EQUAL expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MULTIPLY expr
    (22) expr -> expr . DIVIDE expr
    (23) expr -> expr . PERCENT expr
    (24) expr -> expr . SMALL expr
    (25) expr -> expr . BIG expr
    (26) expr -> expr . EQUAL_EQUAL expr
    (27) expr -> expr . EXCL_EQUAL expr
    (28) expr -> expr . SMALL_EQUAL expr
    (29) expr -> expr . BIG_EQUAL expr
    (30) expr -> expr . PIPE_PIPE expr
    (31) expr -> expr . AMP_AMP expr

    SEMICOLON       shift and go to state 40
    LBRACKET        shift and go to state 41
    QUEST_MARK      shift and go to state 42
    EQUAL           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    DIVIDE          shift and go to state 47
    PERCENT         shift and go to state 48
    SMALL           shift and go to state 49
    BIG             shift and go to state 50
    EQUAL_EQUAL     shift and go to state 51
    EXCL_EQUAL      shift and go to state 52
    SMALL_EQUAL     shift and go to state 53
    BIG_EQUAL       shift and go to state 54
    PIPE_PIPE       shift and go to state 55
    AMP_AMP         shift and go to state 56


state 25

    (7) stmt -> defvar . SEMICOLON

    SEMICOLON       shift and go to state 57


state 26

    (8) stmt -> IF . LPARANT expr RPARANT stmt
    (9) stmt -> IF . LPARANT expr RPARANT stmt ELSE stmt

    LPARANT         shift and go to state 58


state 27

    (10) stmt -> WHILE . LPARANT expr RPARANT DO stmt

    LPARANT         shift and go to state 59


state 28

    (11) stmt -> FOREACH . LPARANT ID OF expr RPARANT stmt

    LPARANT         shift and go to state 60


state 29

    (12) stmt -> RETURN . expr SEMICOLON
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33

    expr                           shift and go to state 61

state 30

    (34) expr -> PLUS . expr
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33

    expr                           shift and go to state 62

state 31

    (33) expr -> MINUS . expr
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33

    expr                           shift and go to state 63

state 32

    (32) expr -> EXCL_MARK . expr
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33

    expr                           shift and go to state 64

state 33

    (37) expr -> NUMBER .

    SEMICOLON       reduce using rule 37 (expr -> NUMBER .)
    LBRACKET        reduce using rule 37 (expr -> NUMBER .)
    QUEST_MARK      reduce using rule 37 (expr -> NUMBER .)
    EQUAL           reduce using rule 37 (expr -> NUMBER .)
    PLUS            reduce using rule 37 (expr -> NUMBER .)
    MINUS           reduce using rule 37 (expr -> NUMBER .)
    MULTIPLY        reduce using rule 37 (expr -> NUMBER .)
    DIVIDE          reduce using rule 37 (expr -> NUMBER .)
    PERCENT         reduce using rule 37 (expr -> NUMBER .)
    SMALL           reduce using rule 37 (expr -> NUMBER .)
    BIG             reduce using rule 37 (expr -> NUMBER .)
    EQUAL_EQUAL     reduce using rule 37 (expr -> NUMBER .)
    EXCL_EQUAL      reduce using rule 37 (expr -> NUMBER .)
    SMALL_EQUAL     reduce using rule 37 (expr -> NUMBER .)
    BIG_EQUAL       reduce using rule 37 (expr -> NUMBER .)
    PIPE_PIPE       reduce using rule 37 (expr -> NUMBER .)
    AMP_AMP         reduce using rule 37 (expr -> NUMBER .)
    RPARANT         reduce using rule 37 (expr -> NUMBER .)
    COMMA           reduce using rule 37 (expr -> NUMBER .)
    RBRACKET        reduce using rule 37 (expr -> NUMBER .)
    COLON           reduce using rule 37 (expr -> NUMBER .)


state 34

    (14) defvar -> VAL . type ID
    (44) type -> . INT
    (45) type -> . ARRAY
    (46) type -> . NIL

    INT             shift and go to state 9
    ARRAY           shift and go to state 10
    NIL             shift and go to state 11

    type                           shift and go to state 65

state 35

    (15) expr -> ID LPARANT . clist RPARANT
    (41) clist -> .
    (42) clist -> . expr
    (43) clist -> . expr COMMA clist
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER

    RPARANT         reduce using rule 41 (clist -> .)
    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33

    clist                          shift and go to state 66
    expr                           shift and go to state 67

state 36

    (35) expr -> LPARANT expr . RPARANT
    (16) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUEST_MARK expr COLON expr
    (18) expr -> expr . EQUAL expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MULTIPLY expr
    (22) expr -> expr . DIVIDE expr
    (23) expr -> expr . PERCENT expr
    (24) expr -> expr . SMALL expr
    (25) expr -> expr . BIG expr
    (26) expr -> expr . EQUAL_EQUAL expr
    (27) expr -> expr . EXCL_EQUAL expr
    (28) expr -> expr . SMALL_EQUAL expr
    (29) expr -> expr . BIG_EQUAL expr
    (30) expr -> expr . PIPE_PIPE expr
    (31) expr -> expr . AMP_AMP expr

    RPARANT         shift and go to state 68
    LBRACKET        shift and go to state 41
    QUEST_MARK      shift and go to state 42
    EQUAL           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    DIVIDE          shift and go to state 47
    PERCENT         shift and go to state 48
    SMALL           shift and go to state 49
    BIG             shift and go to state 50
    EQUAL_EQUAL     shift and go to state 51
    EXCL_EQUAL      shift and go to state 52
    SMALL_EQUAL     shift and go to state 53
    BIG_EQUAL       shift and go to state 54
    PIPE_PIPE       shift and go to state 55
    AMP_AMP         shift and go to state 56


state 37

    (13) stmt -> COLON body . END

    END             shift and go to state 69


state 38

    (3) func -> FUNCTION ID LPARANT flist RPARANT RETURNS type COLON body END .

    FUNCTION        reduce using rule 3 (func -> FUNCTION ID LPARANT flist RPARANT RETURNS type COLON body END .)
    $end            reduce using rule 3 (func -> FUNCTION ID LPARANT flist RPARANT RETURNS type COLON body END .)


state 39

    (5) body -> stmt body .

    END             reduce using rule 5 (body -> stmt body .)


state 40

    (6) stmt -> expr SEMICOLON .

    IF              reduce using rule 6 (stmt -> expr SEMICOLON .)
    WHILE           reduce using rule 6 (stmt -> expr SEMICOLON .)
    FOREACH         reduce using rule 6 (stmt -> expr SEMICOLON .)
    RETURN          reduce using rule 6 (stmt -> expr SEMICOLON .)
    COLON           reduce using rule 6 (stmt -> expr SEMICOLON .)
    ID              reduce using rule 6 (stmt -> expr SEMICOLON .)
    EXCL_MARK       reduce using rule 6 (stmt -> expr SEMICOLON .)
    MINUS           reduce using rule 6 (stmt -> expr SEMICOLON .)
    PLUS            reduce using rule 6 (stmt -> expr SEMICOLON .)
    LPARANT         reduce using rule 6 (stmt -> expr SEMICOLON .)
    NUMBER          reduce using rule 6 (stmt -> expr SEMICOLON .)
    VAL             reduce using rule 6 (stmt -> expr SEMICOLON .)
    END             reduce using rule 6 (stmt -> expr SEMICOLON .)
    ELSE            reduce using rule 6 (stmt -> expr SEMICOLON .)


state 41

    (16) expr -> expr LBRACKET . expr RBRACKET
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33

    expr                           shift and go to state 70

state 42

    (17) expr -> expr QUEST_MARK . expr COLON expr
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33

    expr                           shift and go to state 71

state 43

    (18) expr -> expr EQUAL . expr
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33

    expr                           shift and go to state 72

state 44

    (19) expr -> expr PLUS . expr
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33

    expr                           shift and go to state 73

state 45

    (20) expr -> expr MINUS . expr
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33

    expr                           shift and go to state 74

state 46

    (21) expr -> expr MULTIPLY . expr
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33

    expr                           shift and go to state 75

state 47

    (22) expr -> expr DIVIDE . expr
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33

    expr                           shift and go to state 76

state 48

    (23) expr -> expr PERCENT . expr
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33

    expr                           shift and go to state 77

state 49

    (24) expr -> expr SMALL . expr
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33

    expr                           shift and go to state 78

state 50

    (25) expr -> expr BIG . expr
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33

    expr                           shift and go to state 79

state 51

    (26) expr -> expr EQUAL_EQUAL . expr
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33

    expr                           shift and go to state 80

state 52

    (27) expr -> expr EXCL_EQUAL . expr
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33

    expr                           shift and go to state 81

state 53

    (28) expr -> expr SMALL_EQUAL . expr
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33

    expr                           shift and go to state 82

state 54

    (29) expr -> expr BIG_EQUAL . expr
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33

    expr                           shift and go to state 83

state 55

    (30) expr -> expr PIPE_PIPE . expr
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33

    expr                           shift and go to state 84

state 56

    (31) expr -> expr AMP_AMP . expr
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33

    expr                           shift and go to state 85

state 57

    (7) stmt -> defvar SEMICOLON .

    IF              reduce using rule 7 (stmt -> defvar SEMICOLON .)
    WHILE           reduce using rule 7 (stmt -> defvar SEMICOLON .)
    FOREACH         reduce using rule 7 (stmt -> defvar SEMICOLON .)
    RETURN          reduce using rule 7 (stmt -> defvar SEMICOLON .)
    COLON           reduce using rule 7 (stmt -> defvar SEMICOLON .)
    ID              reduce using rule 7 (stmt -> defvar SEMICOLON .)
    EXCL_MARK       reduce using rule 7 (stmt -> defvar SEMICOLON .)
    MINUS           reduce using rule 7 (stmt -> defvar SEMICOLON .)
    PLUS            reduce using rule 7 (stmt -> defvar SEMICOLON .)
    LPARANT         reduce using rule 7 (stmt -> defvar SEMICOLON .)
    NUMBER          reduce using rule 7 (stmt -> defvar SEMICOLON .)
    VAL             reduce using rule 7 (stmt -> defvar SEMICOLON .)
    END             reduce using rule 7 (stmt -> defvar SEMICOLON .)
    ELSE            reduce using rule 7 (stmt -> defvar SEMICOLON .)


state 58

    (8) stmt -> IF LPARANT . expr RPARANT stmt
    (9) stmt -> IF LPARANT . expr RPARANT stmt ELSE stmt
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33

    expr                           shift and go to state 86

state 59

    (10) stmt -> WHILE LPARANT . expr RPARANT DO stmt
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33

    expr                           shift and go to state 87

state 60

    (11) stmt -> FOREACH LPARANT . ID OF expr RPARANT stmt

    ID              shift and go to state 88


state 61

    (12) stmt -> RETURN expr . SEMICOLON
    (16) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUEST_MARK expr COLON expr
    (18) expr -> expr . EQUAL expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MULTIPLY expr
    (22) expr -> expr . DIVIDE expr
    (23) expr -> expr . PERCENT expr
    (24) expr -> expr . SMALL expr
    (25) expr -> expr . BIG expr
    (26) expr -> expr . EQUAL_EQUAL expr
    (27) expr -> expr . EXCL_EQUAL expr
    (28) expr -> expr . SMALL_EQUAL expr
    (29) expr -> expr . BIG_EQUAL expr
    (30) expr -> expr . PIPE_PIPE expr
    (31) expr -> expr . AMP_AMP expr

    SEMICOLON       shift and go to state 89
    LBRACKET        shift and go to state 41
    QUEST_MARK      shift and go to state 42
    EQUAL           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    DIVIDE          shift and go to state 47
    PERCENT         shift and go to state 48
    SMALL           shift and go to state 49
    BIG             shift and go to state 50
    EQUAL_EQUAL     shift and go to state 51
    EXCL_EQUAL      shift and go to state 52
    SMALL_EQUAL     shift and go to state 53
    BIG_EQUAL       shift and go to state 54
    PIPE_PIPE       shift and go to state 55
    AMP_AMP         shift and go to state 56


state 62

    (34) expr -> PLUS expr .
    (16) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUEST_MARK expr COLON expr
    (18) expr -> expr . EQUAL expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MULTIPLY expr
    (22) expr -> expr . DIVIDE expr
    (23) expr -> expr . PERCENT expr
    (24) expr -> expr . SMALL expr
    (25) expr -> expr . BIG expr
    (26) expr -> expr . EQUAL_EQUAL expr
    (27) expr -> expr . EXCL_EQUAL expr
    (28) expr -> expr . SMALL_EQUAL expr
    (29) expr -> expr . BIG_EQUAL expr
    (30) expr -> expr . PIPE_PIPE expr
    (31) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 34 (expr -> PLUS expr .)
    QUEST_MARK      reduce using rule 34 (expr -> PLUS expr .)
    EQUAL           reduce using rule 34 (expr -> PLUS expr .)
    PLUS            reduce using rule 34 (expr -> PLUS expr .)
    MINUS           reduce using rule 34 (expr -> PLUS expr .)
    SMALL           reduce using rule 34 (expr -> PLUS expr .)
    BIG             reduce using rule 34 (expr -> PLUS expr .)
    EQUAL_EQUAL     reduce using rule 34 (expr -> PLUS expr .)
    EXCL_EQUAL      reduce using rule 34 (expr -> PLUS expr .)
    SMALL_EQUAL     reduce using rule 34 (expr -> PLUS expr .)
    BIG_EQUAL       reduce using rule 34 (expr -> PLUS expr .)
    PIPE_PIPE       reduce using rule 34 (expr -> PLUS expr .)
    AMP_AMP         reduce using rule 34 (expr -> PLUS expr .)
    RPARANT         reduce using rule 34 (expr -> PLUS expr .)
    COMMA           reduce using rule 34 (expr -> PLUS expr .)
    RBRACKET        reduce using rule 34 (expr -> PLUS expr .)
    COLON           reduce using rule 34 (expr -> PLUS expr .)
    LBRACKET        shift and go to state 41
    MULTIPLY        shift and go to state 46
    DIVIDE          shift and go to state 47
    PERCENT         shift and go to state 48

  ! LBRACKET        [ reduce using rule 34 (expr -> PLUS expr .) ]
  ! MULTIPLY        [ reduce using rule 34 (expr -> PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 34 (expr -> PLUS expr .) ]
  ! PERCENT         [ reduce using rule 34 (expr -> PLUS expr .) ]
  ! QUEST_MARK      [ shift and go to state 42 ]
  ! EQUAL           [ shift and go to state 43 ]
  ! PLUS            [ shift and go to state 44 ]
  ! MINUS           [ shift and go to state 45 ]
  ! SMALL           [ shift and go to state 49 ]
  ! BIG             [ shift and go to state 50 ]
  ! EQUAL_EQUAL     [ shift and go to state 51 ]
  ! EXCL_EQUAL      [ shift and go to state 52 ]
  ! SMALL_EQUAL     [ shift and go to state 53 ]
  ! BIG_EQUAL       [ shift and go to state 54 ]
  ! PIPE_PIPE       [ shift and go to state 55 ]
  ! AMP_AMP         [ shift and go to state 56 ]


state 63

    (33) expr -> MINUS expr .
    (16) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUEST_MARK expr COLON expr
    (18) expr -> expr . EQUAL expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MULTIPLY expr
    (22) expr -> expr . DIVIDE expr
    (23) expr -> expr . PERCENT expr
    (24) expr -> expr . SMALL expr
    (25) expr -> expr . BIG expr
    (26) expr -> expr . EQUAL_EQUAL expr
    (27) expr -> expr . EXCL_EQUAL expr
    (28) expr -> expr . SMALL_EQUAL expr
    (29) expr -> expr . BIG_EQUAL expr
    (30) expr -> expr . PIPE_PIPE expr
    (31) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 33 (expr -> MINUS expr .)
    QUEST_MARK      reduce using rule 33 (expr -> MINUS expr .)
    EQUAL           reduce using rule 33 (expr -> MINUS expr .)
    PLUS            reduce using rule 33 (expr -> MINUS expr .)
    MINUS           reduce using rule 33 (expr -> MINUS expr .)
    SMALL           reduce using rule 33 (expr -> MINUS expr .)
    BIG             reduce using rule 33 (expr -> MINUS expr .)
    EQUAL_EQUAL     reduce using rule 33 (expr -> MINUS expr .)
    EXCL_EQUAL      reduce using rule 33 (expr -> MINUS expr .)
    SMALL_EQUAL     reduce using rule 33 (expr -> MINUS expr .)
    BIG_EQUAL       reduce using rule 33 (expr -> MINUS expr .)
    PIPE_PIPE       reduce using rule 33 (expr -> MINUS expr .)
    AMP_AMP         reduce using rule 33 (expr -> MINUS expr .)
    RPARANT         reduce using rule 33 (expr -> MINUS expr .)
    COMMA           reduce using rule 33 (expr -> MINUS expr .)
    RBRACKET        reduce using rule 33 (expr -> MINUS expr .)
    COLON           reduce using rule 33 (expr -> MINUS expr .)
    LBRACKET        shift and go to state 41
    MULTIPLY        shift and go to state 46
    DIVIDE          shift and go to state 47
    PERCENT         shift and go to state 48

  ! LBRACKET        [ reduce using rule 33 (expr -> MINUS expr .) ]
  ! MULTIPLY        [ reduce using rule 33 (expr -> MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 33 (expr -> MINUS expr .) ]
  ! PERCENT         [ reduce using rule 33 (expr -> MINUS expr .) ]
  ! QUEST_MARK      [ shift and go to state 42 ]
  ! EQUAL           [ shift and go to state 43 ]
  ! PLUS            [ shift and go to state 44 ]
  ! MINUS           [ shift and go to state 45 ]
  ! SMALL           [ shift and go to state 49 ]
  ! BIG             [ shift and go to state 50 ]
  ! EQUAL_EQUAL     [ shift and go to state 51 ]
  ! EXCL_EQUAL      [ shift and go to state 52 ]
  ! SMALL_EQUAL     [ shift and go to state 53 ]
  ! BIG_EQUAL       [ shift and go to state 54 ]
  ! PIPE_PIPE       [ shift and go to state 55 ]
  ! AMP_AMP         [ shift and go to state 56 ]


state 64

    (32) expr -> EXCL_MARK expr .
    (16) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUEST_MARK expr COLON expr
    (18) expr -> expr . EQUAL expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MULTIPLY expr
    (22) expr -> expr . DIVIDE expr
    (23) expr -> expr . PERCENT expr
    (24) expr -> expr . SMALL expr
    (25) expr -> expr . BIG expr
    (26) expr -> expr . EQUAL_EQUAL expr
    (27) expr -> expr . EXCL_EQUAL expr
    (28) expr -> expr . SMALL_EQUAL expr
    (29) expr -> expr . BIG_EQUAL expr
    (30) expr -> expr . PIPE_PIPE expr
    (31) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 32 (expr -> EXCL_MARK expr .)
    SMALL           reduce using rule 32 (expr -> EXCL_MARK expr .)
    BIG             reduce using rule 32 (expr -> EXCL_MARK expr .)
    EQUAL_EQUAL     reduce using rule 32 (expr -> EXCL_MARK expr .)
    EXCL_EQUAL      reduce using rule 32 (expr -> EXCL_MARK expr .)
    SMALL_EQUAL     reduce using rule 32 (expr -> EXCL_MARK expr .)
    BIG_EQUAL       reduce using rule 32 (expr -> EXCL_MARK expr .)
    PIPE_PIPE       reduce using rule 32 (expr -> EXCL_MARK expr .)
    AMP_AMP         reduce using rule 32 (expr -> EXCL_MARK expr .)
    RPARANT         reduce using rule 32 (expr -> EXCL_MARK expr .)
    COMMA           reduce using rule 32 (expr -> EXCL_MARK expr .)
    RBRACKET        reduce using rule 32 (expr -> EXCL_MARK expr .)
    COLON           reduce using rule 32 (expr -> EXCL_MARK expr .)
    LBRACKET        shift and go to state 41
    QUEST_MARK      shift and go to state 42
    EQUAL           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    DIVIDE          shift and go to state 47
    PERCENT         shift and go to state 48

  ! LBRACKET        [ reduce using rule 32 (expr -> EXCL_MARK expr .) ]
  ! QUEST_MARK      [ reduce using rule 32 (expr -> EXCL_MARK expr .) ]
  ! EQUAL           [ reduce using rule 32 (expr -> EXCL_MARK expr .) ]
  ! PLUS            [ reduce using rule 32 (expr -> EXCL_MARK expr .) ]
  ! MINUS           [ reduce using rule 32 (expr -> EXCL_MARK expr .) ]
  ! MULTIPLY        [ reduce using rule 32 (expr -> EXCL_MARK expr .) ]
  ! DIVIDE          [ reduce using rule 32 (expr -> EXCL_MARK expr .) ]
  ! PERCENT         [ reduce using rule 32 (expr -> EXCL_MARK expr .) ]
  ! SMALL           [ shift and go to state 49 ]
  ! BIG             [ shift and go to state 50 ]
  ! EQUAL_EQUAL     [ shift and go to state 51 ]
  ! EXCL_EQUAL      [ shift and go to state 52 ]
  ! SMALL_EQUAL     [ shift and go to state 53 ]
  ! BIG_EQUAL       [ shift and go to state 54 ]
  ! PIPE_PIPE       [ shift and go to state 55 ]
  ! AMP_AMP         [ shift and go to state 56 ]


state 65

    (14) defvar -> VAL type . ID

    ID              shift and go to state 90


state 66

    (15) expr -> ID LPARANT clist . RPARANT

    RPARANT         shift and go to state 91


state 67

    (42) clist -> expr .
    (43) clist -> expr . COMMA clist
    (16) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUEST_MARK expr COLON expr
    (18) expr -> expr . EQUAL expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MULTIPLY expr
    (22) expr -> expr . DIVIDE expr
    (23) expr -> expr . PERCENT expr
    (24) expr -> expr . SMALL expr
    (25) expr -> expr . BIG expr
    (26) expr -> expr . EQUAL_EQUAL expr
    (27) expr -> expr . EXCL_EQUAL expr
    (28) expr -> expr . SMALL_EQUAL expr
    (29) expr -> expr . BIG_EQUAL expr
    (30) expr -> expr . PIPE_PIPE expr
    (31) expr -> expr . AMP_AMP expr

    RPARANT         reduce using rule 42 (clist -> expr .)
    COMMA           shift and go to state 92
    LBRACKET        shift and go to state 41
    QUEST_MARK      shift and go to state 42
    EQUAL           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    DIVIDE          shift and go to state 47
    PERCENT         shift and go to state 48
    SMALL           shift and go to state 49
    BIG             shift and go to state 50
    EQUAL_EQUAL     shift and go to state 51
    EXCL_EQUAL      shift and go to state 52
    SMALL_EQUAL     shift and go to state 53
    BIG_EQUAL       shift and go to state 54
    PIPE_PIPE       shift and go to state 55
    AMP_AMP         shift and go to state 56


state 68

    (35) expr -> LPARANT expr RPARANT .

    SEMICOLON       reduce using rule 35 (expr -> LPARANT expr RPARANT .)
    LBRACKET        reduce using rule 35 (expr -> LPARANT expr RPARANT .)
    QUEST_MARK      reduce using rule 35 (expr -> LPARANT expr RPARANT .)
    EQUAL           reduce using rule 35 (expr -> LPARANT expr RPARANT .)
    PLUS            reduce using rule 35 (expr -> LPARANT expr RPARANT .)
    MINUS           reduce using rule 35 (expr -> LPARANT expr RPARANT .)
    MULTIPLY        reduce using rule 35 (expr -> LPARANT expr RPARANT .)
    DIVIDE          reduce using rule 35 (expr -> LPARANT expr RPARANT .)
    PERCENT         reduce using rule 35 (expr -> LPARANT expr RPARANT .)
    SMALL           reduce using rule 35 (expr -> LPARANT expr RPARANT .)
    BIG             reduce using rule 35 (expr -> LPARANT expr RPARANT .)
    EQUAL_EQUAL     reduce using rule 35 (expr -> LPARANT expr RPARANT .)
    EXCL_EQUAL      reduce using rule 35 (expr -> LPARANT expr RPARANT .)
    SMALL_EQUAL     reduce using rule 35 (expr -> LPARANT expr RPARANT .)
    BIG_EQUAL       reduce using rule 35 (expr -> LPARANT expr RPARANT .)
    PIPE_PIPE       reduce using rule 35 (expr -> LPARANT expr RPARANT .)
    AMP_AMP         reduce using rule 35 (expr -> LPARANT expr RPARANT .)
    RPARANT         reduce using rule 35 (expr -> LPARANT expr RPARANT .)
    COMMA           reduce using rule 35 (expr -> LPARANT expr RPARANT .)
    RBRACKET        reduce using rule 35 (expr -> LPARANT expr RPARANT .)
    COLON           reduce using rule 35 (expr -> LPARANT expr RPARANT .)


state 69

    (13) stmt -> COLON body END .

    IF              reduce using rule 13 (stmt -> COLON body END .)
    WHILE           reduce using rule 13 (stmt -> COLON body END .)
    FOREACH         reduce using rule 13 (stmt -> COLON body END .)
    RETURN          reduce using rule 13 (stmt -> COLON body END .)
    COLON           reduce using rule 13 (stmt -> COLON body END .)
    ID              reduce using rule 13 (stmt -> COLON body END .)
    EXCL_MARK       reduce using rule 13 (stmt -> COLON body END .)
    MINUS           reduce using rule 13 (stmt -> COLON body END .)
    PLUS            reduce using rule 13 (stmt -> COLON body END .)
    LPARANT         reduce using rule 13 (stmt -> COLON body END .)
    NUMBER          reduce using rule 13 (stmt -> COLON body END .)
    VAL             reduce using rule 13 (stmt -> COLON body END .)
    END             reduce using rule 13 (stmt -> COLON body END .)
    ELSE            reduce using rule 13 (stmt -> COLON body END .)


state 70

    (16) expr -> expr LBRACKET expr . RBRACKET
    (16) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUEST_MARK expr COLON expr
    (18) expr -> expr . EQUAL expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MULTIPLY expr
    (22) expr -> expr . DIVIDE expr
    (23) expr -> expr . PERCENT expr
    (24) expr -> expr . SMALL expr
    (25) expr -> expr . BIG expr
    (26) expr -> expr . EQUAL_EQUAL expr
    (27) expr -> expr . EXCL_EQUAL expr
    (28) expr -> expr . SMALL_EQUAL expr
    (29) expr -> expr . BIG_EQUAL expr
    (30) expr -> expr . PIPE_PIPE expr
    (31) expr -> expr . AMP_AMP expr

    RBRACKET        shift and go to state 93
    LBRACKET        shift and go to state 41
    QUEST_MARK      shift and go to state 42
    EQUAL           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    DIVIDE          shift and go to state 47
    PERCENT         shift and go to state 48
    SMALL           shift and go to state 49
    BIG             shift and go to state 50
    EQUAL_EQUAL     shift and go to state 51
    EXCL_EQUAL      shift and go to state 52
    SMALL_EQUAL     shift and go to state 53
    BIG_EQUAL       shift and go to state 54
    PIPE_PIPE       shift and go to state 55
    AMP_AMP         shift and go to state 56


state 71

    (17) expr -> expr QUEST_MARK expr . COLON expr
    (16) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUEST_MARK expr COLON expr
    (18) expr -> expr . EQUAL expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MULTIPLY expr
    (22) expr -> expr . DIVIDE expr
    (23) expr -> expr . PERCENT expr
    (24) expr -> expr . SMALL expr
    (25) expr -> expr . BIG expr
    (26) expr -> expr . EQUAL_EQUAL expr
    (27) expr -> expr . EXCL_EQUAL expr
    (28) expr -> expr . SMALL_EQUAL expr
    (29) expr -> expr . BIG_EQUAL expr
    (30) expr -> expr . PIPE_PIPE expr
    (31) expr -> expr . AMP_AMP expr

    COLON           shift and go to state 94
    LBRACKET        shift and go to state 41
    QUEST_MARK      shift and go to state 42
    EQUAL           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    DIVIDE          shift and go to state 47
    PERCENT         shift and go to state 48
    SMALL           shift and go to state 49
    BIG             shift and go to state 50
    EQUAL_EQUAL     shift and go to state 51
    EXCL_EQUAL      shift and go to state 52
    SMALL_EQUAL     shift and go to state 53
    BIG_EQUAL       shift and go to state 54
    PIPE_PIPE       shift and go to state 55
    AMP_AMP         shift and go to state 56


state 72

    (18) expr -> expr EQUAL expr .
    (16) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUEST_MARK expr COLON expr
    (18) expr -> expr . EQUAL expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MULTIPLY expr
    (22) expr -> expr . DIVIDE expr
    (23) expr -> expr . PERCENT expr
    (24) expr -> expr . SMALL expr
    (25) expr -> expr . BIG expr
    (26) expr -> expr . EQUAL_EQUAL expr
    (27) expr -> expr . EXCL_EQUAL expr
    (28) expr -> expr . SMALL_EQUAL expr
    (29) expr -> expr . BIG_EQUAL expr
    (30) expr -> expr . PIPE_PIPE expr
    (31) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 18 (expr -> expr EQUAL expr .)
    QUEST_MARK      reduce using rule 18 (expr -> expr EQUAL expr .)
    EQUAL           reduce using rule 18 (expr -> expr EQUAL expr .)
    SMALL           reduce using rule 18 (expr -> expr EQUAL expr .)
    BIG             reduce using rule 18 (expr -> expr EQUAL expr .)
    EQUAL_EQUAL     reduce using rule 18 (expr -> expr EQUAL expr .)
    EXCL_EQUAL      reduce using rule 18 (expr -> expr EQUAL expr .)
    SMALL_EQUAL     reduce using rule 18 (expr -> expr EQUAL expr .)
    BIG_EQUAL       reduce using rule 18 (expr -> expr EQUAL expr .)
    PIPE_PIPE       reduce using rule 18 (expr -> expr EQUAL expr .)
    AMP_AMP         reduce using rule 18 (expr -> expr EQUAL expr .)
    RPARANT         reduce using rule 18 (expr -> expr EQUAL expr .)
    COMMA           reduce using rule 18 (expr -> expr EQUAL expr .)
    RBRACKET        reduce using rule 18 (expr -> expr EQUAL expr .)
    COLON           reduce using rule 18 (expr -> expr EQUAL expr .)
    LBRACKET        shift and go to state 41
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    DIVIDE          shift and go to state 47
    PERCENT         shift and go to state 48

  ! LBRACKET        [ reduce using rule 18 (expr -> expr EQUAL expr .) ]
  ! PLUS            [ reduce using rule 18 (expr -> expr EQUAL expr .) ]
  ! MINUS           [ reduce using rule 18 (expr -> expr EQUAL expr .) ]
  ! MULTIPLY        [ reduce using rule 18 (expr -> expr EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 18 (expr -> expr EQUAL expr .) ]
  ! PERCENT         [ reduce using rule 18 (expr -> expr EQUAL expr .) ]
  ! QUEST_MARK      [ shift and go to state 42 ]
  ! EQUAL           [ shift and go to state 43 ]
  ! SMALL           [ shift and go to state 49 ]
  ! BIG             [ shift and go to state 50 ]
  ! EQUAL_EQUAL     [ shift and go to state 51 ]
  ! EXCL_EQUAL      [ shift and go to state 52 ]
  ! SMALL_EQUAL     [ shift and go to state 53 ]
  ! BIG_EQUAL       [ shift and go to state 54 ]
  ! PIPE_PIPE       [ shift and go to state 55 ]
  ! AMP_AMP         [ shift and go to state 56 ]


state 73

    (19) expr -> expr PLUS expr .
    (16) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUEST_MARK expr COLON expr
    (18) expr -> expr . EQUAL expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MULTIPLY expr
    (22) expr -> expr . DIVIDE expr
    (23) expr -> expr . PERCENT expr
    (24) expr -> expr . SMALL expr
    (25) expr -> expr . BIG expr
    (26) expr -> expr . EQUAL_EQUAL expr
    (27) expr -> expr . EXCL_EQUAL expr
    (28) expr -> expr . SMALL_EQUAL expr
    (29) expr -> expr . BIG_EQUAL expr
    (30) expr -> expr . PIPE_PIPE expr
    (31) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 19 (expr -> expr PLUS expr .)
    QUEST_MARK      reduce using rule 19 (expr -> expr PLUS expr .)
    EQUAL           reduce using rule 19 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 19 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 19 (expr -> expr PLUS expr .)
    SMALL           reduce using rule 19 (expr -> expr PLUS expr .)
    BIG             reduce using rule 19 (expr -> expr PLUS expr .)
    EQUAL_EQUAL     reduce using rule 19 (expr -> expr PLUS expr .)
    EXCL_EQUAL      reduce using rule 19 (expr -> expr PLUS expr .)
    SMALL_EQUAL     reduce using rule 19 (expr -> expr PLUS expr .)
    BIG_EQUAL       reduce using rule 19 (expr -> expr PLUS expr .)
    PIPE_PIPE       reduce using rule 19 (expr -> expr PLUS expr .)
    AMP_AMP         reduce using rule 19 (expr -> expr PLUS expr .)
    RPARANT         reduce using rule 19 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 19 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 19 (expr -> expr PLUS expr .)
    COLON           reduce using rule 19 (expr -> expr PLUS expr .)
    LBRACKET        shift and go to state 41
    MULTIPLY        shift and go to state 46
    DIVIDE          shift and go to state 47
    PERCENT         shift and go to state 48

  ! LBRACKET        [ reduce using rule 19 (expr -> expr PLUS expr .) ]
  ! MULTIPLY        [ reduce using rule 19 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 19 (expr -> expr PLUS expr .) ]
  ! PERCENT         [ reduce using rule 19 (expr -> expr PLUS expr .) ]
  ! QUEST_MARK      [ shift and go to state 42 ]
  ! EQUAL           [ shift and go to state 43 ]
  ! PLUS            [ shift and go to state 44 ]
  ! MINUS           [ shift and go to state 45 ]
  ! SMALL           [ shift and go to state 49 ]
  ! BIG             [ shift and go to state 50 ]
  ! EQUAL_EQUAL     [ shift and go to state 51 ]
  ! EXCL_EQUAL      [ shift and go to state 52 ]
  ! SMALL_EQUAL     [ shift and go to state 53 ]
  ! BIG_EQUAL       [ shift and go to state 54 ]
  ! PIPE_PIPE       [ shift and go to state 55 ]
  ! AMP_AMP         [ shift and go to state 56 ]


state 74

    (20) expr -> expr MINUS expr .
    (16) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUEST_MARK expr COLON expr
    (18) expr -> expr . EQUAL expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MULTIPLY expr
    (22) expr -> expr . DIVIDE expr
    (23) expr -> expr . PERCENT expr
    (24) expr -> expr . SMALL expr
    (25) expr -> expr . BIG expr
    (26) expr -> expr . EQUAL_EQUAL expr
    (27) expr -> expr . EXCL_EQUAL expr
    (28) expr -> expr . SMALL_EQUAL expr
    (29) expr -> expr . BIG_EQUAL expr
    (30) expr -> expr . PIPE_PIPE expr
    (31) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 20 (expr -> expr MINUS expr .)
    QUEST_MARK      reduce using rule 20 (expr -> expr MINUS expr .)
    EQUAL           reduce using rule 20 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 20 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 20 (expr -> expr MINUS expr .)
    SMALL           reduce using rule 20 (expr -> expr MINUS expr .)
    BIG             reduce using rule 20 (expr -> expr MINUS expr .)
    EQUAL_EQUAL     reduce using rule 20 (expr -> expr MINUS expr .)
    EXCL_EQUAL      reduce using rule 20 (expr -> expr MINUS expr .)
    SMALL_EQUAL     reduce using rule 20 (expr -> expr MINUS expr .)
    BIG_EQUAL       reduce using rule 20 (expr -> expr MINUS expr .)
    PIPE_PIPE       reduce using rule 20 (expr -> expr MINUS expr .)
    AMP_AMP         reduce using rule 20 (expr -> expr MINUS expr .)
    RPARANT         reduce using rule 20 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 20 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 20 (expr -> expr MINUS expr .)
    COLON           reduce using rule 20 (expr -> expr MINUS expr .)
    LBRACKET        shift and go to state 41
    MULTIPLY        shift and go to state 46
    DIVIDE          shift and go to state 47
    PERCENT         shift and go to state 48

  ! LBRACKET        [ reduce using rule 20 (expr -> expr MINUS expr .) ]
  ! MULTIPLY        [ reduce using rule 20 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 20 (expr -> expr MINUS expr .) ]
  ! PERCENT         [ reduce using rule 20 (expr -> expr MINUS expr .) ]
  ! QUEST_MARK      [ shift and go to state 42 ]
  ! EQUAL           [ shift and go to state 43 ]
  ! PLUS            [ shift and go to state 44 ]
  ! MINUS           [ shift and go to state 45 ]
  ! SMALL           [ shift and go to state 49 ]
  ! BIG             [ shift and go to state 50 ]
  ! EQUAL_EQUAL     [ shift and go to state 51 ]
  ! EXCL_EQUAL      [ shift and go to state 52 ]
  ! SMALL_EQUAL     [ shift and go to state 53 ]
  ! BIG_EQUAL       [ shift and go to state 54 ]
  ! PIPE_PIPE       [ shift and go to state 55 ]
  ! AMP_AMP         [ shift and go to state 56 ]


state 75

    (21) expr -> expr MULTIPLY expr .
    (16) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUEST_MARK expr COLON expr
    (18) expr -> expr . EQUAL expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MULTIPLY expr
    (22) expr -> expr . DIVIDE expr
    (23) expr -> expr . PERCENT expr
    (24) expr -> expr . SMALL expr
    (25) expr -> expr . BIG expr
    (26) expr -> expr . EQUAL_EQUAL expr
    (27) expr -> expr . EXCL_EQUAL expr
    (28) expr -> expr . SMALL_EQUAL expr
    (29) expr -> expr . BIG_EQUAL expr
    (30) expr -> expr . PIPE_PIPE expr
    (31) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 21 (expr -> expr MULTIPLY expr .)
    QUEST_MARK      reduce using rule 21 (expr -> expr MULTIPLY expr .)
    EQUAL           reduce using rule 21 (expr -> expr MULTIPLY expr .)
    PLUS            reduce using rule 21 (expr -> expr MULTIPLY expr .)
    MINUS           reduce using rule 21 (expr -> expr MULTIPLY expr .)
    MULTIPLY        reduce using rule 21 (expr -> expr MULTIPLY expr .)
    DIVIDE          reduce using rule 21 (expr -> expr MULTIPLY expr .)
    PERCENT         reduce using rule 21 (expr -> expr MULTIPLY expr .)
    SMALL           reduce using rule 21 (expr -> expr MULTIPLY expr .)
    BIG             reduce using rule 21 (expr -> expr MULTIPLY expr .)
    EQUAL_EQUAL     reduce using rule 21 (expr -> expr MULTIPLY expr .)
    EXCL_EQUAL      reduce using rule 21 (expr -> expr MULTIPLY expr .)
    SMALL_EQUAL     reduce using rule 21 (expr -> expr MULTIPLY expr .)
    BIG_EQUAL       reduce using rule 21 (expr -> expr MULTIPLY expr .)
    PIPE_PIPE       reduce using rule 21 (expr -> expr MULTIPLY expr .)
    AMP_AMP         reduce using rule 21 (expr -> expr MULTIPLY expr .)
    RPARANT         reduce using rule 21 (expr -> expr MULTIPLY expr .)
    COMMA           reduce using rule 21 (expr -> expr MULTIPLY expr .)
    RBRACKET        reduce using rule 21 (expr -> expr MULTIPLY expr .)
    COLON           reduce using rule 21 (expr -> expr MULTIPLY expr .)
    LBRACKET        shift and go to state 41

  ! LBRACKET        [ reduce using rule 21 (expr -> expr MULTIPLY expr .) ]
  ! QUEST_MARK      [ shift and go to state 42 ]
  ! EQUAL           [ shift and go to state 43 ]
  ! PLUS            [ shift and go to state 44 ]
  ! MINUS           [ shift and go to state 45 ]
  ! MULTIPLY        [ shift and go to state 46 ]
  ! DIVIDE          [ shift and go to state 47 ]
  ! PERCENT         [ shift and go to state 48 ]
  ! SMALL           [ shift and go to state 49 ]
  ! BIG             [ shift and go to state 50 ]
  ! EQUAL_EQUAL     [ shift and go to state 51 ]
  ! EXCL_EQUAL      [ shift and go to state 52 ]
  ! SMALL_EQUAL     [ shift and go to state 53 ]
  ! BIG_EQUAL       [ shift and go to state 54 ]
  ! PIPE_PIPE       [ shift and go to state 55 ]
  ! AMP_AMP         [ shift and go to state 56 ]


state 76

    (22) expr -> expr DIVIDE expr .
    (16) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUEST_MARK expr COLON expr
    (18) expr -> expr . EQUAL expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MULTIPLY expr
    (22) expr -> expr . DIVIDE expr
    (23) expr -> expr . PERCENT expr
    (24) expr -> expr . SMALL expr
    (25) expr -> expr . BIG expr
    (26) expr -> expr . EQUAL_EQUAL expr
    (27) expr -> expr . EXCL_EQUAL expr
    (28) expr -> expr . SMALL_EQUAL expr
    (29) expr -> expr . BIG_EQUAL expr
    (30) expr -> expr . PIPE_PIPE expr
    (31) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 22 (expr -> expr DIVIDE expr .)
    QUEST_MARK      reduce using rule 22 (expr -> expr DIVIDE expr .)
    EQUAL           reduce using rule 22 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 22 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 22 (expr -> expr DIVIDE expr .)
    MULTIPLY        reduce using rule 22 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 22 (expr -> expr DIVIDE expr .)
    PERCENT         reduce using rule 22 (expr -> expr DIVIDE expr .)
    SMALL           reduce using rule 22 (expr -> expr DIVIDE expr .)
    BIG             reduce using rule 22 (expr -> expr DIVIDE expr .)
    EQUAL_EQUAL     reduce using rule 22 (expr -> expr DIVIDE expr .)
    EXCL_EQUAL      reduce using rule 22 (expr -> expr DIVIDE expr .)
    SMALL_EQUAL     reduce using rule 22 (expr -> expr DIVIDE expr .)
    BIG_EQUAL       reduce using rule 22 (expr -> expr DIVIDE expr .)
    PIPE_PIPE       reduce using rule 22 (expr -> expr DIVIDE expr .)
    AMP_AMP         reduce using rule 22 (expr -> expr DIVIDE expr .)
    RPARANT         reduce using rule 22 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 22 (expr -> expr DIVIDE expr .)
    RBRACKET        reduce using rule 22 (expr -> expr DIVIDE expr .)
    COLON           reduce using rule 22 (expr -> expr DIVIDE expr .)
    LBRACKET        shift and go to state 41

  ! LBRACKET        [ reduce using rule 22 (expr -> expr DIVIDE expr .) ]
  ! QUEST_MARK      [ shift and go to state 42 ]
  ! EQUAL           [ shift and go to state 43 ]
  ! PLUS            [ shift and go to state 44 ]
  ! MINUS           [ shift and go to state 45 ]
  ! MULTIPLY        [ shift and go to state 46 ]
  ! DIVIDE          [ shift and go to state 47 ]
  ! PERCENT         [ shift and go to state 48 ]
  ! SMALL           [ shift and go to state 49 ]
  ! BIG             [ shift and go to state 50 ]
  ! EQUAL_EQUAL     [ shift and go to state 51 ]
  ! EXCL_EQUAL      [ shift and go to state 52 ]
  ! SMALL_EQUAL     [ shift and go to state 53 ]
  ! BIG_EQUAL       [ shift and go to state 54 ]
  ! PIPE_PIPE       [ shift and go to state 55 ]
  ! AMP_AMP         [ shift and go to state 56 ]


state 77

    (23) expr -> expr PERCENT expr .
    (16) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUEST_MARK expr COLON expr
    (18) expr -> expr . EQUAL expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MULTIPLY expr
    (22) expr -> expr . DIVIDE expr
    (23) expr -> expr . PERCENT expr
    (24) expr -> expr . SMALL expr
    (25) expr -> expr . BIG expr
    (26) expr -> expr . EQUAL_EQUAL expr
    (27) expr -> expr . EXCL_EQUAL expr
    (28) expr -> expr . SMALL_EQUAL expr
    (29) expr -> expr . BIG_EQUAL expr
    (30) expr -> expr . PIPE_PIPE expr
    (31) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 23 (expr -> expr PERCENT expr .)
    QUEST_MARK      reduce using rule 23 (expr -> expr PERCENT expr .)
    EQUAL           reduce using rule 23 (expr -> expr PERCENT expr .)
    PLUS            reduce using rule 23 (expr -> expr PERCENT expr .)
    MINUS           reduce using rule 23 (expr -> expr PERCENT expr .)
    MULTIPLY        reduce using rule 23 (expr -> expr PERCENT expr .)
    DIVIDE          reduce using rule 23 (expr -> expr PERCENT expr .)
    PERCENT         reduce using rule 23 (expr -> expr PERCENT expr .)
    SMALL           reduce using rule 23 (expr -> expr PERCENT expr .)
    BIG             reduce using rule 23 (expr -> expr PERCENT expr .)
    EQUAL_EQUAL     reduce using rule 23 (expr -> expr PERCENT expr .)
    EXCL_EQUAL      reduce using rule 23 (expr -> expr PERCENT expr .)
    SMALL_EQUAL     reduce using rule 23 (expr -> expr PERCENT expr .)
    BIG_EQUAL       reduce using rule 23 (expr -> expr PERCENT expr .)
    PIPE_PIPE       reduce using rule 23 (expr -> expr PERCENT expr .)
    AMP_AMP         reduce using rule 23 (expr -> expr PERCENT expr .)
    RPARANT         reduce using rule 23 (expr -> expr PERCENT expr .)
    COMMA           reduce using rule 23 (expr -> expr PERCENT expr .)
    RBRACKET        reduce using rule 23 (expr -> expr PERCENT expr .)
    COLON           reduce using rule 23 (expr -> expr PERCENT expr .)
    LBRACKET        shift and go to state 41

  ! LBRACKET        [ reduce using rule 23 (expr -> expr PERCENT expr .) ]
  ! QUEST_MARK      [ shift and go to state 42 ]
  ! EQUAL           [ shift and go to state 43 ]
  ! PLUS            [ shift and go to state 44 ]
  ! MINUS           [ shift and go to state 45 ]
  ! MULTIPLY        [ shift and go to state 46 ]
  ! DIVIDE          [ shift and go to state 47 ]
  ! PERCENT         [ shift and go to state 48 ]
  ! SMALL           [ shift and go to state 49 ]
  ! BIG             [ shift and go to state 50 ]
  ! EQUAL_EQUAL     [ shift and go to state 51 ]
  ! EXCL_EQUAL      [ shift and go to state 52 ]
  ! SMALL_EQUAL     [ shift and go to state 53 ]
  ! BIG_EQUAL       [ shift and go to state 54 ]
  ! PIPE_PIPE       [ shift and go to state 55 ]
  ! AMP_AMP         [ shift and go to state 56 ]


state 78

    (24) expr -> expr SMALL expr .
    (16) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUEST_MARK expr COLON expr
    (18) expr -> expr . EQUAL expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MULTIPLY expr
    (22) expr -> expr . DIVIDE expr
    (23) expr -> expr . PERCENT expr
    (24) expr -> expr . SMALL expr
    (25) expr -> expr . BIG expr
    (26) expr -> expr . EQUAL_EQUAL expr
    (27) expr -> expr . EXCL_EQUAL expr
    (28) expr -> expr . SMALL_EQUAL expr
    (29) expr -> expr . BIG_EQUAL expr
    (30) expr -> expr . PIPE_PIPE expr
    (31) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 24 (expr -> expr SMALL expr .)
    SMALL           reduce using rule 24 (expr -> expr SMALL expr .)
    BIG             reduce using rule 24 (expr -> expr SMALL expr .)
    EQUAL_EQUAL     reduce using rule 24 (expr -> expr SMALL expr .)
    EXCL_EQUAL      reduce using rule 24 (expr -> expr SMALL expr .)
    SMALL_EQUAL     reduce using rule 24 (expr -> expr SMALL expr .)
    BIG_EQUAL       reduce using rule 24 (expr -> expr SMALL expr .)
    PIPE_PIPE       reduce using rule 24 (expr -> expr SMALL expr .)
    AMP_AMP         reduce using rule 24 (expr -> expr SMALL expr .)
    RPARANT         reduce using rule 24 (expr -> expr SMALL expr .)
    COMMA           reduce using rule 24 (expr -> expr SMALL expr .)
    RBRACKET        reduce using rule 24 (expr -> expr SMALL expr .)
    COLON           reduce using rule 24 (expr -> expr SMALL expr .)
    LBRACKET        shift and go to state 41
    QUEST_MARK      shift and go to state 42
    EQUAL           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    DIVIDE          shift and go to state 47
    PERCENT         shift and go to state 48

  ! LBRACKET        [ reduce using rule 24 (expr -> expr SMALL expr .) ]
  ! QUEST_MARK      [ reduce using rule 24 (expr -> expr SMALL expr .) ]
  ! EQUAL           [ reduce using rule 24 (expr -> expr SMALL expr .) ]
  ! PLUS            [ reduce using rule 24 (expr -> expr SMALL expr .) ]
  ! MINUS           [ reduce using rule 24 (expr -> expr SMALL expr .) ]
  ! MULTIPLY        [ reduce using rule 24 (expr -> expr SMALL expr .) ]
  ! DIVIDE          [ reduce using rule 24 (expr -> expr SMALL expr .) ]
  ! PERCENT         [ reduce using rule 24 (expr -> expr SMALL expr .) ]
  ! SMALL           [ shift and go to state 49 ]
  ! BIG             [ shift and go to state 50 ]
  ! EQUAL_EQUAL     [ shift and go to state 51 ]
  ! EXCL_EQUAL      [ shift and go to state 52 ]
  ! SMALL_EQUAL     [ shift and go to state 53 ]
  ! BIG_EQUAL       [ shift and go to state 54 ]
  ! PIPE_PIPE       [ shift and go to state 55 ]
  ! AMP_AMP         [ shift and go to state 56 ]


state 79

    (25) expr -> expr BIG expr .
    (16) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUEST_MARK expr COLON expr
    (18) expr -> expr . EQUAL expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MULTIPLY expr
    (22) expr -> expr . DIVIDE expr
    (23) expr -> expr . PERCENT expr
    (24) expr -> expr . SMALL expr
    (25) expr -> expr . BIG expr
    (26) expr -> expr . EQUAL_EQUAL expr
    (27) expr -> expr . EXCL_EQUAL expr
    (28) expr -> expr . SMALL_EQUAL expr
    (29) expr -> expr . BIG_EQUAL expr
    (30) expr -> expr . PIPE_PIPE expr
    (31) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 25 (expr -> expr BIG expr .)
    SMALL           reduce using rule 25 (expr -> expr BIG expr .)
    BIG             reduce using rule 25 (expr -> expr BIG expr .)
    EQUAL_EQUAL     reduce using rule 25 (expr -> expr BIG expr .)
    EXCL_EQUAL      reduce using rule 25 (expr -> expr BIG expr .)
    SMALL_EQUAL     reduce using rule 25 (expr -> expr BIG expr .)
    BIG_EQUAL       reduce using rule 25 (expr -> expr BIG expr .)
    PIPE_PIPE       reduce using rule 25 (expr -> expr BIG expr .)
    AMP_AMP         reduce using rule 25 (expr -> expr BIG expr .)
    RPARANT         reduce using rule 25 (expr -> expr BIG expr .)
    COMMA           reduce using rule 25 (expr -> expr BIG expr .)
    RBRACKET        reduce using rule 25 (expr -> expr BIG expr .)
    COLON           reduce using rule 25 (expr -> expr BIG expr .)
    LBRACKET        shift and go to state 41
    QUEST_MARK      shift and go to state 42
    EQUAL           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    DIVIDE          shift and go to state 47
    PERCENT         shift and go to state 48

  ! LBRACKET        [ reduce using rule 25 (expr -> expr BIG expr .) ]
  ! QUEST_MARK      [ reduce using rule 25 (expr -> expr BIG expr .) ]
  ! EQUAL           [ reduce using rule 25 (expr -> expr BIG expr .) ]
  ! PLUS            [ reduce using rule 25 (expr -> expr BIG expr .) ]
  ! MINUS           [ reduce using rule 25 (expr -> expr BIG expr .) ]
  ! MULTIPLY        [ reduce using rule 25 (expr -> expr BIG expr .) ]
  ! DIVIDE          [ reduce using rule 25 (expr -> expr BIG expr .) ]
  ! PERCENT         [ reduce using rule 25 (expr -> expr BIG expr .) ]
  ! SMALL           [ shift and go to state 49 ]
  ! BIG             [ shift and go to state 50 ]
  ! EQUAL_EQUAL     [ shift and go to state 51 ]
  ! EXCL_EQUAL      [ shift and go to state 52 ]
  ! SMALL_EQUAL     [ shift and go to state 53 ]
  ! BIG_EQUAL       [ shift and go to state 54 ]
  ! PIPE_PIPE       [ shift and go to state 55 ]
  ! AMP_AMP         [ shift and go to state 56 ]


state 80

    (26) expr -> expr EQUAL_EQUAL expr .
    (16) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUEST_MARK expr COLON expr
    (18) expr -> expr . EQUAL expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MULTIPLY expr
    (22) expr -> expr . DIVIDE expr
    (23) expr -> expr . PERCENT expr
    (24) expr -> expr . SMALL expr
    (25) expr -> expr . BIG expr
    (26) expr -> expr . EQUAL_EQUAL expr
    (27) expr -> expr . EXCL_EQUAL expr
    (28) expr -> expr . SMALL_EQUAL expr
    (29) expr -> expr . BIG_EQUAL expr
    (30) expr -> expr . PIPE_PIPE expr
    (31) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 26 (expr -> expr EQUAL_EQUAL expr .)
    SMALL           reduce using rule 26 (expr -> expr EQUAL_EQUAL expr .)
    BIG             reduce using rule 26 (expr -> expr EQUAL_EQUAL expr .)
    EQUAL_EQUAL     reduce using rule 26 (expr -> expr EQUAL_EQUAL expr .)
    EXCL_EQUAL      reduce using rule 26 (expr -> expr EQUAL_EQUAL expr .)
    SMALL_EQUAL     reduce using rule 26 (expr -> expr EQUAL_EQUAL expr .)
    BIG_EQUAL       reduce using rule 26 (expr -> expr EQUAL_EQUAL expr .)
    PIPE_PIPE       reduce using rule 26 (expr -> expr EQUAL_EQUAL expr .)
    AMP_AMP         reduce using rule 26 (expr -> expr EQUAL_EQUAL expr .)
    RPARANT         reduce using rule 26 (expr -> expr EQUAL_EQUAL expr .)
    COMMA           reduce using rule 26 (expr -> expr EQUAL_EQUAL expr .)
    RBRACKET        reduce using rule 26 (expr -> expr EQUAL_EQUAL expr .)
    COLON           reduce using rule 26 (expr -> expr EQUAL_EQUAL expr .)
    LBRACKET        shift and go to state 41
    QUEST_MARK      shift and go to state 42
    EQUAL           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    DIVIDE          shift and go to state 47
    PERCENT         shift and go to state 48

  ! LBRACKET        [ reduce using rule 26 (expr -> expr EQUAL_EQUAL expr .) ]
  ! QUEST_MARK      [ reduce using rule 26 (expr -> expr EQUAL_EQUAL expr .) ]
  ! EQUAL           [ reduce using rule 26 (expr -> expr EQUAL_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 26 (expr -> expr EQUAL_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 26 (expr -> expr EQUAL_EQUAL expr .) ]
  ! MULTIPLY        [ reduce using rule 26 (expr -> expr EQUAL_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 26 (expr -> expr EQUAL_EQUAL expr .) ]
  ! PERCENT         [ reduce using rule 26 (expr -> expr EQUAL_EQUAL expr .) ]
  ! SMALL           [ shift and go to state 49 ]
  ! BIG             [ shift and go to state 50 ]
  ! EQUAL_EQUAL     [ shift and go to state 51 ]
  ! EXCL_EQUAL      [ shift and go to state 52 ]
  ! SMALL_EQUAL     [ shift and go to state 53 ]
  ! BIG_EQUAL       [ shift and go to state 54 ]
  ! PIPE_PIPE       [ shift and go to state 55 ]
  ! AMP_AMP         [ shift and go to state 56 ]


state 81

    (27) expr -> expr EXCL_EQUAL expr .
    (16) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUEST_MARK expr COLON expr
    (18) expr -> expr . EQUAL expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MULTIPLY expr
    (22) expr -> expr . DIVIDE expr
    (23) expr -> expr . PERCENT expr
    (24) expr -> expr . SMALL expr
    (25) expr -> expr . BIG expr
    (26) expr -> expr . EQUAL_EQUAL expr
    (27) expr -> expr . EXCL_EQUAL expr
    (28) expr -> expr . SMALL_EQUAL expr
    (29) expr -> expr . BIG_EQUAL expr
    (30) expr -> expr . PIPE_PIPE expr
    (31) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 27 (expr -> expr EXCL_EQUAL expr .)
    SMALL           reduce using rule 27 (expr -> expr EXCL_EQUAL expr .)
    BIG             reduce using rule 27 (expr -> expr EXCL_EQUAL expr .)
    EQUAL_EQUAL     reduce using rule 27 (expr -> expr EXCL_EQUAL expr .)
    EXCL_EQUAL      reduce using rule 27 (expr -> expr EXCL_EQUAL expr .)
    SMALL_EQUAL     reduce using rule 27 (expr -> expr EXCL_EQUAL expr .)
    BIG_EQUAL       reduce using rule 27 (expr -> expr EXCL_EQUAL expr .)
    PIPE_PIPE       reduce using rule 27 (expr -> expr EXCL_EQUAL expr .)
    AMP_AMP         reduce using rule 27 (expr -> expr EXCL_EQUAL expr .)
    RPARANT         reduce using rule 27 (expr -> expr EXCL_EQUAL expr .)
    COMMA           reduce using rule 27 (expr -> expr EXCL_EQUAL expr .)
    RBRACKET        reduce using rule 27 (expr -> expr EXCL_EQUAL expr .)
    COLON           reduce using rule 27 (expr -> expr EXCL_EQUAL expr .)
    LBRACKET        shift and go to state 41
    QUEST_MARK      shift and go to state 42
    EQUAL           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    DIVIDE          shift and go to state 47
    PERCENT         shift and go to state 48

  ! LBRACKET        [ reduce using rule 27 (expr -> expr EXCL_EQUAL expr .) ]
  ! QUEST_MARK      [ reduce using rule 27 (expr -> expr EXCL_EQUAL expr .) ]
  ! EQUAL           [ reduce using rule 27 (expr -> expr EXCL_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 27 (expr -> expr EXCL_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 27 (expr -> expr EXCL_EQUAL expr .) ]
  ! MULTIPLY        [ reduce using rule 27 (expr -> expr EXCL_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 27 (expr -> expr EXCL_EQUAL expr .) ]
  ! PERCENT         [ reduce using rule 27 (expr -> expr EXCL_EQUAL expr .) ]
  ! SMALL           [ shift and go to state 49 ]
  ! BIG             [ shift and go to state 50 ]
  ! EQUAL_EQUAL     [ shift and go to state 51 ]
  ! EXCL_EQUAL      [ shift and go to state 52 ]
  ! SMALL_EQUAL     [ shift and go to state 53 ]
  ! BIG_EQUAL       [ shift and go to state 54 ]
  ! PIPE_PIPE       [ shift and go to state 55 ]
  ! AMP_AMP         [ shift and go to state 56 ]


state 82

    (28) expr -> expr SMALL_EQUAL expr .
    (16) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUEST_MARK expr COLON expr
    (18) expr -> expr . EQUAL expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MULTIPLY expr
    (22) expr -> expr . DIVIDE expr
    (23) expr -> expr . PERCENT expr
    (24) expr -> expr . SMALL expr
    (25) expr -> expr . BIG expr
    (26) expr -> expr . EQUAL_EQUAL expr
    (27) expr -> expr . EXCL_EQUAL expr
    (28) expr -> expr . SMALL_EQUAL expr
    (29) expr -> expr . BIG_EQUAL expr
    (30) expr -> expr . PIPE_PIPE expr
    (31) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 28 (expr -> expr SMALL_EQUAL expr .)
    SMALL           reduce using rule 28 (expr -> expr SMALL_EQUAL expr .)
    BIG             reduce using rule 28 (expr -> expr SMALL_EQUAL expr .)
    EQUAL_EQUAL     reduce using rule 28 (expr -> expr SMALL_EQUAL expr .)
    EXCL_EQUAL      reduce using rule 28 (expr -> expr SMALL_EQUAL expr .)
    SMALL_EQUAL     reduce using rule 28 (expr -> expr SMALL_EQUAL expr .)
    BIG_EQUAL       reduce using rule 28 (expr -> expr SMALL_EQUAL expr .)
    PIPE_PIPE       reduce using rule 28 (expr -> expr SMALL_EQUAL expr .)
    AMP_AMP         reduce using rule 28 (expr -> expr SMALL_EQUAL expr .)
    RPARANT         reduce using rule 28 (expr -> expr SMALL_EQUAL expr .)
    COMMA           reduce using rule 28 (expr -> expr SMALL_EQUAL expr .)
    RBRACKET        reduce using rule 28 (expr -> expr SMALL_EQUAL expr .)
    COLON           reduce using rule 28 (expr -> expr SMALL_EQUAL expr .)
    LBRACKET        shift and go to state 41
    QUEST_MARK      shift and go to state 42
    EQUAL           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    DIVIDE          shift and go to state 47
    PERCENT         shift and go to state 48

  ! LBRACKET        [ reduce using rule 28 (expr -> expr SMALL_EQUAL expr .) ]
  ! QUEST_MARK      [ reduce using rule 28 (expr -> expr SMALL_EQUAL expr .) ]
  ! EQUAL           [ reduce using rule 28 (expr -> expr SMALL_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 28 (expr -> expr SMALL_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 28 (expr -> expr SMALL_EQUAL expr .) ]
  ! MULTIPLY        [ reduce using rule 28 (expr -> expr SMALL_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 28 (expr -> expr SMALL_EQUAL expr .) ]
  ! PERCENT         [ reduce using rule 28 (expr -> expr SMALL_EQUAL expr .) ]
  ! SMALL           [ shift and go to state 49 ]
  ! BIG             [ shift and go to state 50 ]
  ! EQUAL_EQUAL     [ shift and go to state 51 ]
  ! EXCL_EQUAL      [ shift and go to state 52 ]
  ! SMALL_EQUAL     [ shift and go to state 53 ]
  ! BIG_EQUAL       [ shift and go to state 54 ]
  ! PIPE_PIPE       [ shift and go to state 55 ]
  ! AMP_AMP         [ shift and go to state 56 ]


state 83

    (29) expr -> expr BIG_EQUAL expr .
    (16) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUEST_MARK expr COLON expr
    (18) expr -> expr . EQUAL expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MULTIPLY expr
    (22) expr -> expr . DIVIDE expr
    (23) expr -> expr . PERCENT expr
    (24) expr -> expr . SMALL expr
    (25) expr -> expr . BIG expr
    (26) expr -> expr . EQUAL_EQUAL expr
    (27) expr -> expr . EXCL_EQUAL expr
    (28) expr -> expr . SMALL_EQUAL expr
    (29) expr -> expr . BIG_EQUAL expr
    (30) expr -> expr . PIPE_PIPE expr
    (31) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 29 (expr -> expr BIG_EQUAL expr .)
    SMALL           reduce using rule 29 (expr -> expr BIG_EQUAL expr .)
    BIG             reduce using rule 29 (expr -> expr BIG_EQUAL expr .)
    EQUAL_EQUAL     reduce using rule 29 (expr -> expr BIG_EQUAL expr .)
    EXCL_EQUAL      reduce using rule 29 (expr -> expr BIG_EQUAL expr .)
    SMALL_EQUAL     reduce using rule 29 (expr -> expr BIG_EQUAL expr .)
    BIG_EQUAL       reduce using rule 29 (expr -> expr BIG_EQUAL expr .)
    PIPE_PIPE       reduce using rule 29 (expr -> expr BIG_EQUAL expr .)
    AMP_AMP         reduce using rule 29 (expr -> expr BIG_EQUAL expr .)
    RPARANT         reduce using rule 29 (expr -> expr BIG_EQUAL expr .)
    COMMA           reduce using rule 29 (expr -> expr BIG_EQUAL expr .)
    RBRACKET        reduce using rule 29 (expr -> expr BIG_EQUAL expr .)
    COLON           reduce using rule 29 (expr -> expr BIG_EQUAL expr .)
    LBRACKET        shift and go to state 41
    QUEST_MARK      shift and go to state 42
    EQUAL           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    DIVIDE          shift and go to state 47
    PERCENT         shift and go to state 48

  ! LBRACKET        [ reduce using rule 29 (expr -> expr BIG_EQUAL expr .) ]
  ! QUEST_MARK      [ reduce using rule 29 (expr -> expr BIG_EQUAL expr .) ]
  ! EQUAL           [ reduce using rule 29 (expr -> expr BIG_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 29 (expr -> expr BIG_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 29 (expr -> expr BIG_EQUAL expr .) ]
  ! MULTIPLY        [ reduce using rule 29 (expr -> expr BIG_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 29 (expr -> expr BIG_EQUAL expr .) ]
  ! PERCENT         [ reduce using rule 29 (expr -> expr BIG_EQUAL expr .) ]
  ! SMALL           [ shift and go to state 49 ]
  ! BIG             [ shift and go to state 50 ]
  ! EQUAL_EQUAL     [ shift and go to state 51 ]
  ! EXCL_EQUAL      [ shift and go to state 52 ]
  ! SMALL_EQUAL     [ shift and go to state 53 ]
  ! BIG_EQUAL       [ shift and go to state 54 ]
  ! PIPE_PIPE       [ shift and go to state 55 ]
  ! AMP_AMP         [ shift and go to state 56 ]


state 84

    (30) expr -> expr PIPE_PIPE expr .
    (16) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUEST_MARK expr COLON expr
    (18) expr -> expr . EQUAL expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MULTIPLY expr
    (22) expr -> expr . DIVIDE expr
    (23) expr -> expr . PERCENT expr
    (24) expr -> expr . SMALL expr
    (25) expr -> expr . BIG expr
    (26) expr -> expr . EQUAL_EQUAL expr
    (27) expr -> expr . EXCL_EQUAL expr
    (28) expr -> expr . SMALL_EQUAL expr
    (29) expr -> expr . BIG_EQUAL expr
    (30) expr -> expr . PIPE_PIPE expr
    (31) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 30 (expr -> expr PIPE_PIPE expr .)
    SMALL           reduce using rule 30 (expr -> expr PIPE_PIPE expr .)
    BIG             reduce using rule 30 (expr -> expr PIPE_PIPE expr .)
    EQUAL_EQUAL     reduce using rule 30 (expr -> expr PIPE_PIPE expr .)
    EXCL_EQUAL      reduce using rule 30 (expr -> expr PIPE_PIPE expr .)
    SMALL_EQUAL     reduce using rule 30 (expr -> expr PIPE_PIPE expr .)
    BIG_EQUAL       reduce using rule 30 (expr -> expr PIPE_PIPE expr .)
    PIPE_PIPE       reduce using rule 30 (expr -> expr PIPE_PIPE expr .)
    AMP_AMP         reduce using rule 30 (expr -> expr PIPE_PIPE expr .)
    RPARANT         reduce using rule 30 (expr -> expr PIPE_PIPE expr .)
    COMMA           reduce using rule 30 (expr -> expr PIPE_PIPE expr .)
    RBRACKET        reduce using rule 30 (expr -> expr PIPE_PIPE expr .)
    COLON           reduce using rule 30 (expr -> expr PIPE_PIPE expr .)
    LBRACKET        shift and go to state 41
    QUEST_MARK      shift and go to state 42
    EQUAL           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    DIVIDE          shift and go to state 47
    PERCENT         shift and go to state 48

  ! LBRACKET        [ reduce using rule 30 (expr -> expr PIPE_PIPE expr .) ]
  ! QUEST_MARK      [ reduce using rule 30 (expr -> expr PIPE_PIPE expr .) ]
  ! EQUAL           [ reduce using rule 30 (expr -> expr PIPE_PIPE expr .) ]
  ! PLUS            [ reduce using rule 30 (expr -> expr PIPE_PIPE expr .) ]
  ! MINUS           [ reduce using rule 30 (expr -> expr PIPE_PIPE expr .) ]
  ! MULTIPLY        [ reduce using rule 30 (expr -> expr PIPE_PIPE expr .) ]
  ! DIVIDE          [ reduce using rule 30 (expr -> expr PIPE_PIPE expr .) ]
  ! PERCENT         [ reduce using rule 30 (expr -> expr PIPE_PIPE expr .) ]
  ! SMALL           [ shift and go to state 49 ]
  ! BIG             [ shift and go to state 50 ]
  ! EQUAL_EQUAL     [ shift and go to state 51 ]
  ! EXCL_EQUAL      [ shift and go to state 52 ]
  ! SMALL_EQUAL     [ shift and go to state 53 ]
  ! BIG_EQUAL       [ shift and go to state 54 ]
  ! PIPE_PIPE       [ shift and go to state 55 ]
  ! AMP_AMP         [ shift and go to state 56 ]


state 85

    (31) expr -> expr AMP_AMP expr .
    (16) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUEST_MARK expr COLON expr
    (18) expr -> expr . EQUAL expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MULTIPLY expr
    (22) expr -> expr . DIVIDE expr
    (23) expr -> expr . PERCENT expr
    (24) expr -> expr . SMALL expr
    (25) expr -> expr . BIG expr
    (26) expr -> expr . EQUAL_EQUAL expr
    (27) expr -> expr . EXCL_EQUAL expr
    (28) expr -> expr . SMALL_EQUAL expr
    (29) expr -> expr . BIG_EQUAL expr
    (30) expr -> expr . PIPE_PIPE expr
    (31) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 31 (expr -> expr AMP_AMP expr .)
    SMALL           reduce using rule 31 (expr -> expr AMP_AMP expr .)
    BIG             reduce using rule 31 (expr -> expr AMP_AMP expr .)
    EQUAL_EQUAL     reduce using rule 31 (expr -> expr AMP_AMP expr .)
    EXCL_EQUAL      reduce using rule 31 (expr -> expr AMP_AMP expr .)
    SMALL_EQUAL     reduce using rule 31 (expr -> expr AMP_AMP expr .)
    BIG_EQUAL       reduce using rule 31 (expr -> expr AMP_AMP expr .)
    PIPE_PIPE       reduce using rule 31 (expr -> expr AMP_AMP expr .)
    AMP_AMP         reduce using rule 31 (expr -> expr AMP_AMP expr .)
    RPARANT         reduce using rule 31 (expr -> expr AMP_AMP expr .)
    COMMA           reduce using rule 31 (expr -> expr AMP_AMP expr .)
    RBRACKET        reduce using rule 31 (expr -> expr AMP_AMP expr .)
    COLON           reduce using rule 31 (expr -> expr AMP_AMP expr .)
    LBRACKET        shift and go to state 41
    QUEST_MARK      shift and go to state 42
    EQUAL           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    DIVIDE          shift and go to state 47
    PERCENT         shift and go to state 48

  ! LBRACKET        [ reduce using rule 31 (expr -> expr AMP_AMP expr .) ]
  ! QUEST_MARK      [ reduce using rule 31 (expr -> expr AMP_AMP expr .) ]
  ! EQUAL           [ reduce using rule 31 (expr -> expr AMP_AMP expr .) ]
  ! PLUS            [ reduce using rule 31 (expr -> expr AMP_AMP expr .) ]
  ! MINUS           [ reduce using rule 31 (expr -> expr AMP_AMP expr .) ]
  ! MULTIPLY        [ reduce using rule 31 (expr -> expr AMP_AMP expr .) ]
  ! DIVIDE          [ reduce using rule 31 (expr -> expr AMP_AMP expr .) ]
  ! PERCENT         [ reduce using rule 31 (expr -> expr AMP_AMP expr .) ]
  ! SMALL           [ shift and go to state 49 ]
  ! BIG             [ shift and go to state 50 ]
  ! EQUAL_EQUAL     [ shift and go to state 51 ]
  ! EXCL_EQUAL      [ shift and go to state 52 ]
  ! SMALL_EQUAL     [ shift and go to state 53 ]
  ! BIG_EQUAL       [ shift and go to state 54 ]
  ! PIPE_PIPE       [ shift and go to state 55 ]
  ! AMP_AMP         [ shift and go to state 56 ]


state 86

    (8) stmt -> IF LPARANT expr . RPARANT stmt
    (9) stmt -> IF LPARANT expr . RPARANT stmt ELSE stmt
    (16) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUEST_MARK expr COLON expr
    (18) expr -> expr . EQUAL expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MULTIPLY expr
    (22) expr -> expr . DIVIDE expr
    (23) expr -> expr . PERCENT expr
    (24) expr -> expr . SMALL expr
    (25) expr -> expr . BIG expr
    (26) expr -> expr . EQUAL_EQUAL expr
    (27) expr -> expr . EXCL_EQUAL expr
    (28) expr -> expr . SMALL_EQUAL expr
    (29) expr -> expr . BIG_EQUAL expr
    (30) expr -> expr . PIPE_PIPE expr
    (31) expr -> expr . AMP_AMP expr

    RPARANT         shift and go to state 95
    LBRACKET        shift and go to state 41
    QUEST_MARK      shift and go to state 42
    EQUAL           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    DIVIDE          shift and go to state 47
    PERCENT         shift and go to state 48
    SMALL           shift and go to state 49
    BIG             shift and go to state 50
    EQUAL_EQUAL     shift and go to state 51
    EXCL_EQUAL      shift and go to state 52
    SMALL_EQUAL     shift and go to state 53
    BIG_EQUAL       shift and go to state 54
    PIPE_PIPE       shift and go to state 55
    AMP_AMP         shift and go to state 56


state 87

    (10) stmt -> WHILE LPARANT expr . RPARANT DO stmt
    (16) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUEST_MARK expr COLON expr
    (18) expr -> expr . EQUAL expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MULTIPLY expr
    (22) expr -> expr . DIVIDE expr
    (23) expr -> expr . PERCENT expr
    (24) expr -> expr . SMALL expr
    (25) expr -> expr . BIG expr
    (26) expr -> expr . EQUAL_EQUAL expr
    (27) expr -> expr . EXCL_EQUAL expr
    (28) expr -> expr . SMALL_EQUAL expr
    (29) expr -> expr . BIG_EQUAL expr
    (30) expr -> expr . PIPE_PIPE expr
    (31) expr -> expr . AMP_AMP expr

    RPARANT         shift and go to state 96
    LBRACKET        shift and go to state 41
    QUEST_MARK      shift and go to state 42
    EQUAL           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    DIVIDE          shift and go to state 47
    PERCENT         shift and go to state 48
    SMALL           shift and go to state 49
    BIG             shift and go to state 50
    EQUAL_EQUAL     shift and go to state 51
    EXCL_EQUAL      shift and go to state 52
    SMALL_EQUAL     shift and go to state 53
    BIG_EQUAL       shift and go to state 54
    PIPE_PIPE       shift and go to state 55
    AMP_AMP         shift and go to state 56


state 88

    (11) stmt -> FOREACH LPARANT ID . OF expr RPARANT stmt

    OF              shift and go to state 97


state 89

    (12) stmt -> RETURN expr SEMICOLON .

    IF              reduce using rule 12 (stmt -> RETURN expr SEMICOLON .)
    WHILE           reduce using rule 12 (stmt -> RETURN expr SEMICOLON .)
    FOREACH         reduce using rule 12 (stmt -> RETURN expr SEMICOLON .)
    RETURN          reduce using rule 12 (stmt -> RETURN expr SEMICOLON .)
    COLON           reduce using rule 12 (stmt -> RETURN expr SEMICOLON .)
    ID              reduce using rule 12 (stmt -> RETURN expr SEMICOLON .)
    EXCL_MARK       reduce using rule 12 (stmt -> RETURN expr SEMICOLON .)
    MINUS           reduce using rule 12 (stmt -> RETURN expr SEMICOLON .)
    PLUS            reduce using rule 12 (stmt -> RETURN expr SEMICOLON .)
    LPARANT         reduce using rule 12 (stmt -> RETURN expr SEMICOLON .)
    NUMBER          reduce using rule 12 (stmt -> RETURN expr SEMICOLON .)
    VAL             reduce using rule 12 (stmt -> RETURN expr SEMICOLON .)
    END             reduce using rule 12 (stmt -> RETURN expr SEMICOLON .)
    ELSE            reduce using rule 12 (stmt -> RETURN expr SEMICOLON .)


state 90

    (14) defvar -> VAL type ID .

    SEMICOLON       reduce using rule 14 (defvar -> VAL type ID .)


state 91

    (15) expr -> ID LPARANT clist RPARANT .

    SEMICOLON       reduce using rule 15 (expr -> ID LPARANT clist RPARANT .)
    LBRACKET        reduce using rule 15 (expr -> ID LPARANT clist RPARANT .)
    QUEST_MARK      reduce using rule 15 (expr -> ID LPARANT clist RPARANT .)
    EQUAL           reduce using rule 15 (expr -> ID LPARANT clist RPARANT .)
    PLUS            reduce using rule 15 (expr -> ID LPARANT clist RPARANT .)
    MINUS           reduce using rule 15 (expr -> ID LPARANT clist RPARANT .)
    MULTIPLY        reduce using rule 15 (expr -> ID LPARANT clist RPARANT .)
    DIVIDE          reduce using rule 15 (expr -> ID LPARANT clist RPARANT .)
    PERCENT         reduce using rule 15 (expr -> ID LPARANT clist RPARANT .)
    SMALL           reduce using rule 15 (expr -> ID LPARANT clist RPARANT .)
    BIG             reduce using rule 15 (expr -> ID LPARANT clist RPARANT .)
    EQUAL_EQUAL     reduce using rule 15 (expr -> ID LPARANT clist RPARANT .)
    EXCL_EQUAL      reduce using rule 15 (expr -> ID LPARANT clist RPARANT .)
    SMALL_EQUAL     reduce using rule 15 (expr -> ID LPARANT clist RPARANT .)
    BIG_EQUAL       reduce using rule 15 (expr -> ID LPARANT clist RPARANT .)
    PIPE_PIPE       reduce using rule 15 (expr -> ID LPARANT clist RPARANT .)
    AMP_AMP         reduce using rule 15 (expr -> ID LPARANT clist RPARANT .)
    RPARANT         reduce using rule 15 (expr -> ID LPARANT clist RPARANT .)
    COMMA           reduce using rule 15 (expr -> ID LPARANT clist RPARANT .)
    RBRACKET        reduce using rule 15 (expr -> ID LPARANT clist RPARANT .)
    COLON           reduce using rule 15 (expr -> ID LPARANT clist RPARANT .)


state 92

    (43) clist -> expr COMMA . clist
    (41) clist -> .
    (42) clist -> . expr
    (43) clist -> . expr COMMA clist
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER

    RPARANT         reduce using rule 41 (clist -> .)
    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33

    expr                           shift and go to state 67
    clist                          shift and go to state 98

state 93

    (16) expr -> expr LBRACKET expr RBRACKET .

    SEMICOLON       reduce using rule 16 (expr -> expr LBRACKET expr RBRACKET .)
    LBRACKET        reduce using rule 16 (expr -> expr LBRACKET expr RBRACKET .)
    QUEST_MARK      reduce using rule 16 (expr -> expr LBRACKET expr RBRACKET .)
    EQUAL           reduce using rule 16 (expr -> expr LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 16 (expr -> expr LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 16 (expr -> expr LBRACKET expr RBRACKET .)
    MULTIPLY        reduce using rule 16 (expr -> expr LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 16 (expr -> expr LBRACKET expr RBRACKET .)
    PERCENT         reduce using rule 16 (expr -> expr LBRACKET expr RBRACKET .)
    SMALL           reduce using rule 16 (expr -> expr LBRACKET expr RBRACKET .)
    BIG             reduce using rule 16 (expr -> expr LBRACKET expr RBRACKET .)
    EQUAL_EQUAL     reduce using rule 16 (expr -> expr LBRACKET expr RBRACKET .)
    EXCL_EQUAL      reduce using rule 16 (expr -> expr LBRACKET expr RBRACKET .)
    SMALL_EQUAL     reduce using rule 16 (expr -> expr LBRACKET expr RBRACKET .)
    BIG_EQUAL       reduce using rule 16 (expr -> expr LBRACKET expr RBRACKET .)
    PIPE_PIPE       reduce using rule 16 (expr -> expr LBRACKET expr RBRACKET .)
    AMP_AMP         reduce using rule 16 (expr -> expr LBRACKET expr RBRACKET .)
    RPARANT         reduce using rule 16 (expr -> expr LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 16 (expr -> expr LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 16 (expr -> expr LBRACKET expr RBRACKET .)
    COLON           reduce using rule 16 (expr -> expr LBRACKET expr RBRACKET .)


state 94

    (17) expr -> expr QUEST_MARK expr COLON . expr
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33

    expr                           shift and go to state 99

state 95

    (8) stmt -> IF LPARANT expr RPARANT . stmt
    (9) stmt -> IF LPARANT expr RPARANT . stmt ELSE stmt
    (6) stmt -> . expr SEMICOLON
    (7) stmt -> . defvar SEMICOLON
    (8) stmt -> . IF LPARANT expr RPARANT stmt
    (9) stmt -> . IF LPARANT expr RPARANT stmt ELSE stmt
    (10) stmt -> . WHILE LPARANT expr RPARANT DO stmt
    (11) stmt -> . FOREACH LPARANT ID OF expr RPARANT stmt
    (12) stmt -> . RETURN expr SEMICOLON
    (13) stmt -> . COLON body END
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER
    (14) defvar -> . VAL type ID

    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOREACH         shift and go to state 28
    RETURN          shift and go to state 29
    COLON           shift and go to state 21
    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33
    VAL             shift and go to state 34

    expr                           shift and go to state 24
    stmt                           shift and go to state 100
    defvar                         shift and go to state 25

state 96

    (10) stmt -> WHILE LPARANT expr RPARANT . DO stmt

    DO              shift and go to state 101


state 97

    (11) stmt -> FOREACH LPARANT ID OF . expr RPARANT stmt
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER

    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33

    expr                           shift and go to state 102

state 98

    (43) clist -> expr COMMA clist .

    RPARANT         reduce using rule 43 (clist -> expr COMMA clist .)


state 99

    (17) expr -> expr QUEST_MARK expr COLON expr .
    (16) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUEST_MARK expr COLON expr
    (18) expr -> expr . EQUAL expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MULTIPLY expr
    (22) expr -> expr . DIVIDE expr
    (23) expr -> expr . PERCENT expr
    (24) expr -> expr . SMALL expr
    (25) expr -> expr . BIG expr
    (26) expr -> expr . EQUAL_EQUAL expr
    (27) expr -> expr . EXCL_EQUAL expr
    (28) expr -> expr . SMALL_EQUAL expr
    (29) expr -> expr . BIG_EQUAL expr
    (30) expr -> expr . PIPE_PIPE expr
    (31) expr -> expr . AMP_AMP expr

    SEMICOLON       reduce using rule 17 (expr -> expr QUEST_MARK expr COLON expr .)
    QUEST_MARK      reduce using rule 17 (expr -> expr QUEST_MARK expr COLON expr .)
    EQUAL           reduce using rule 17 (expr -> expr QUEST_MARK expr COLON expr .)
    SMALL           reduce using rule 17 (expr -> expr QUEST_MARK expr COLON expr .)
    BIG             reduce using rule 17 (expr -> expr QUEST_MARK expr COLON expr .)
    EQUAL_EQUAL     reduce using rule 17 (expr -> expr QUEST_MARK expr COLON expr .)
    EXCL_EQUAL      reduce using rule 17 (expr -> expr QUEST_MARK expr COLON expr .)
    SMALL_EQUAL     reduce using rule 17 (expr -> expr QUEST_MARK expr COLON expr .)
    BIG_EQUAL       reduce using rule 17 (expr -> expr QUEST_MARK expr COLON expr .)
    PIPE_PIPE       reduce using rule 17 (expr -> expr QUEST_MARK expr COLON expr .)
    AMP_AMP         reduce using rule 17 (expr -> expr QUEST_MARK expr COLON expr .)
    RPARANT         reduce using rule 17 (expr -> expr QUEST_MARK expr COLON expr .)
    COMMA           reduce using rule 17 (expr -> expr QUEST_MARK expr COLON expr .)
    RBRACKET        reduce using rule 17 (expr -> expr QUEST_MARK expr COLON expr .)
    COLON           reduce using rule 17 (expr -> expr QUEST_MARK expr COLON expr .)
    LBRACKET        shift and go to state 41
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    DIVIDE          shift and go to state 47
    PERCENT         shift and go to state 48

  ! LBRACKET        [ reduce using rule 17 (expr -> expr QUEST_MARK expr COLON expr .) ]
  ! PLUS            [ reduce using rule 17 (expr -> expr QUEST_MARK expr COLON expr .) ]
  ! MINUS           [ reduce using rule 17 (expr -> expr QUEST_MARK expr COLON expr .) ]
  ! MULTIPLY        [ reduce using rule 17 (expr -> expr QUEST_MARK expr COLON expr .) ]
  ! DIVIDE          [ reduce using rule 17 (expr -> expr QUEST_MARK expr COLON expr .) ]
  ! PERCENT         [ reduce using rule 17 (expr -> expr QUEST_MARK expr COLON expr .) ]
  ! QUEST_MARK      [ shift and go to state 42 ]
  ! EQUAL           [ shift and go to state 43 ]
  ! SMALL           [ shift and go to state 49 ]
  ! BIG             [ shift and go to state 50 ]
  ! EQUAL_EQUAL     [ shift and go to state 51 ]
  ! EXCL_EQUAL      [ shift and go to state 52 ]
  ! SMALL_EQUAL     [ shift and go to state 53 ]
  ! BIG_EQUAL       [ shift and go to state 54 ]
  ! PIPE_PIPE       [ shift and go to state 55 ]
  ! AMP_AMP         [ shift and go to state 56 ]


state 100

    (8) stmt -> IF LPARANT expr RPARANT stmt .
    (9) stmt -> IF LPARANT expr RPARANT stmt . ELSE stmt

    IF              reduce using rule 8 (stmt -> IF LPARANT expr RPARANT stmt .)
    WHILE           reduce using rule 8 (stmt -> IF LPARANT expr RPARANT stmt .)
    FOREACH         reduce using rule 8 (stmt -> IF LPARANT expr RPARANT stmt .)
    RETURN          reduce using rule 8 (stmt -> IF LPARANT expr RPARANT stmt .)
    COLON           reduce using rule 8 (stmt -> IF LPARANT expr RPARANT stmt .)
    ID              reduce using rule 8 (stmt -> IF LPARANT expr RPARANT stmt .)
    EXCL_MARK       reduce using rule 8 (stmt -> IF LPARANT expr RPARANT stmt .)
    MINUS           reduce using rule 8 (stmt -> IF LPARANT expr RPARANT stmt .)
    PLUS            reduce using rule 8 (stmt -> IF LPARANT expr RPARANT stmt .)
    LPARANT         reduce using rule 8 (stmt -> IF LPARANT expr RPARANT stmt .)
    NUMBER          reduce using rule 8 (stmt -> IF LPARANT expr RPARANT stmt .)
    VAL             reduce using rule 8 (stmt -> IF LPARANT expr RPARANT stmt .)
    END             reduce using rule 8 (stmt -> IF LPARANT expr RPARANT stmt .)
    ELSE            reduce using rule 8 (stmt -> IF LPARANT expr RPARANT stmt .)

  ! ELSE            [ shift and go to state 103 ]


state 101

    (10) stmt -> WHILE LPARANT expr RPARANT DO . stmt
    (6) stmt -> . expr SEMICOLON
    (7) stmt -> . defvar SEMICOLON
    (8) stmt -> . IF LPARANT expr RPARANT stmt
    (9) stmt -> . IF LPARANT expr RPARANT stmt ELSE stmt
    (10) stmt -> . WHILE LPARANT expr RPARANT DO stmt
    (11) stmt -> . FOREACH LPARANT ID OF expr RPARANT stmt
    (12) stmt -> . RETURN expr SEMICOLON
    (13) stmt -> . COLON body END
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER
    (14) defvar -> . VAL type ID

    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOREACH         shift and go to state 28
    RETURN          shift and go to state 29
    COLON           shift and go to state 21
    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33
    VAL             shift and go to state 34

    expr                           shift and go to state 24
    stmt                           shift and go to state 104
    defvar                         shift and go to state 25

state 102

    (11) stmt -> FOREACH LPARANT ID OF expr . RPARANT stmt
    (16) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUEST_MARK expr COLON expr
    (18) expr -> expr . EQUAL expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . MULTIPLY expr
    (22) expr -> expr . DIVIDE expr
    (23) expr -> expr . PERCENT expr
    (24) expr -> expr . SMALL expr
    (25) expr -> expr . BIG expr
    (26) expr -> expr . EQUAL_EQUAL expr
    (27) expr -> expr . EXCL_EQUAL expr
    (28) expr -> expr . SMALL_EQUAL expr
    (29) expr -> expr . BIG_EQUAL expr
    (30) expr -> expr . PIPE_PIPE expr
    (31) expr -> expr . AMP_AMP expr

    RPARANT         shift and go to state 105
    LBRACKET        shift and go to state 41
    QUEST_MARK      shift and go to state 42
    EQUAL           shift and go to state 43
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    DIVIDE          shift and go to state 47
    PERCENT         shift and go to state 48
    SMALL           shift and go to state 49
    BIG             shift and go to state 50
    EQUAL_EQUAL     shift and go to state 51
    EXCL_EQUAL      shift and go to state 52
    SMALL_EQUAL     shift and go to state 53
    BIG_EQUAL       shift and go to state 54
    PIPE_PIPE       shift and go to state 55
    AMP_AMP         shift and go to state 56


state 103

    (9) stmt -> IF LPARANT expr RPARANT stmt ELSE . stmt
    (6) stmt -> . expr SEMICOLON
    (7) stmt -> . defvar SEMICOLON
    (8) stmt -> . IF LPARANT expr RPARANT stmt
    (9) stmt -> . IF LPARANT expr RPARANT stmt ELSE stmt
    (10) stmt -> . WHILE LPARANT expr RPARANT DO stmt
    (11) stmt -> . FOREACH LPARANT ID OF expr RPARANT stmt
    (12) stmt -> . RETURN expr SEMICOLON
    (13) stmt -> . COLON body END
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER
    (14) defvar -> . VAL type ID

    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOREACH         shift and go to state 28
    RETURN          shift and go to state 29
    COLON           shift and go to state 21
    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33
    VAL             shift and go to state 34

    expr                           shift and go to state 24
    stmt                           shift and go to state 106
    defvar                         shift and go to state 25

state 104

    (10) stmt -> WHILE LPARANT expr RPARANT DO stmt .

    IF              reduce using rule 10 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)
    WHILE           reduce using rule 10 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)
    FOREACH         reduce using rule 10 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)
    RETURN          reduce using rule 10 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)
    COLON           reduce using rule 10 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)
    ID              reduce using rule 10 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)
    EXCL_MARK       reduce using rule 10 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)
    MINUS           reduce using rule 10 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)
    PLUS            reduce using rule 10 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)
    LPARANT         reduce using rule 10 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)
    NUMBER          reduce using rule 10 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)
    VAL             reduce using rule 10 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)
    END             reduce using rule 10 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)
    ELSE            reduce using rule 10 (stmt -> WHILE LPARANT expr RPARANT DO stmt .)


state 105

    (11) stmt -> FOREACH LPARANT ID OF expr RPARANT . stmt
    (6) stmt -> . expr SEMICOLON
    (7) stmt -> . defvar SEMICOLON
    (8) stmt -> . IF LPARANT expr RPARANT stmt
    (9) stmt -> . IF LPARANT expr RPARANT stmt ELSE stmt
    (10) stmt -> . WHILE LPARANT expr RPARANT DO stmt
    (11) stmt -> . FOREACH LPARANT ID OF expr RPARANT stmt
    (12) stmt -> . RETURN expr SEMICOLON
    (13) stmt -> . COLON body END
    (15) expr -> . ID LPARANT clist RPARANT
    (16) expr -> . expr LBRACKET expr RBRACKET
    (17) expr -> . expr QUEST_MARK expr COLON expr
    (18) expr -> . expr EQUAL expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr MULTIPLY expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . expr PERCENT expr
    (24) expr -> . expr SMALL expr
    (25) expr -> . expr BIG expr
    (26) expr -> . expr EQUAL_EQUAL expr
    (27) expr -> . expr EXCL_EQUAL expr
    (28) expr -> . expr SMALL_EQUAL expr
    (29) expr -> . expr BIG_EQUAL expr
    (30) expr -> . expr PIPE_PIPE expr
    (31) expr -> . expr AMP_AMP expr
    (32) expr -> . EXCL_MARK expr
    (33) expr -> . MINUS expr
    (34) expr -> . PLUS expr
    (35) expr -> . LPARANT expr RPARANT
    (36) expr -> . ID
    (37) expr -> . NUMBER
    (14) defvar -> . VAL type ID

    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOREACH         shift and go to state 28
    RETURN          shift and go to state 29
    COLON           shift and go to state 21
    ID              shift and go to state 19
    EXCL_MARK       shift and go to state 32
    MINUS           shift and go to state 31
    PLUS            shift and go to state 30
    LPARANT         shift and go to state 20
    NUMBER          shift and go to state 33
    VAL             shift and go to state 34

    expr                           shift and go to state 24
    stmt                           shift and go to state 107
    defvar                         shift and go to state 25

state 106

    (9) stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .

    IF              reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)
    WHILE           reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)
    FOREACH         reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)
    RETURN          reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)
    COLON           reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)
    ID              reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)
    EXCL_MARK       reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)
    MINUS           reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)
    PLUS            reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)
    LPARANT         reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)
    NUMBER          reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)
    VAL             reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)
    END             reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)
    ELSE            reduce using rule 9 (stmt -> IF LPARANT expr RPARANT stmt ELSE stmt .)


state 107

    (11) stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .

    IF              reduce using rule 11 (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .)
    WHILE           reduce using rule 11 (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .)
    FOREACH         reduce using rule 11 (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .)
    RETURN          reduce using rule 11 (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .)
    COLON           reduce using rule 11 (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .)
    ID              reduce using rule 11 (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .)
    EXCL_MARK       reduce using rule 11 (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .)
    MINUS           reduce using rule 11 (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .)
    PLUS            reduce using rule 11 (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .)
    LPARANT         reduce using rule 11 (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .)
    NUMBER          reduce using rule 11 (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .)
    VAL             reduce using rule 11 (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .)
    END             reduce using rule 11 (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .)
    ELSE            reduce using rule 11 (stmt -> FOREACH LPARANT ID OF expr RPARANT stmt .)

